# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

type RunCommandDocument <: SwaggerModel
    schema::Nullable{ String } # \$schema
    id::Nullable{ String } # id
    osType::Nullable{ String } # osType
    label::Nullable{ String } # label
    description::Nullable{ String } # description
    script::Nullable{ Vector{String} } # script
    parameters::Nullable{ Vector{RunCommandParameterDefinition} } # parameters

    function RunCommandDocument(;schema=nothing, id=nothing, osType=nothing, label=nothing, description=nothing, script=nothing, parameters=nothing)
        o = new()
        set_field!(o, :schema, schema)
        set_field!(o, :id, id)
        set_field!(o, :osType, osType)
        set_field!(o, :label, label)
        set_field!(o, :description, description)
        set_field!(o, :script, script)
        set_field!(o, :parameters, parameters)
        o
    end
end # type RunCommandDocument

const _name_map_RunCommandDocument = Dict{String,Symbol}(["\$schema"=>:schema, "id"=>:id, "osType"=>:osType, "label"=>:label, "description"=>:description, "script"=>:script, "parameters"=>:parameters])
const _field_map_RunCommandDocument = Dict{Symbol,String}([:schema=>"\$schema", :id=>"id", :osType=>"osType", :label=>"label", :description=>"description", :script=>"script", :parameters=>"parameters"])
Swagger.name_map(::Type{ RunCommandDocument }) = _name_map_RunCommandDocument
Swagger.field_map(::Type{ RunCommandDocument }) = _field_map_RunCommandDocument

const _allowed_RunCommandDocument_osType = ["Windows", "Linux"]

function check_required(o::RunCommandDocument)
    isnull(o.schema) && (return false)
    isnull(o.id) && (return false)
    isnull(o.label) && (return false)
    isnull(o.description) && (return false)
    isnull(o.script) && (return false)
    true
end

function validate_field(o::RunCommandDocument, name::Symbol, val)
    if name === :osType
        Swagger.validate_param(name, "RunCommandDocument", :enum, val, _allowed_RunCommandDocument_osType)
    end
end
