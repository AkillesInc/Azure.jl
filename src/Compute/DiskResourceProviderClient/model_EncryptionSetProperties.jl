# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct EncryptionSetProperties <: SwaggerModel
    encryptionType::Any # spec type: Union{ Nothing, EncryptionType } # spec name: encryptionType
    activeKey::Any # spec type: Union{ Nothing, KeyVaultAndKeyReference } # spec name: activeKey
    previousKeys::Any # spec type: Union{ Nothing, Vector{KeyVaultAndKeyReference} } # spec name: previousKeys
    provisioningState::Any # spec type: Union{ Nothing, String } # spec name: provisioningState

    function EncryptionSetProperties(;encryptionType=nothing, activeKey=nothing, previousKeys=nothing, provisioningState=nothing)
        o = new()
        validate_property(EncryptionSetProperties, Symbol("encryptionType"), encryptionType)
        setfield!(o, Symbol("encryptionType"), encryptionType)
        validate_property(EncryptionSetProperties, Symbol("activeKey"), activeKey)
        setfield!(o, Symbol("activeKey"), activeKey)
        validate_property(EncryptionSetProperties, Symbol("previousKeys"), previousKeys)
        setfield!(o, Symbol("previousKeys"), previousKeys)
        validate_property(EncryptionSetProperties, Symbol("provisioningState"), provisioningState)
        setfield!(o, Symbol("provisioningState"), provisioningState)
        o
    end
end # type EncryptionSetProperties

const _property_map_EncryptionSetProperties = Dict{Symbol,Symbol}(Symbol("encryptionType")=>Symbol("encryptionType"), Symbol("activeKey")=>Symbol("activeKey"), Symbol("previousKeys")=>Symbol("previousKeys"), Symbol("provisioningState")=>Symbol("provisioningState"))
const _property_types_EncryptionSetProperties = Dict{Symbol,String}(Symbol("encryptionType")=>"EncryptionType", Symbol("activeKey")=>"KeyVaultAndKeyReference", Symbol("previousKeys")=>"Vector{KeyVaultAndKeyReference}", Symbol("provisioningState")=>"String")
Base.propertynames(::Type{ EncryptionSetProperties }) = collect(keys(_property_map_EncryptionSetProperties))
Swagger.property_type(::Type{ EncryptionSetProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_EncryptionSetProperties[name]))}
Swagger.field_name(::Type{ EncryptionSetProperties }, property_name::Symbol) =  _property_map_EncryptionSetProperties[property_name]

function check_required(o::EncryptionSetProperties)
    true
end

function validate_property(::Type{ EncryptionSetProperties }, name::Symbol, val)
end
