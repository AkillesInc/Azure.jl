# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct DiskEncryptionSetUpdateProperties <: SwaggerModel
    encryptionType::Any # spec type: Union{ Nothing, EncryptionType } # spec name: encryptionType
    activeKey::Any # spec type: Union{ Nothing, KeyVaultAndKeyReference } # spec name: activeKey

    function DiskEncryptionSetUpdateProperties(;encryptionType=nothing, activeKey=nothing)
        o = new()
        validate_property(DiskEncryptionSetUpdateProperties, Symbol("encryptionType"), encryptionType)
        setfield!(o, Symbol("encryptionType"), encryptionType)
        validate_property(DiskEncryptionSetUpdateProperties, Symbol("activeKey"), activeKey)
        setfield!(o, Symbol("activeKey"), activeKey)
        o
    end
end # type DiskEncryptionSetUpdateProperties

const _property_map_DiskEncryptionSetUpdateProperties = Dict{Symbol,Symbol}(Symbol("encryptionType")=>Symbol("encryptionType"), Symbol("activeKey")=>Symbol("activeKey"))
const _property_types_DiskEncryptionSetUpdateProperties = Dict{Symbol,String}(Symbol("encryptionType")=>"EncryptionType", Symbol("activeKey")=>"KeyVaultAndKeyReference")
Base.propertynames(::Type{ DiskEncryptionSetUpdateProperties }) = collect(keys(_property_map_DiskEncryptionSetUpdateProperties))
Swagger.property_type(::Type{ DiskEncryptionSetUpdateProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DiskEncryptionSetUpdateProperties[name]))}
Swagger.field_name(::Type{ DiskEncryptionSetUpdateProperties }, property_name::Symbol) =  _property_map_DiskEncryptionSetUpdateProperties[property_name]

function check_required(o::DiskEncryptionSetUpdateProperties)
    true
end

function validate_property(::Type{ DiskEncryptionSetUpdateProperties }, name::Symbol, val)
end
