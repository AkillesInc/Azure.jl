# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct SnapshotSku <: SwaggerModel
    name::Any # spec type: Union{ Nothing, String } # spec name: name
    tier::Any # spec type: Union{ Nothing, String } # spec name: tier

    function SnapshotSku(;name=nothing, tier=nothing)
        o = new()
        validate_property(SnapshotSku, Symbol("name"), name)
        setfield!(o, Symbol("name"), name)
        validate_property(SnapshotSku, Symbol("tier"), tier)
        setfield!(o, Symbol("tier"), tier)
        o
    end
end # type SnapshotSku

const _property_map_SnapshotSku = Dict{Symbol,Symbol}(Symbol("name")=>Symbol("name"), Symbol("tier")=>Symbol("tier"))
const _property_types_SnapshotSku = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("tier")=>"String")
Base.propertynames(::Type{ SnapshotSku }) = collect(keys(_property_map_SnapshotSku))
Swagger.property_type(::Type{ SnapshotSku }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_SnapshotSku[name]))}
Swagger.field_name(::Type{ SnapshotSku }, property_name::Symbol) =  _property_map_SnapshotSku[property_name]

const _allowed_SnapshotSku_name = ["Standard_LRS", "Premium_LRS", "Standard_ZRS"]

function check_required(o::SnapshotSku)
    true
end

function validate_property(::Type{ SnapshotSku }, name::Symbol, val)
    if name === Symbol("name")
        Swagger.validate_param(name, "SnapshotSku", :enum, val, _allowed_SnapshotSku_name)
    end
end
