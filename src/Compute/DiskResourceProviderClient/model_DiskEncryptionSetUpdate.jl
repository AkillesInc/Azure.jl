# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct DiskEncryptionSetUpdate <: SwaggerModel
    properties::Any # spec type: Union{ Nothing, DiskEncryptionSetUpdateProperties } # spec name: properties
    tags::Any # spec type: Union{ Nothing, Dict{String, String} } # spec name: tags

    function DiskEncryptionSetUpdate(;properties=nothing, tags=nothing)
        o = new()
        validate_property(DiskEncryptionSetUpdate, Symbol("properties"), properties)
        setfield!(o, Symbol("properties"), properties)
        validate_property(DiskEncryptionSetUpdate, Symbol("tags"), tags)
        setfield!(o, Symbol("tags"), tags)
        o
    end
end # type DiskEncryptionSetUpdate

const _property_map_DiskEncryptionSetUpdate = Dict{Symbol,Symbol}(Symbol("properties")=>Symbol("properties"), Symbol("tags")=>Symbol("tags"))
const _property_types_DiskEncryptionSetUpdate = Dict{Symbol,String}(Symbol("properties")=>"DiskEncryptionSetUpdateProperties", Symbol("tags")=>"Dict{String, String}")
Base.propertynames(::Type{ DiskEncryptionSetUpdate }) = collect(keys(_property_map_DiskEncryptionSetUpdate))
Swagger.property_type(::Type{ DiskEncryptionSetUpdate }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DiskEncryptionSetUpdate[name]))}
Swagger.field_name(::Type{ DiskEncryptionSetUpdate }, property_name::Symbol) =  _property_map_DiskEncryptionSetUpdate[property_name]

function check_required(o::DiskEncryptionSetUpdate)
    true
end

function validate_property(::Type{ DiskEncryptionSetUpdate }, name::Symbol, val)
end
