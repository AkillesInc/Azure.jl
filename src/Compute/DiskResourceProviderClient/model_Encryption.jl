# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct Encryption <: SwaggerModel
    diskEncryptionSetId::Any # spec type: Union{ Nothing, String } # spec name: diskEncryptionSetId
    type::Any # spec type: Union{ Nothing, EncryptionType } # spec name: type

    function Encryption(;diskEncryptionSetId=nothing, type=nothing)
        o = new()
        validate_property(Encryption, Symbol("diskEncryptionSetId"), diskEncryptionSetId)
        setfield!(o, Symbol("diskEncryptionSetId"), diskEncryptionSetId)
        validate_property(Encryption, Symbol("type"), type)
        setfield!(o, Symbol("type"), type)
        o
    end
end # type Encryption

const _property_map_Encryption = Dict{Symbol,Symbol}(Symbol("diskEncryptionSetId")=>Symbol("diskEncryptionSetId"), Symbol("type")=>Symbol("type"))
const _property_types_Encryption = Dict{Symbol,String}(Symbol("diskEncryptionSetId")=>"String", Symbol("type")=>"EncryptionType")
Base.propertynames(::Type{ Encryption }) = collect(keys(_property_map_Encryption))
Swagger.property_type(::Type{ Encryption }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Encryption[name]))}
Swagger.field_name(::Type{ Encryption }, property_name::Symbol) =  _property_map_Encryption[property_name]

function check_required(o::Encryption)
    true
end

function validate_property(::Type{ Encryption }, name::Symbol, val)
end
