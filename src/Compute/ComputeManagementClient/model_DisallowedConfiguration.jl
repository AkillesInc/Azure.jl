# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct DisallowedConfiguration <: SwaggerModel
    vmDiskType::Any # spec type: Union{ Nothing, String } # spec name: vmDiskType

    function DisallowedConfiguration(;vmDiskType=nothing)
        o = new()
        validate_property(DisallowedConfiguration, Symbol("vmDiskType"), vmDiskType)
        setfield!(o, Symbol("vmDiskType"), vmDiskType)
        o
    end
end # type DisallowedConfiguration

const _property_map_DisallowedConfiguration = Dict{Symbol,Symbol}(Symbol("vmDiskType")=>Symbol("vmDiskType"))
const _property_types_DisallowedConfiguration = Dict{Symbol,String}(Symbol("vmDiskType")=>"String")
Base.propertynames(::Type{ DisallowedConfiguration }) = collect(keys(_property_map_DisallowedConfiguration))
Swagger.property_type(::Type{ DisallowedConfiguration }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DisallowedConfiguration[name]))}
Swagger.field_name(::Type{ DisallowedConfiguration }, property_name::Symbol) =  _property_map_DisallowedConfiguration[property_name]

const _allowed_DisallowedConfiguration_vmDiskType = ["None", "Unmanaged"]

function check_required(o::DisallowedConfiguration)
    true
end

function validate_property(::Type{ DisallowedConfiguration }, name::Symbol, val)
    if name === Symbol("vmDiskType")
        Swagger.validate_param(name, "DisallowedConfiguration", :enum, val, _allowed_DisallowedConfiguration_vmDiskType)
    end
end
