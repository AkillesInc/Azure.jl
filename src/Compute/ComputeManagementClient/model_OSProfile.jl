# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

mutable struct OSProfile <: SwaggerModel
    computerName::Union{ Nothing, String } # computerName
    adminUsername::Union{ Nothing, String } # adminUsername
    adminPassword::Union{ Nothing, String } # adminPassword
    customData::Union{ Nothing, String } # customData
    windowsConfiguration::Union{ Nothing, WindowsConfiguration } # windowsConfiguration
    linuxConfiguration::Union{ Nothing, LinuxConfiguration } # linuxConfiguration
    secrets::Union{ Nothing, Vector{VaultSecretGroup} } # secrets

    function OSProfile(;computerName=nothing, adminUsername=nothing, adminPassword=nothing, customData=nothing, windowsConfiguration=nothing, linuxConfiguration=nothing, secrets=nothing)
        o = new()
        set_field!(o, :computerName, computerName)
        set_field!(o, :adminUsername, adminUsername)
        set_field!(o, :adminPassword, adminPassword)
        set_field!(o, :customData, customData)
        set_field!(o, :windowsConfiguration, windowsConfiguration)
        set_field!(o, :linuxConfiguration, linuxConfiguration)
        set_field!(o, :secrets, secrets)
        o
    end
end # type OSProfile

const _name_map_OSProfile = Dict{String,Symbol}(["computerName"=>:computerName, "adminUsername"=>:adminUsername, "adminPassword"=>:adminPassword, "customData"=>:customData, "windowsConfiguration"=>:windowsConfiguration, "linuxConfiguration"=>:linuxConfiguration, "secrets"=>:secrets])
const _field_map_OSProfile = Dict{Symbol,String}([:computerName=>"computerName", :adminUsername=>"adminUsername", :adminPassword=>"adminPassword", :customData=>"customData", :windowsConfiguration=>"windowsConfiguration", :linuxConfiguration=>"linuxConfiguration", :secrets=>"secrets"])
Swagger.name_map(::Type{ OSProfile }) = _name_map_OSProfile
Swagger.field_map(::Type{ OSProfile }) = _field_map_OSProfile

function check_required(o::OSProfile)
    true
end

function validate_field(o::OSProfile, name::Symbol, val)
end
