# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct RetrieveBootDiagnosticsDataResult <: SwaggerModel
    consoleScreenshotBlobUri::Any # spec type: Union{ Nothing, String } # spec name: consoleScreenshotBlobUri
    serialConsoleLogBlobUri::Any # spec type: Union{ Nothing, String } # spec name: serialConsoleLogBlobUri

    function RetrieveBootDiagnosticsDataResult(;consoleScreenshotBlobUri=nothing, serialConsoleLogBlobUri=nothing)
        o = new()
        validate_property(RetrieveBootDiagnosticsDataResult, Symbol("consoleScreenshotBlobUri"), consoleScreenshotBlobUri)
        setfield!(o, Symbol("consoleScreenshotBlobUri"), consoleScreenshotBlobUri)
        validate_property(RetrieveBootDiagnosticsDataResult, Symbol("serialConsoleLogBlobUri"), serialConsoleLogBlobUri)
        setfield!(o, Symbol("serialConsoleLogBlobUri"), serialConsoleLogBlobUri)
        o
    end
end # type RetrieveBootDiagnosticsDataResult

const _property_map_RetrieveBootDiagnosticsDataResult = Dict{Symbol,Symbol}(Symbol("consoleScreenshotBlobUri")=>Symbol("consoleScreenshotBlobUri"), Symbol("serialConsoleLogBlobUri")=>Symbol("serialConsoleLogBlobUri"))
const _property_types_RetrieveBootDiagnosticsDataResult = Dict{Symbol,String}(Symbol("consoleScreenshotBlobUri")=>"String", Symbol("serialConsoleLogBlobUri")=>"String")
Base.propertynames(::Type{ RetrieveBootDiagnosticsDataResult }) = collect(keys(_property_map_RetrieveBootDiagnosticsDataResult))
Swagger.property_type(::Type{ RetrieveBootDiagnosticsDataResult }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_RetrieveBootDiagnosticsDataResult[name]))}
Swagger.field_name(::Type{ RetrieveBootDiagnosticsDataResult }, property_name::Symbol) =  _property_map_RetrieveBootDiagnosticsDataResult[property_name]

function check_required(o::RetrieveBootDiagnosticsDataResult)
    true
end

function validate_property(::Type{ RetrieveBootDiagnosticsDataResult }, name::Symbol, val)
end
