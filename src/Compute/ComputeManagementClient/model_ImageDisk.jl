# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct ImageDisk <: SwaggerModel
    snapshot::Any # spec type: Union{ Nothing, SubResource } # spec name: snapshot
    managedDisk::Any # spec type: Union{ Nothing, SubResource } # spec name: managedDisk
    blobUri::Any # spec type: Union{ Nothing, String } # spec name: blobUri
    caching::Any # spec type: Union{ Nothing, String } # spec name: caching
    diskSizeGB::Any # spec type: Union{ Nothing, Int32 } # spec name: diskSizeGB
    storageAccountType::Any # spec type: Union{ Nothing, StorageAccountType } # spec name: storageAccountType
    diskEncryptionSet::Any # spec type: Union{ Nothing, DiskEncryptionSetParameters } # spec name: diskEncryptionSet

    function ImageDisk(;snapshot=nothing, managedDisk=nothing, blobUri=nothing, caching=nothing, diskSizeGB=nothing, storageAccountType=nothing, diskEncryptionSet=nothing)
        o = new()
        validate_property(ImageDisk, Symbol("snapshot"), snapshot)
        setfield!(o, Symbol("snapshot"), snapshot)
        validate_property(ImageDisk, Symbol("managedDisk"), managedDisk)
        setfield!(o, Symbol("managedDisk"), managedDisk)
        validate_property(ImageDisk, Symbol("blobUri"), blobUri)
        setfield!(o, Symbol("blobUri"), blobUri)
        validate_property(ImageDisk, Symbol("caching"), caching)
        setfield!(o, Symbol("caching"), caching)
        validate_property(ImageDisk, Symbol("diskSizeGB"), diskSizeGB)
        setfield!(o, Symbol("diskSizeGB"), diskSizeGB)
        validate_property(ImageDisk, Symbol("storageAccountType"), storageAccountType)
        setfield!(o, Symbol("storageAccountType"), storageAccountType)
        validate_property(ImageDisk, Symbol("diskEncryptionSet"), diskEncryptionSet)
        setfield!(o, Symbol("diskEncryptionSet"), diskEncryptionSet)
        o
    end
end # type ImageDisk

const _property_map_ImageDisk = Dict{Symbol,Symbol}(Symbol("snapshot")=>Symbol("snapshot"), Symbol("managedDisk")=>Symbol("managedDisk"), Symbol("blobUri")=>Symbol("blobUri"), Symbol("caching")=>Symbol("caching"), Symbol("diskSizeGB")=>Symbol("diskSizeGB"), Symbol("storageAccountType")=>Symbol("storageAccountType"), Symbol("diskEncryptionSet")=>Symbol("diskEncryptionSet"))
const _property_types_ImageDisk = Dict{Symbol,String}(Symbol("snapshot")=>"SubResource", Symbol("managedDisk")=>"SubResource", Symbol("blobUri")=>"String", Symbol("caching")=>"String", Symbol("diskSizeGB")=>"Int32", Symbol("storageAccountType")=>"StorageAccountType", Symbol("diskEncryptionSet")=>"DiskEncryptionSetParameters")
Base.propertynames(::Type{ ImageDisk }) = collect(keys(_property_map_ImageDisk))
Swagger.property_type(::Type{ ImageDisk }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ImageDisk[name]))}
Swagger.field_name(::Type{ ImageDisk }, property_name::Symbol) =  _property_map_ImageDisk[property_name]

const _allowed_ImageDisk_caching = ["None", "ReadOnly", "ReadWrite"]

function check_required(o::ImageDisk)
    true
end

function validate_property(::Type{ ImageDisk }, name::Symbol, val)
    if name === Symbol("caching")
        Swagger.validate_param(name, "ImageDisk", :enum, val, _allowed_ImageDisk_caching)
    end
end
