# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct DedicatedHostProperties <: SwaggerModel
    platformFaultDomain::Any # spec type: Union{ Nothing, Int32 } # spec name: platformFaultDomain
    autoReplaceOnFailure::Any # spec type: Union{ Nothing, Bool } # spec name: autoReplaceOnFailure
    hostId::Any # spec type: Union{ Nothing, String } # spec name: hostId
    virtualMachines::Any # spec type: Union{ Nothing, Vector{SubResourceReadOnly} } # spec name: virtualMachines
    licenseType::Any # spec type: Union{ Nothing, DedicatedHostLicenseType } # spec name: licenseType
    provisioningTime::Any # spec type: Union{ Nothing, DateTime } # spec name: provisioningTime
    provisioningState::Any # spec type: Union{ Nothing, String } # spec name: provisioningState
    instanceView::Any # spec type: Union{ Nothing, DedicatedHostInstanceView } # spec name: instanceView

    function DedicatedHostProperties(;platformFaultDomain=nothing, autoReplaceOnFailure=nothing, hostId=nothing, virtualMachines=nothing, licenseType=nothing, provisioningTime=nothing, provisioningState=nothing, instanceView=nothing)
        o = new()
        validate_property(DedicatedHostProperties, Symbol("platformFaultDomain"), platformFaultDomain)
        setfield!(o, Symbol("platformFaultDomain"), platformFaultDomain)
        validate_property(DedicatedHostProperties, Symbol("autoReplaceOnFailure"), autoReplaceOnFailure)
        setfield!(o, Symbol("autoReplaceOnFailure"), autoReplaceOnFailure)
        validate_property(DedicatedHostProperties, Symbol("hostId"), hostId)
        setfield!(o, Symbol("hostId"), hostId)
        validate_property(DedicatedHostProperties, Symbol("virtualMachines"), virtualMachines)
        setfield!(o, Symbol("virtualMachines"), virtualMachines)
        validate_property(DedicatedHostProperties, Symbol("licenseType"), licenseType)
        setfield!(o, Symbol("licenseType"), licenseType)
        validate_property(DedicatedHostProperties, Symbol("provisioningTime"), provisioningTime)
        setfield!(o, Symbol("provisioningTime"), provisioningTime)
        validate_property(DedicatedHostProperties, Symbol("provisioningState"), provisioningState)
        setfield!(o, Symbol("provisioningState"), provisioningState)
        validate_property(DedicatedHostProperties, Symbol("instanceView"), instanceView)
        setfield!(o, Symbol("instanceView"), instanceView)
        o
    end
end # type DedicatedHostProperties

const _property_map_DedicatedHostProperties = Dict{Symbol,Symbol}(Symbol("platformFaultDomain")=>Symbol("platformFaultDomain"), Symbol("autoReplaceOnFailure")=>Symbol("autoReplaceOnFailure"), Symbol("hostId")=>Symbol("hostId"), Symbol("virtualMachines")=>Symbol("virtualMachines"), Symbol("licenseType")=>Symbol("licenseType"), Symbol("provisioningTime")=>Symbol("provisioningTime"), Symbol("provisioningState")=>Symbol("provisioningState"), Symbol("instanceView")=>Symbol("instanceView"))
const _property_types_DedicatedHostProperties = Dict{Symbol,String}(Symbol("platformFaultDomain")=>"Int32", Symbol("autoReplaceOnFailure")=>"Bool", Symbol("hostId")=>"String", Symbol("virtualMachines")=>"Vector{SubResourceReadOnly}", Symbol("licenseType")=>"DedicatedHostLicenseType", Symbol("provisioningTime")=>"DateTime", Symbol("provisioningState")=>"String", Symbol("instanceView")=>"DedicatedHostInstanceView")
Base.propertynames(::Type{ DedicatedHostProperties }) = collect(keys(_property_map_DedicatedHostProperties))
Swagger.property_type(::Type{ DedicatedHostProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DedicatedHostProperties[name]))}
Swagger.field_name(::Type{ DedicatedHostProperties }, property_name::Symbol) =  _property_map_DedicatedHostProperties[property_name]

function check_required(o::DedicatedHostProperties)
    true
end

function validate_property(::Type{ DedicatedHostProperties }, name::Symbol, val)
    if name === Symbol("platformFaultDomain")
        Swagger.validate_param(name, "DedicatedHostProperties", :maximum, val, 2, false)
        Swagger.validate_param(name, "DedicatedHostProperties", :minimum, val, 0, false)
    end
end
