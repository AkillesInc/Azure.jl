# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct ImageStorageProfile <: SwaggerModel
    osDisk::Any # spec type: Union{ Nothing, ImageOSDisk } # spec name: osDisk
    dataDisks::Any # spec type: Union{ Nothing, Vector{ImageDataDisk} } # spec name: dataDisks
    zoneResilient::Any # spec type: Union{ Nothing, Bool } # spec name: zoneResilient

    function ImageStorageProfile(;osDisk=nothing, dataDisks=nothing, zoneResilient=nothing)
        o = new()
        validate_property(ImageStorageProfile, Symbol("osDisk"), osDisk)
        setfield!(o, Symbol("osDisk"), osDisk)
        validate_property(ImageStorageProfile, Symbol("dataDisks"), dataDisks)
        setfield!(o, Symbol("dataDisks"), dataDisks)
        validate_property(ImageStorageProfile, Symbol("zoneResilient"), zoneResilient)
        setfield!(o, Symbol("zoneResilient"), zoneResilient)
        o
    end
end # type ImageStorageProfile

const _property_map_ImageStorageProfile = Dict{Symbol,Symbol}(Symbol("osDisk")=>Symbol("osDisk"), Symbol("dataDisks")=>Symbol("dataDisks"), Symbol("zoneResilient")=>Symbol("zoneResilient"))
const _property_types_ImageStorageProfile = Dict{Symbol,String}(Symbol("osDisk")=>"ImageOSDisk", Symbol("dataDisks")=>"Vector{ImageDataDisk}", Symbol("zoneResilient")=>"Bool")
Base.propertynames(::Type{ ImageStorageProfile }) = collect(keys(_property_map_ImageStorageProfile))
Swagger.property_type(::Type{ ImageStorageProfile }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ImageStorageProfile[name]))}
Swagger.field_name(::Type{ ImageStorageProfile }, property_name::Symbol) =  _property_map_ImageStorageProfile[property_name]

function check_required(o::ImageStorageProfile)
    true
end

function validate_property(::Type{ ImageStorageProfile }, name::Symbol, val)
end
