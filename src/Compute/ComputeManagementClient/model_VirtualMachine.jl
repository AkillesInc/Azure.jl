# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

mutable struct VirtualMachine <: SwaggerModel
    id::Union{ Nothing, String } # id
    name::Union{ Nothing, String } # name
    _type::Union{ Nothing, String } # type
    location::Union{ Nothing, String } # location
    tags::Union{ Nothing, Dict{String, String} } # tags
    plan::Union{ Nothing, Plan } # plan
    properties::Union{ Nothing, VirtualMachineProperties } # properties
    resources::Union{ Nothing, Vector{VirtualMachineExtension} } # resources
    identity::Union{ Nothing, VirtualMachineIdentity } # identity
    zones::Union{ Nothing, Vector{String} } # zones

    function VirtualMachine(;id=nothing, name=nothing, _type=nothing, location=nothing, tags=nothing, plan=nothing, properties=nothing, resources=nothing, identity=nothing, zones=nothing)
        o = new()
        set_field!(o, :id, id)
        set_field!(o, :name, name)
        set_field!(o, :_type, _type)
        set_field!(o, :location, location)
        set_field!(o, :tags, tags)
        set_field!(o, :plan, plan)
        set_field!(o, :properties, properties)
        set_field!(o, :resources, resources)
        set_field!(o, :identity, identity)
        set_field!(o, :zones, zones)
        o
    end
end # type VirtualMachine

const _name_map_VirtualMachine = Dict{String,Symbol}(["id"=>:id, "name"=>:name, "type"=>:_type, "location"=>:location, "tags"=>:tags, "plan"=>:plan, "properties"=>:properties, "resources"=>:resources, "identity"=>:identity, "zones"=>:zones])
const _field_map_VirtualMachine = Dict{Symbol,String}([:id=>"id", :name=>"name", :_type=>"type", :location=>"location", :tags=>"tags", :plan=>"plan", :properties=>"properties", :resources=>"resources", :identity=>"identity", :zones=>"zones"])
Swagger.name_map(::Type{ VirtualMachine }) = _name_map_VirtualMachine
Swagger.field_map(::Type{ VirtualMachine }) = _field_map_VirtualMachine

function check_required(o::VirtualMachine)
    (o.location === nothing) && (return false)
    true
end

function validate_field(o::VirtualMachine, name::Symbol, val)
end
