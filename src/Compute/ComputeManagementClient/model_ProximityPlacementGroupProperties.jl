# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct ProximityPlacementGroupProperties <: SwaggerModel
    proximityPlacementGroupType::Any # spec type: Union{ Nothing, String } # spec name: proximityPlacementGroupType
    virtualMachines::Any # spec type: Union{ Nothing, Vector{SubResourceWithColocationStatus} } # spec name: virtualMachines
    virtualMachineScaleSets::Any # spec type: Union{ Nothing, Vector{SubResourceWithColocationStatus} } # spec name: virtualMachineScaleSets
    availabilitySets::Any # spec type: Union{ Nothing, Vector{SubResourceWithColocationStatus} } # spec name: availabilitySets
    colocationStatus::Any # spec type: Union{ Nothing, InstanceViewStatus } # spec name: colocationStatus

    function ProximityPlacementGroupProperties(;proximityPlacementGroupType=nothing, virtualMachines=nothing, virtualMachineScaleSets=nothing, availabilitySets=nothing, colocationStatus=nothing)
        o = new()
        validate_property(ProximityPlacementGroupProperties, Symbol("proximityPlacementGroupType"), proximityPlacementGroupType)
        setfield!(o, Symbol("proximityPlacementGroupType"), proximityPlacementGroupType)
        validate_property(ProximityPlacementGroupProperties, Symbol("virtualMachines"), virtualMachines)
        setfield!(o, Symbol("virtualMachines"), virtualMachines)
        validate_property(ProximityPlacementGroupProperties, Symbol("virtualMachineScaleSets"), virtualMachineScaleSets)
        setfield!(o, Symbol("virtualMachineScaleSets"), virtualMachineScaleSets)
        validate_property(ProximityPlacementGroupProperties, Symbol("availabilitySets"), availabilitySets)
        setfield!(o, Symbol("availabilitySets"), availabilitySets)
        validate_property(ProximityPlacementGroupProperties, Symbol("colocationStatus"), colocationStatus)
        setfield!(o, Symbol("colocationStatus"), colocationStatus)
        o
    end
end # type ProximityPlacementGroupProperties

const _property_map_ProximityPlacementGroupProperties = Dict{Symbol,Symbol}(Symbol("proximityPlacementGroupType")=>Symbol("proximityPlacementGroupType"), Symbol("virtualMachines")=>Symbol("virtualMachines"), Symbol("virtualMachineScaleSets")=>Symbol("virtualMachineScaleSets"), Symbol("availabilitySets")=>Symbol("availabilitySets"), Symbol("colocationStatus")=>Symbol("colocationStatus"))
const _property_types_ProximityPlacementGroupProperties = Dict{Symbol,String}(Symbol("proximityPlacementGroupType")=>"String", Symbol("virtualMachines")=>"Vector{SubResourceWithColocationStatus}", Symbol("virtualMachineScaleSets")=>"Vector{SubResourceWithColocationStatus}", Symbol("availabilitySets")=>"Vector{SubResourceWithColocationStatus}", Symbol("colocationStatus")=>"InstanceViewStatus")
Base.propertynames(::Type{ ProximityPlacementGroupProperties }) = collect(keys(_property_map_ProximityPlacementGroupProperties))
Swagger.property_type(::Type{ ProximityPlacementGroupProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ProximityPlacementGroupProperties[name]))}
Swagger.field_name(::Type{ ProximityPlacementGroupProperties }, property_name::Symbol) =  _property_map_ProximityPlacementGroupProperties[property_name]

const _allowed_ProximityPlacementGroupProperties_proximityPlacementGroupType = ["Standard", "Ultra"]

function check_required(o::ProximityPlacementGroupProperties)
    true
end

function validate_property(::Type{ ProximityPlacementGroupProperties }, name::Symbol, val)
    if name === Symbol("proximityPlacementGroupType")
        Swagger.validate_param(name, "ProximityPlacementGroupProperties", :enum, val, _allowed_ProximityPlacementGroupProperties_proximityPlacementGroupType)
    end
end
