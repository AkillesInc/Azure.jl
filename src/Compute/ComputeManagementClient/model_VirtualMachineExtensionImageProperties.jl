# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

mutable struct VirtualMachineExtensionImageProperties <: SwaggerModel
    operatingSystem::Union{ Nothing, String } # operatingSystem
    computeRole::Union{ Nothing, String } # computeRole
    handlerSchema::Union{ Nothing, String } # handlerSchema
    vmScaleSetEnabled::Union{ Nothing, Bool } # vmScaleSetEnabled
    supportsMultipleExtensions::Union{ Nothing, Bool } # supportsMultipleExtensions

    function VirtualMachineExtensionImageProperties(;operatingSystem=nothing, computeRole=nothing, handlerSchema=nothing, vmScaleSetEnabled=nothing, supportsMultipleExtensions=nothing)
        o = new()
        set_field!(o, :operatingSystem, operatingSystem)
        set_field!(o, :computeRole, computeRole)
        set_field!(o, :handlerSchema, handlerSchema)
        set_field!(o, :vmScaleSetEnabled, vmScaleSetEnabled)
        set_field!(o, :supportsMultipleExtensions, supportsMultipleExtensions)
        o
    end
end # type VirtualMachineExtensionImageProperties

const _name_map_VirtualMachineExtensionImageProperties = Dict{String,Symbol}(["operatingSystem"=>:operatingSystem, "computeRole"=>:computeRole, "handlerSchema"=>:handlerSchema, "vmScaleSetEnabled"=>:vmScaleSetEnabled, "supportsMultipleExtensions"=>:supportsMultipleExtensions])
const _field_map_VirtualMachineExtensionImageProperties = Dict{Symbol,String}([:operatingSystem=>"operatingSystem", :computeRole=>"computeRole", :handlerSchema=>"handlerSchema", :vmScaleSetEnabled=>"vmScaleSetEnabled", :supportsMultipleExtensions=>"supportsMultipleExtensions"])
Swagger.name_map(::Type{ VirtualMachineExtensionImageProperties }) = _name_map_VirtualMachineExtensionImageProperties
Swagger.field_map(::Type{ VirtualMachineExtensionImageProperties }) = _field_map_VirtualMachineExtensionImageProperties

function check_required(o::VirtualMachineExtensionImageProperties)
    (o.operatingSystem === nothing) && (return false)
    (o.computeRole === nothing) && (return false)
    (o.handlerSchema === nothing) && (return false)
    true
end

function validate_field(o::VirtualMachineExtensionImageProperties, name::Symbol, val)
end
