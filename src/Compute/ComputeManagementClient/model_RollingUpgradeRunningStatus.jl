# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

mutable struct RollingUpgradeRunningStatus <: SwaggerModel
    code::Union{ Nothing, String } # code
    startTime::Union{ Nothing, DateTime } # startTime
    lastAction::Union{ Nothing, String } # lastAction
    lastActionTime::Union{ Nothing, DateTime } # lastActionTime

    function RollingUpgradeRunningStatus(;code=nothing, startTime=nothing, lastAction=nothing, lastActionTime=nothing)
        o = new()
        set_field!(o, :code, code)
        set_field!(o, :startTime, startTime)
        set_field!(o, :lastAction, lastAction)
        set_field!(o, :lastActionTime, lastActionTime)
        o
    end
end # type RollingUpgradeRunningStatus

const _name_map_RollingUpgradeRunningStatus = Dict{String,Symbol}(["code"=>:code, "startTime"=>:startTime, "lastAction"=>:lastAction, "lastActionTime"=>:lastActionTime])
const _field_map_RollingUpgradeRunningStatus = Dict{Symbol,String}([:code=>"code", :startTime=>"startTime", :lastAction=>"lastAction", :lastActionTime=>"lastActionTime"])
Swagger.name_map(::Type{ RollingUpgradeRunningStatus }) = _name_map_RollingUpgradeRunningStatus
Swagger.field_map(::Type{ RollingUpgradeRunningStatus }) = _field_map_RollingUpgradeRunningStatus

const _allowed_RollingUpgradeRunningStatus_code = ["RollingForward", "Cancelled", "Completed", "Faulted"]

const _allowed_RollingUpgradeRunningStatus_lastAction = ["Start", "Cancel"]

function check_required(o::RollingUpgradeRunningStatus)
    true
end

function validate_field(o::RollingUpgradeRunningStatus, name::Symbol, val)
    if name === :code
        Swagger.validate_param(name, "RollingUpgradeRunningStatus", :enum, val, _allowed_RollingUpgradeRunningStatus_code)
    end
    if name === :lastAction
        Swagger.validate_param(name, "RollingUpgradeRunningStatus", :enum, val, _allowed_RollingUpgradeRunningStatus_lastAction)
    end
end
