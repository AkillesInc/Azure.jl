# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct VirtualMachineAssessPatchesResult <: SwaggerModel
    status::Any # spec type: Union{ Nothing, String } # spec name: status
    assessmentActivityId::Any # spec type: Union{ Nothing, String } # spec name: assessmentActivityId
    rebootPending::Any # spec type: Union{ Nothing, Bool } # spec name: rebootPending
    criticalAndSecurityPatchCount::Any # spec type: Union{ Nothing, Int32 } # spec name: criticalAndSecurityPatchCount
    otherPatchCount::Any # spec type: Union{ Nothing, Int32 } # spec name: otherPatchCount
    startDateTime::Any # spec type: Union{ Nothing, DateTime } # spec name: startDateTime
    patches::Any # spec type: Union{ Nothing, Vector{VirtualMachineSoftwarePatchProperties} } # spec name: patches
    error::Any # spec type: Union{ Nothing, ApiError } # spec name: error

    function VirtualMachineAssessPatchesResult(;status=nothing, assessmentActivityId=nothing, rebootPending=nothing, criticalAndSecurityPatchCount=nothing, otherPatchCount=nothing, startDateTime=nothing, patches=nothing, error=nothing)
        o = new()
        validate_property(VirtualMachineAssessPatchesResult, Symbol("status"), status)
        setfield!(o, Symbol("status"), status)
        validate_property(VirtualMachineAssessPatchesResult, Symbol("assessmentActivityId"), assessmentActivityId)
        setfield!(o, Symbol("assessmentActivityId"), assessmentActivityId)
        validate_property(VirtualMachineAssessPatchesResult, Symbol("rebootPending"), rebootPending)
        setfield!(o, Symbol("rebootPending"), rebootPending)
        validate_property(VirtualMachineAssessPatchesResult, Symbol("criticalAndSecurityPatchCount"), criticalAndSecurityPatchCount)
        setfield!(o, Symbol("criticalAndSecurityPatchCount"), criticalAndSecurityPatchCount)
        validate_property(VirtualMachineAssessPatchesResult, Symbol("otherPatchCount"), otherPatchCount)
        setfield!(o, Symbol("otherPatchCount"), otherPatchCount)
        validate_property(VirtualMachineAssessPatchesResult, Symbol("startDateTime"), startDateTime)
        setfield!(o, Symbol("startDateTime"), startDateTime)
        validate_property(VirtualMachineAssessPatchesResult, Symbol("patches"), patches)
        setfield!(o, Symbol("patches"), patches)
        validate_property(VirtualMachineAssessPatchesResult, Symbol("error"), error)
        setfield!(o, Symbol("error"), error)
        o
    end
end # type VirtualMachineAssessPatchesResult

const _property_map_VirtualMachineAssessPatchesResult = Dict{Symbol,Symbol}(Symbol("status")=>Symbol("status"), Symbol("assessmentActivityId")=>Symbol("assessmentActivityId"), Symbol("rebootPending")=>Symbol("rebootPending"), Symbol("criticalAndSecurityPatchCount")=>Symbol("criticalAndSecurityPatchCount"), Symbol("otherPatchCount")=>Symbol("otherPatchCount"), Symbol("startDateTime")=>Symbol("startDateTime"), Symbol("patches")=>Symbol("patches"), Symbol("error")=>Symbol("error"))
const _property_types_VirtualMachineAssessPatchesResult = Dict{Symbol,String}(Symbol("status")=>"String", Symbol("assessmentActivityId")=>"String", Symbol("rebootPending")=>"Bool", Symbol("criticalAndSecurityPatchCount")=>"Int32", Symbol("otherPatchCount")=>"Int32", Symbol("startDateTime")=>"DateTime", Symbol("patches")=>"Vector{VirtualMachineSoftwarePatchProperties}", Symbol("error")=>"ApiError")
Base.propertynames(::Type{ VirtualMachineAssessPatchesResult }) = collect(keys(_property_map_VirtualMachineAssessPatchesResult))
Swagger.property_type(::Type{ VirtualMachineAssessPatchesResult }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_VirtualMachineAssessPatchesResult[name]))}
Swagger.field_name(::Type{ VirtualMachineAssessPatchesResult }, property_name::Symbol) =  _property_map_VirtualMachineAssessPatchesResult[property_name]

const _allowed_VirtualMachineAssessPatchesResult_status = ["InProgress", "Failed", "Succeeded", "CompletedWithWarnings"]

function check_required(o::VirtualMachineAssessPatchesResult)
    true
end

function validate_property(::Type{ VirtualMachineAssessPatchesResult }, name::Symbol, val)
    if name === Symbol("status")
        Swagger.validate_param(name, "VirtualMachineAssessPatchesResult", :enum, val, _allowed_VirtualMachineAssessPatchesResult_status)
    end
end
