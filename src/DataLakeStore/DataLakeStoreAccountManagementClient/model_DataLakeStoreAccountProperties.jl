# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

type DataLakeStoreAccountProperties <: SwaggerModel
    provisioningState::Nullable{ String } # provisioningState
    state::Nullable{ String } # state
    creationTime::Nullable{ DateTime } # creationTime
    encryptionState::Nullable{ String } # encryptionState
    encryptionProvisioningState::Nullable{ String } # encryptionProvisioningState
    encryptionConfig::Nullable{ EncryptionConfig } # encryptionConfig
    firewallState::Nullable{ String } # firewallState
    firewallRules::Nullable{ Vector{FirewallRule} } # firewallRules
    trustedIdProviderState::Nullable{ String } # trustedIdProviderState
    trustedIdProviders::Nullable{ Vector{TrustedIdProvider} } # trustedIdProviders
    lastModifiedTime::Nullable{ DateTime } # lastModifiedTime
    endpoint::Nullable{ String } # endpoint
    defaultGroup::Nullable{ String } # defaultGroup
    newTier::Nullable{ String } # newTier
    currentTier::Nullable{ String } # currentTier
    firewallAllowAzureIps::Nullable{ String } # firewallAllowAzureIps

    function DataLakeStoreAccountProperties(;provisioningState=nothing, state=nothing, creationTime=nothing, encryptionState=nothing, encryptionProvisioningState=nothing, encryptionConfig=nothing, firewallState=nothing, firewallRules=nothing, trustedIdProviderState=nothing, trustedIdProviders=nothing, lastModifiedTime=nothing, endpoint=nothing, defaultGroup=nothing, newTier=nothing, currentTier=nothing, firewallAllowAzureIps=nothing)
        o = new()
        set_field!(o, :provisioningState, provisioningState)
        set_field!(o, :state, state)
        set_field!(o, :creationTime, creationTime)
        set_field!(o, :encryptionState, encryptionState)
        set_field!(o, :encryptionProvisioningState, encryptionProvisioningState)
        set_field!(o, :encryptionConfig, encryptionConfig)
        set_field!(o, :firewallState, firewallState)
        set_field!(o, :firewallRules, firewallRules)
        set_field!(o, :trustedIdProviderState, trustedIdProviderState)
        set_field!(o, :trustedIdProviders, trustedIdProviders)
        set_field!(o, :lastModifiedTime, lastModifiedTime)
        set_field!(o, :endpoint, endpoint)
        set_field!(o, :defaultGroup, defaultGroup)
        set_field!(o, :newTier, newTier)
        set_field!(o, :currentTier, currentTier)
        set_field!(o, :firewallAllowAzureIps, firewallAllowAzureIps)
        o
    end
end # type DataLakeStoreAccountProperties

const _name_map_DataLakeStoreAccountProperties = Dict{String,Symbol}(["provisioningState"=>:provisioningState, "state"=>:state, "creationTime"=>:creationTime, "encryptionState"=>:encryptionState, "encryptionProvisioningState"=>:encryptionProvisioningState, "encryptionConfig"=>:encryptionConfig, "firewallState"=>:firewallState, "firewallRules"=>:firewallRules, "trustedIdProviderState"=>:trustedIdProviderState, "trustedIdProviders"=>:trustedIdProviders, "lastModifiedTime"=>:lastModifiedTime, "endpoint"=>:endpoint, "defaultGroup"=>:defaultGroup, "newTier"=>:newTier, "currentTier"=>:currentTier, "firewallAllowAzureIps"=>:firewallAllowAzureIps])
const _field_map_DataLakeStoreAccountProperties = Dict{Symbol,String}([:provisioningState=>"provisioningState", :state=>"state", :creationTime=>"creationTime", :encryptionState=>"encryptionState", :encryptionProvisioningState=>"encryptionProvisioningState", :encryptionConfig=>"encryptionConfig", :firewallState=>"firewallState", :firewallRules=>"firewallRules", :trustedIdProviderState=>"trustedIdProviderState", :trustedIdProviders=>"trustedIdProviders", :lastModifiedTime=>"lastModifiedTime", :endpoint=>"endpoint", :defaultGroup=>"defaultGroup", :newTier=>"newTier", :currentTier=>"currentTier", :firewallAllowAzureIps=>"firewallAllowAzureIps"])
Swagger.name_map(::Type{ DataLakeStoreAccountProperties }) = _name_map_DataLakeStoreAccountProperties
Swagger.field_map(::Type{ DataLakeStoreAccountProperties }) = _field_map_DataLakeStoreAccountProperties

const _allowed_DataLakeStoreAccountProperties_provisioningState = ["Failed", "Creating", "Running", "Succeeded", "Patching", "Suspending", "Resuming", "Deleting", "Deleted"]

const _allowed_DataLakeStoreAccountProperties_state = ["Active", "Suspended"]

const _allowed_DataLakeStoreAccountProperties_encryptionState = ["Enabled", "Disabled"]

const _allowed_DataLakeStoreAccountProperties_encryptionProvisioningState = ["Creating", "Succeeded"]

const _allowed_DataLakeStoreAccountProperties_firewallState = ["Enabled", "Disabled"]

const _allowed_DataLakeStoreAccountProperties_trustedIdProviderState = ["Enabled", "Disabled"]

const _allowed_DataLakeStoreAccountProperties_newTier = ["Consumption", "Commitment_1TB", "Commitment_10TB", "Commitment_100TB", "Commitment_500TB", "Commitment_1PB", "Commitment_5PB"]

const _allowed_DataLakeStoreAccountProperties_currentTier = ["Consumption", "Commitment_1TB", "Commitment_10TB", "Commitment_100TB", "Commitment_500TB", "Commitment_1PB", "Commitment_5PB"]

const _allowed_DataLakeStoreAccountProperties_firewallAllowAzureIps = ["Enabled", "Disabled"]

function check_required(o::DataLakeStoreAccountProperties)
    true
end

function validate_field(o::DataLakeStoreAccountProperties, name::Symbol, val)
    if name === :provisioningState
        Swagger.validate_param(name, "DataLakeStoreAccountProperties", :enum, val, _allowed_DataLakeStoreAccountProperties_provisioningState)
    end
    if name === :state
        Swagger.validate_param(name, "DataLakeStoreAccountProperties", :enum, val, _allowed_DataLakeStoreAccountProperties_state)
    end
    if name === :encryptionState
        Swagger.validate_param(name, "DataLakeStoreAccountProperties", :enum, val, _allowed_DataLakeStoreAccountProperties_encryptionState)
    end
    if name === :encryptionProvisioningState
        Swagger.validate_param(name, "DataLakeStoreAccountProperties", :enum, val, _allowed_DataLakeStoreAccountProperties_encryptionProvisioningState)
    end
    if name === :firewallState
        Swagger.validate_param(name, "DataLakeStoreAccountProperties", :enum, val, _allowed_DataLakeStoreAccountProperties_firewallState)
    end
    if name === :trustedIdProviderState
        Swagger.validate_param(name, "DataLakeStoreAccountProperties", :enum, val, _allowed_DataLakeStoreAccountProperties_trustedIdProviderState)
    end
    if name === :newTier
        Swagger.validate_param(name, "DataLakeStoreAccountProperties", :enum, val, _allowed_DataLakeStoreAccountProperties_newTier)
    end
    if name === :currentTier
        Swagger.validate_param(name, "DataLakeStoreAccountProperties", :enum, val, _allowed_DataLakeStoreAccountProperties_currentTier)
    end
    if name === :firewallAllowAzureIps
        Swagger.validate_param(name, "DataLakeStoreAccountProperties", :enum, val, _allowed_DataLakeStoreAccountProperties_firewallAllowAzureIps)
    end
end
