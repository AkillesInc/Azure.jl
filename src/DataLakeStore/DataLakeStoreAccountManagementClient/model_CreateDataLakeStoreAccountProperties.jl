# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct CreateDataLakeStoreAccountProperties <: SwaggerModel
    defaultGroup::Any # spec type: Union{ Nothing, String } # spec name: defaultGroup
    encryptionConfig::Any # spec type: Union{ Nothing, EncryptionConfig } # spec name: encryptionConfig
    encryptionState::Any # spec type: Union{ Nothing, String } # spec name: encryptionState
    firewallRules::Any # spec type: Union{ Nothing, Vector{CreateFirewallRuleWithAccountParameters} } # spec name: firewallRules
    virtualNetworkRules::Any # spec type: Union{ Nothing, Vector{CreateVirtualNetworkRuleWithAccountParameters} } # spec name: virtualNetworkRules
    firewallState::Any # spec type: Union{ Nothing, String } # spec name: firewallState
    firewallAllowAzureIps::Any # spec type: Union{ Nothing, String } # spec name: firewallAllowAzureIps
    trustedIdProviders::Any # spec type: Union{ Nothing, Vector{CreateTrustedIdProviderWithAccountParameters} } # spec name: trustedIdProviders
    trustedIdProviderState::Any # spec type: Union{ Nothing, String } # spec name: trustedIdProviderState
    newTier::Any # spec type: Union{ Nothing, String } # spec name: newTier

    function CreateDataLakeStoreAccountProperties(;defaultGroup=nothing, encryptionConfig=nothing, encryptionState=nothing, firewallRules=nothing, virtualNetworkRules=nothing, firewallState=nothing, firewallAllowAzureIps=nothing, trustedIdProviders=nothing, trustedIdProviderState=nothing, newTier=nothing)
        o = new()
        validate_property(CreateDataLakeStoreAccountProperties, Symbol("defaultGroup"), defaultGroup)
        setfield!(o, Symbol("defaultGroup"), defaultGroup)
        validate_property(CreateDataLakeStoreAccountProperties, Symbol("encryptionConfig"), encryptionConfig)
        setfield!(o, Symbol("encryptionConfig"), encryptionConfig)
        validate_property(CreateDataLakeStoreAccountProperties, Symbol("encryptionState"), encryptionState)
        setfield!(o, Symbol("encryptionState"), encryptionState)
        validate_property(CreateDataLakeStoreAccountProperties, Symbol("firewallRules"), firewallRules)
        setfield!(o, Symbol("firewallRules"), firewallRules)
        validate_property(CreateDataLakeStoreAccountProperties, Symbol("virtualNetworkRules"), virtualNetworkRules)
        setfield!(o, Symbol("virtualNetworkRules"), virtualNetworkRules)
        validate_property(CreateDataLakeStoreAccountProperties, Symbol("firewallState"), firewallState)
        setfield!(o, Symbol("firewallState"), firewallState)
        validate_property(CreateDataLakeStoreAccountProperties, Symbol("firewallAllowAzureIps"), firewallAllowAzureIps)
        setfield!(o, Symbol("firewallAllowAzureIps"), firewallAllowAzureIps)
        validate_property(CreateDataLakeStoreAccountProperties, Symbol("trustedIdProviders"), trustedIdProviders)
        setfield!(o, Symbol("trustedIdProviders"), trustedIdProviders)
        validate_property(CreateDataLakeStoreAccountProperties, Symbol("trustedIdProviderState"), trustedIdProviderState)
        setfield!(o, Symbol("trustedIdProviderState"), trustedIdProviderState)
        validate_property(CreateDataLakeStoreAccountProperties, Symbol("newTier"), newTier)
        setfield!(o, Symbol("newTier"), newTier)
        o
    end
end # type CreateDataLakeStoreAccountProperties

const _property_map_CreateDataLakeStoreAccountProperties = Dict{Symbol,Symbol}(Symbol("defaultGroup")=>Symbol("defaultGroup"), Symbol("encryptionConfig")=>Symbol("encryptionConfig"), Symbol("encryptionState")=>Symbol("encryptionState"), Symbol("firewallRules")=>Symbol("firewallRules"), Symbol("virtualNetworkRules")=>Symbol("virtualNetworkRules"), Symbol("firewallState")=>Symbol("firewallState"), Symbol("firewallAllowAzureIps")=>Symbol("firewallAllowAzureIps"), Symbol("trustedIdProviders")=>Symbol("trustedIdProviders"), Symbol("trustedIdProviderState")=>Symbol("trustedIdProviderState"), Symbol("newTier")=>Symbol("newTier"))
const _property_types_CreateDataLakeStoreAccountProperties = Dict{Symbol,String}(Symbol("defaultGroup")=>"String", Symbol("encryptionConfig")=>"EncryptionConfig", Symbol("encryptionState")=>"String", Symbol("firewallRules")=>"Vector{CreateFirewallRuleWithAccountParameters}", Symbol("virtualNetworkRules")=>"Vector{CreateVirtualNetworkRuleWithAccountParameters}", Symbol("firewallState")=>"String", Symbol("firewallAllowAzureIps")=>"String", Symbol("trustedIdProviders")=>"Vector{CreateTrustedIdProviderWithAccountParameters}", Symbol("trustedIdProviderState")=>"String", Symbol("newTier")=>"String")
Base.propertynames(::Type{ CreateDataLakeStoreAccountProperties }) = collect(keys(_property_map_CreateDataLakeStoreAccountProperties))
Swagger.property_type(::Type{ CreateDataLakeStoreAccountProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CreateDataLakeStoreAccountProperties[name]))}
Swagger.field_name(::Type{ CreateDataLakeStoreAccountProperties }, property_name::Symbol) =  _property_map_CreateDataLakeStoreAccountProperties[property_name]

const _allowed_CreateDataLakeStoreAccountProperties_encryptionState = ["Enabled", "Disabled"]

const _allowed_CreateDataLakeStoreAccountProperties_firewallState = ["Enabled", "Disabled"]

const _allowed_CreateDataLakeStoreAccountProperties_firewallAllowAzureIps = ["Enabled", "Disabled"]

const _allowed_CreateDataLakeStoreAccountProperties_trustedIdProviderState = ["Enabled", "Disabled"]

const _allowed_CreateDataLakeStoreAccountProperties_newTier = ["Consumption", "Commitment_1TB", "Commitment_10TB", "Commitment_100TB", "Commitment_500TB", "Commitment_1PB", "Commitment_5PB"]

function check_required(o::CreateDataLakeStoreAccountProperties)
    true
end

function validate_property(::Type{ CreateDataLakeStoreAccountProperties }, name::Symbol, val)
    if name === Symbol("encryptionState")
        Swagger.validate_param(name, "CreateDataLakeStoreAccountProperties", :enum, val, _allowed_CreateDataLakeStoreAccountProperties_encryptionState)
    end
    if name === Symbol("firewallState")
        Swagger.validate_param(name, "CreateDataLakeStoreAccountProperties", :enum, val, _allowed_CreateDataLakeStoreAccountProperties_firewallState)
    end
    if name === Symbol("firewallAllowAzureIps")
        Swagger.validate_param(name, "CreateDataLakeStoreAccountProperties", :enum, val, _allowed_CreateDataLakeStoreAccountProperties_firewallAllowAzureIps)
    end
    if name === Symbol("trustedIdProviderState")
        Swagger.validate_param(name, "CreateDataLakeStoreAccountProperties", :enum, val, _allowed_CreateDataLakeStoreAccountProperties_trustedIdProviderState)
    end
    if name === Symbol("newTier")
        Swagger.validate_param(name, "CreateDataLakeStoreAccountProperties", :enum, val, _allowed_CreateDataLakeStoreAccountProperties_newTier)
    end
end
