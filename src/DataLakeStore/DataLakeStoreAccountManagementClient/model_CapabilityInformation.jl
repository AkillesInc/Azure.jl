# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

type CapabilityInformation <: SwaggerModel
    subscriptionId::Nullable{ String } # subscriptionId
    state::Nullable{ String } # state
    maxAccountCount::Nullable{ Int32 } # maxAccountCount
    accountCount::Nullable{ Int32 } # accountCount
    migrationState::Nullable{ Bool } # migrationState

    function CapabilityInformation(;subscriptionId=nothing, state=nothing, maxAccountCount=nothing, accountCount=nothing, migrationState=nothing)
        o = new()
        set_field!(o, :subscriptionId, subscriptionId)
        set_field!(o, :state, state)
        set_field!(o, :maxAccountCount, maxAccountCount)
        set_field!(o, :accountCount, accountCount)
        set_field!(o, :migrationState, migrationState)
        o
    end
end # type CapabilityInformation

const _name_map_CapabilityInformation = Dict{String,Symbol}(["subscriptionId"=>:subscriptionId, "state"=>:state, "maxAccountCount"=>:maxAccountCount, "accountCount"=>:accountCount, "migrationState"=>:migrationState])
const _field_map_CapabilityInformation = Dict{Symbol,String}([:subscriptionId=>"subscriptionId", :state=>"state", :maxAccountCount=>"maxAccountCount", :accountCount=>"accountCount", :migrationState=>"migrationState"])
Swagger.name_map(::Type{ CapabilityInformation }) = _name_map_CapabilityInformation
Swagger.field_map(::Type{ CapabilityInformation }) = _field_map_CapabilityInformation

const _allowed_CapabilityInformation_state = ["Registered", "Suspended", "Deleted", "Unregistered", "Warned"]

function check_required(o::CapabilityInformation)
    true
end

function validate_field(o::CapabilityInformation, name::Symbol, val)
    if name === :state
        Swagger.validate_param(name, "CapabilityInformation", :enum, val, _allowed_CapabilityInformation_state)
    end
end
