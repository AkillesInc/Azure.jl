# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

type UpdateDataLakeStoreAccountProperties <: SwaggerModel
    firewallState::Nullable{ String } # firewallState
    trustedIdProviderState::Nullable{ String } # trustedIdProviderState
    defaultGroup::Nullable{ String } # defaultGroup
    newTier::Nullable{ String } # newTier
    firewallAllowAzureIps::Nullable{ String } # firewallAllowAzureIps
    encryptionConfig::Nullable{ UpdateEncryptionConfig } # encryptionConfig

    function UpdateDataLakeStoreAccountProperties(;firewallState=nothing, trustedIdProviderState=nothing, defaultGroup=nothing, newTier=nothing, firewallAllowAzureIps=nothing, encryptionConfig=nothing)
        o = new()
        set_field!(o, :firewallState, firewallState)
        set_field!(o, :trustedIdProviderState, trustedIdProviderState)
        set_field!(o, :defaultGroup, defaultGroup)
        set_field!(o, :newTier, newTier)
        set_field!(o, :firewallAllowAzureIps, firewallAllowAzureIps)
        set_field!(o, :encryptionConfig, encryptionConfig)
        o
    end
end # type UpdateDataLakeStoreAccountProperties

const _name_map_UpdateDataLakeStoreAccountProperties = Dict{String,Symbol}(["firewallState"=>:firewallState, "trustedIdProviderState"=>:trustedIdProviderState, "defaultGroup"=>:defaultGroup, "newTier"=>:newTier, "firewallAllowAzureIps"=>:firewallAllowAzureIps, "encryptionConfig"=>:encryptionConfig])
const _field_map_UpdateDataLakeStoreAccountProperties = Dict{Symbol,String}([:firewallState=>"firewallState", :trustedIdProviderState=>"trustedIdProviderState", :defaultGroup=>"defaultGroup", :newTier=>"newTier", :firewallAllowAzureIps=>"firewallAllowAzureIps", :encryptionConfig=>"encryptionConfig"])
Swagger.name_map(::Type{ UpdateDataLakeStoreAccountProperties }) = _name_map_UpdateDataLakeStoreAccountProperties
Swagger.field_map(::Type{ UpdateDataLakeStoreAccountProperties }) = _field_map_UpdateDataLakeStoreAccountProperties

const _allowed_UpdateDataLakeStoreAccountProperties_firewallState = ["Enabled", "Disabled"]

const _allowed_UpdateDataLakeStoreAccountProperties_trustedIdProviderState = ["Enabled", "Disabled"]

const _allowed_UpdateDataLakeStoreAccountProperties_newTier = ["Consumption", "Commitment_1TB", "Commitment_10TB", "Commitment_100TB", "Commitment_500TB", "Commitment_1PB", "Commitment_5PB"]

const _allowed_UpdateDataLakeStoreAccountProperties_firewallAllowAzureIps = ["Enabled", "Disabled"]

function check_required(o::UpdateDataLakeStoreAccountProperties)
    true
end

function validate_field(o::UpdateDataLakeStoreAccountProperties, name::Symbol, val)
    if name === :firewallState
        Swagger.validate_param(name, "UpdateDataLakeStoreAccountProperties", :enum, val, _allowed_UpdateDataLakeStoreAccountProperties_firewallState)
    end
    if name === :trustedIdProviderState
        Swagger.validate_param(name, "UpdateDataLakeStoreAccountProperties", :enum, val, _allowed_UpdateDataLakeStoreAccountProperties_trustedIdProviderState)
    end
    if name === :newTier
        Swagger.validate_param(name, "UpdateDataLakeStoreAccountProperties", :enum, val, _allowed_UpdateDataLakeStoreAccountProperties_newTier)
    end
    if name === :firewallAllowAzureIps
        Swagger.validate_param(name, "UpdateDataLakeStoreAccountProperties", :enum, val, _allowed_UpdateDataLakeStoreAccountProperties_firewallAllowAzureIps)
    end
end
