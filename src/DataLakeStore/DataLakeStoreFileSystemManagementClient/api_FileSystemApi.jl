# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

immutable FileSystemApi <: SwaggerApi
    client::Swagger.Client
end

"""

Used for serial appends to the specified file.Â NOTE: The target must not contain data added by ConcurrentAppend. ConcurrentAppend and Append cannot be used interchangeably; once a target file has been modified using either of these append options, the other append option cannot be used on the target file.
Param: directFilePath::String (required)
Param: streamContents::Any (required)
Param: op::String (required)
Param: append::String (required)
Param: api_version::String (required)
Param: offset::Int64
Param: syncFlag::String
Param: leaseId::String
Param: fileSessionId::String
Return: Void
"""
function fileSystemAppend(_api::FileSystemApi, directFilePath::String, streamContents, op::String, append::String, api_version::String; offset=nothing, syncFlag=nothing, leaseId=nothing, fileSessionId=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Void, "/webhdfs/v1/{directFilePath}", [], streamContents)
    Swagger.set_param(_ctx.path, "directFilePath", directFilePath)  # type String
    Swagger.set_param(_ctx.query, "offset", offset)  # type Int64
    Swagger.set_param(_ctx.query, "syncFlag", syncFlag)  # type String
    Swagger.set_param(_ctx.query, "leaseId", leaseId)  # type String
    Swagger.set_param(_ctx.query, "fileSessionId", fileSessionId)  # type String
    Swagger.set_param(_ctx.query, "op", op)  # type String
    Swagger.set_param(_ctx.query, "append", append)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/octet-stream"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Checks if the specified access is available at the given path.
Param: path::String (required)
Param: fsaction::String (required)
Param: op::String (required)
Param: api_version::String (required)
Return: Void
"""
function fileSystemCheckAccess(_api::FileSystemApi, path::String, fsaction::String, op::String, api_version::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", Void, "/webhdfs/v1/{path}", [])
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_param(_ctx.query, "fsaction", fsaction)  # type String
    Swagger.set_param(_ctx.query, "op", op)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Concatenates the list of source files into the destination file, removing all source files upon success.
Param: destinationPath::String (required)
Param: sources::Vector{String} (required)
Param: op::String (required)
Param: api_version::String (required)
Return: Void
"""
function fileSystemConcat(_api::FileSystemApi, destinationPath::String, sources::Vector{String}, op::String, api_version::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Void, "/webhdfs/v1/{destinationPath}", [])
    Swagger.set_param(_ctx.path, "destinationPath", destinationPath)  # type String
    Swagger.set_param(_ctx.query, "sources", sources; collection_format="csv")  # type Vector{String}
    Swagger.set_param(_ctx.query, "op", op)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Appends to the specified file, optionally first creating the file if it does not yet exist. This method supports multiple concurrent appends to the file. NOTE: The target must not contain data added by Create or normal (serial) Append. ConcurrentAppend and Append cannot be used interchangeably; once a target file has been modified using either of these append options, the other append option cannot be used on the target file. ConcurrentAppend does not guarantee order and can result in duplicated data landing in the target file.
Param: filePath::String (required)
Param: streamContents::Any (required)
Param: op::String (required)
Param: Transfer_Encoding::String (required)
Param: api_version::String (required)
Param: appendMode::String
Param: syncFlag::String
Return: Void
"""
function fileSystemConcurrentAppend(_api::FileSystemApi, filePath::String, streamContents, op::String, Transfer_Encoding::String, api_version::String; appendMode=nothing, syncFlag=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Void, "/WebHdfsExt/{filePath}", [], streamContents)
    Swagger.set_param(_ctx.path, "filePath", filePath)  # type String
    Swagger.set_param(_ctx.query, "appendMode", appendMode)  # type String
    Swagger.set_param(_ctx.query, "op", op)  # type String
    Swagger.set_param(_ctx.query, "syncFlag", syncFlag)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_param(_ctx.header, "Transfer-Encoding", Transfer_Encoding)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/octet-stream"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Creates a file with optionally specified content. NOTE: If content is provided, the resulting file cannot be modified using ConcurrentAppend.
Param: directFilePath::String (required)
Param: op::String (required)
Param: write::String (required)
Param: api_version::String (required)
Param: streamContents::Any
Param: overwrite::Bool
Param: syncFlag::String
Param: leaseId::String
Param: permission::Int32
Return: Void
"""
function fileSystemCreate(_api::FileSystemApi, directFilePath::String, op::String, write::String, api_version::String; streamContents=nothing, overwrite=nothing, syncFlag=nothing, leaseId=nothing, permission=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", Void, "/webhdfs/v1/{directFilePath}", [], streamContents)
    Swagger.set_param(_ctx.path, "directFilePath", directFilePath)  # type String
    Swagger.set_param(_ctx.query, "overwrite", overwrite)  # type Bool
    Swagger.set_param(_ctx.query, "syncFlag", syncFlag)  # type String
    Swagger.set_param(_ctx.query, "leaseId", leaseId)  # type String
    Swagger.set_param(_ctx.query, "permission", permission)  # type Int32
    Swagger.set_param(_ctx.query, "op", op)  # type String
    Swagger.set_param(_ctx.query, "write", write)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/octet-stream"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Deletes the requested file or directory, optionally recursively.
Param: filePath::String (required)
Param: op::String (required)
Param: api_version::String (required)
Param: recursive::Bool
Return: FileOperationResult
"""
function fileSystemDelete(_api::FileSystemApi, filePath::String, op::String, api_version::String; recursive=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", FileOperationResult, "/webhdfs/v1/{filePath}", [])
    Swagger.set_param(_ctx.path, "filePath", filePath)  # type String
    Swagger.set_param(_ctx.query, "recursive", recursive)  # type Bool
    Swagger.set_param(_ctx.query, "op", op)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Gets Access Control List (ACL) entries for the specified file or directory.
Param: aclFilePath::String (required)
Param: op::String (required)
Param: api_version::String (required)
Param: tooId::Bool
Return: AclStatusResult
"""
function fileSystemGetAclStatus(_api::FileSystemApi, aclFilePath::String, op::String, api_version::String; tooId=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", AclStatusResult, "/webhdfs/v1/{aclFilePath}", [])
    Swagger.set_param(_ctx.path, "aclFilePath", aclFilePath)  # type String
    Swagger.set_param(_ctx.query, "tooId", tooId)  # type Bool
    Swagger.set_param(_ctx.query, "op", op)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Gets the file content summary object specified by the file path.
Param: getContentSummaryFilePath::String (required)
Param: op::String (required)
Param: api_version::String (required)
Return: ContentSummaryResult
"""
function fileSystemGetContentSummary(_api::FileSystemApi, getContentSummaryFilePath::String, op::String, api_version::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", ContentSummaryResult, "/webhdfs/v1/{getContentSummaryFilePath}", [])
    Swagger.set_param(_ctx.path, "getContentSummaryFilePath", getContentSummaryFilePath)  # type String
    Swagger.set_param(_ctx.query, "op", op)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Get the file status object specified by the file path.
Param: getFilePath::String (required)
Param: op::String (required)
Param: api_version::String (required)
Param: tooId::Bool
Return: FileStatusResult
"""
function fileSystemGetFileStatus(_api::FileSystemApi, getFilePath::String, op::String, api_version::String; tooId=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", FileStatusResult, "/webhdfs/v1/{getFilePath}", [])
    Swagger.set_param(_ctx.path, "getFilePath", getFilePath)  # type String
    Swagger.set_param(_ctx.query, "tooId", tooId)  # type Bool
    Swagger.set_param(_ctx.query, "op", op)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Get the list of file status objects specified by the file path, with optional pagination parameters
Param: listFilePath::String (required)
Param: op::String (required)
Param: api_version::String (required)
Param: listSize::Int32
Param: listAfter::String
Param: listBefore::String
Param: tooId::Bool
Return: FileStatusesResult
"""
function fileSystemListFileStatus(_api::FileSystemApi, listFilePath::String, op::String, api_version::String; listSize=nothing, listAfter=nothing, listBefore=nothing, tooId=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", FileStatusesResult, "/webhdfs/v1/{listFilePath}", [])
    Swagger.set_param(_ctx.path, "listFilePath", listFilePath)  # type String
    Swagger.set_param(_ctx.query, "listSize", listSize)  # type Int32
    Swagger.set_param(_ctx.query, "listAfter", listAfter)  # type String
    Swagger.set_param(_ctx.query, "listBefore", listBefore)  # type String
    Swagger.set_param(_ctx.query, "tooId", tooId)  # type Bool
    Swagger.set_param(_ctx.query, "op", op)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Creates a directory.
Param: path::String (required)
Param: op::String (required)
Param: api_version::String (required)
Param: permission::Int32
Return: FileOperationResult
"""
function fileSystemMkdirs(_api::FileSystemApi, path::String, op::String, api_version::String; permission=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", FileOperationResult, "/webhdfs/v1/{path}", [])
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_param(_ctx.query, "permission", permission)  # type Int32
    Swagger.set_param(_ctx.query, "op", op)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Modifies existing Access Control List (ACL) entries on a file or folder.
Param: modifyAclFilePath::String (required)
Param: aclspec::String (required)
Param: op::String (required)
Param: api_version::String (required)
Return: Void
"""
function fileSystemModifyAclEntries(_api::FileSystemApi, modifyAclFilePath::String, aclspec::String, op::String, api_version::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", Void, "/webhdfs/v1/{modifyAclFilePath}", [])
    Swagger.set_param(_ctx.path, "modifyAclFilePath", modifyAclFilePath)  # type String
    Swagger.set_param(_ctx.query, "aclspec", aclspec)  # type String
    Swagger.set_param(_ctx.query, "op", op)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Concatenates the list of source files into the destination file, deleting all source files upon success. This method accepts more source file paths than the Concat method. This method and the parameters it accepts are subject to change for usability in an upcoming version.
Param: msConcatDestinationPath::String (required)
Param: streamContents::Any (required)
Param: op::String (required)
Param: api_version::String (required)
Param: deleteSourceDirectory::Bool
Return: Void
"""
function fileSystemMsConcat(_api::FileSystemApi, msConcatDestinationPath::String, streamContents, op::String, api_version::String; deleteSourceDirectory=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Void, "/webhdfs/v1/{msConcatDestinationPath}", [], streamContents)
    Swagger.set_param(_ctx.path, "msConcatDestinationPath", msConcatDestinationPath)  # type String
    Swagger.set_param(_ctx.query, "deleteSourceDirectory", deleteSourceDirectory)  # type Bool
    Swagger.set_param(_ctx.query, "op", op)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/octet-stream"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Opens and reads from the specified file.
Param: directFilePath::String (required)
Param: op::String (required)
Param: read::String (required)
Param: api_version::String (required)
Param: length::Int64
Param: offset::Int64
Param: fileSessionId::String
Return: String
"""
function fileSystemOpen(_api::FileSystemApi, directFilePath::String, op::String, read::String, api_version::String; length=nothing, offset=nothing, fileSessionId=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", String, "/webhdfs/v1/{directFilePath}", [])
    Swagger.set_param(_ctx.path, "directFilePath", directFilePath)  # type String
    Swagger.set_param(_ctx.query, "length", length)  # type Int64
    Swagger.set_param(_ctx.query, "offset", offset)  # type Int64
    Swagger.set_param(_ctx.query, "fileSessionId", fileSessionId)  # type String
    Swagger.set_param(_ctx.query, "op", op)  # type String
    Swagger.set_param(_ctx.query, "read", read)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/octet-stream"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Removes the existing Access Control List (ACL) of the specified file or directory.
Param: aclFilePath::String (required)
Param: op::String (required)
Param: api_version::String (required)
Return: Void
"""
function fileSystemRemoveAcl(_api::FileSystemApi, aclFilePath::String, op::String, api_version::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", Void, "/webhdfs/v1/{aclFilePath}", [])
    Swagger.set_param(_ctx.path, "aclFilePath", aclFilePath)  # type String
    Swagger.set_param(_ctx.query, "op", op)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Removes existing Access Control List (ACL) entries for a file or folder.
Param: removeAclFilePath::String (required)
Param: aclspec::String (required)
Param: op::String (required)
Param: api_version::String (required)
Return: Void
"""
function fileSystemRemoveAclEntries(_api::FileSystemApi, removeAclFilePath::String, aclspec::String, op::String, api_version::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", Void, "/webhdfs/v1/{removeAclFilePath}", [])
    Swagger.set_param(_ctx.path, "removeAclFilePath", removeAclFilePath)  # type String
    Swagger.set_param(_ctx.query, "aclspec", aclspec)  # type String
    Swagger.set_param(_ctx.query, "op", op)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Removes the existing Default Access Control List (ACL) of the specified directory.
Param: defaultAclFilePath::String (required)
Param: op::String (required)
Param: api_version::String (required)
Return: Void
"""
function fileSystemRemoveDefaultAcl(_api::FileSystemApi, defaultAclFilePath::String, op::String, api_version::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", Void, "/webhdfs/v1/{defaultAclFilePath}", [])
    Swagger.set_param(_ctx.path, "defaultAclFilePath", defaultAclFilePath)  # type String
    Swagger.set_param(_ctx.query, "op", op)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Rename a file or directory.
Param: renameFilePath::String (required)
Param: destination::String (required)
Param: op::String (required)
Param: api_version::String (required)
Return: FileOperationResult
"""
function fileSystemRename(_api::FileSystemApi, renameFilePath::String, destination::String, op::String, api_version::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", FileOperationResult, "/webhdfs/v1/{renameFilePath}", [])
    Swagger.set_param(_ctx.path, "renameFilePath", renameFilePath)  # type String
    Swagger.set_param(_ctx.query, "destination", destination)  # type String
    Swagger.set_param(_ctx.query, "op", op)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Sets the Access Control List (ACL) for a file or folder.
Param: setAclFilePath::String (required)
Param: aclspec::String (required)
Param: op::String (required)
Param: api_version::String (required)
Return: Void
"""
function fileSystemSetAcl(_api::FileSystemApi, setAclFilePath::String, aclspec::String, op::String, api_version::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", Void, "/webhdfs/v1/{setAclFilePath}", [])
    Swagger.set_param(_ctx.path, "setAclFilePath", setAclFilePath)  # type String
    Swagger.set_param(_ctx.query, "aclspec", aclspec)  # type String
    Swagger.set_param(_ctx.query, "op", op)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Sets or removes the expiration time on the specified file. This operation can only be executed against files. Folders are not supported.
Param: filePath::String (required)
Param: expiryOption::String (required)
Param: op::String (required)
Param: api_version::String (required)
Param: expireTime::Int64
Return: Void
"""
function fileSystemSetFileExpiry(_api::FileSystemApi, filePath::String, expiryOption::String, op::String, api_version::String; expireTime=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", Void, "/WebHdfsExt/{filePath}", [])
    Swagger.set_param(_ctx.path, "filePath", filePath)  # type String
    Swagger.set_param(_ctx.query, "expiryOption", expiryOption)  # type String
    Swagger.set_param(_ctx.query, "expireTime", expireTime)  # type Int64
    Swagger.set_param(_ctx.query, "op", op)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Sets the owner of a file or directory.
Param: setOwnerFilePath::String (required)
Param: op::String (required)
Param: api_version::String (required)
Param: owner::String
Param: group::String
Return: Void
"""
function fileSystemSetOwner(_api::FileSystemApi, setOwnerFilePath::String, op::String, api_version::String; owner=nothing, group=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", Void, "/webhdfs/v1/{setOwnerFilePath}", [])
    Swagger.set_param(_ctx.path, "setOwnerFilePath", setOwnerFilePath)  # type String
    Swagger.set_param(_ctx.query, "owner", owner)  # type String
    Swagger.set_param(_ctx.query, "group", group)  # type String
    Swagger.set_param(_ctx.query, "op", op)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Sets the permission of the file or folder.
Param: setPermissionFilePath::String (required)
Param: op::String (required)
Param: api_version::String (required)
Param: permission::String
Return: Void
"""
function fileSystemSetPermission(_api::FileSystemApi, setPermissionFilePath::String, op::String, api_version::String; permission=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", Void, "/webhdfs/v1/{setPermissionFilePath}", [])
    Swagger.set_param(_ctx.path, "setPermissionFilePath", setPermissionFilePath)  # type String
    Swagger.set_param(_ctx.query, "permission", permission)  # type String
    Swagger.set_param(_ctx.query, "op", op)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

export fileSystemAppend, fileSystemCheckAccess, fileSystemConcat, fileSystemConcurrentAppend, fileSystemCreate, fileSystemDelete, fileSystemGetAclStatus, fileSystemGetContentSummary, fileSystemGetFileStatus, fileSystemListFileStatus, fileSystemMkdirs, fileSystemModifyAclEntries, fileSystemMsConcat, fileSystemOpen, fileSystemRemoveAcl, fileSystemRemoveAclEntries, fileSystemRemoveDefaultAcl, fileSystemRename, fileSystemSetAcl, fileSystemSetFileExpiry, fileSystemSetOwner, fileSystemSetPermission
