# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct PolicyAssignmentProperties <: SwaggerModel
    displayName::Any # spec type: Union{ Nothing, String } # spec name: displayName
    policyDefinitionId::Any # spec type: Union{ Nothing, String } # spec name: policyDefinitionId
    scope::Any # spec type: Union{ Nothing, String } # spec name: scope
    notScopes::Any # spec type: Union{ Nothing, Vector{String} } # spec name: notScopes
    parameters::Any # spec type: Union{ Nothing, ParameterValues } # spec name: parameters
    description::Any # spec type: Union{ Nothing, String } # spec name: description
    metadata::Any # spec type: Union{ Nothing, Any } # spec name: metadata
    enforcementMode::Any # spec type: Union{ Nothing, String } # spec name: enforcementMode

    function PolicyAssignmentProperties(;displayName=nothing, policyDefinitionId=nothing, scope=nothing, notScopes=nothing, parameters=nothing, description=nothing, metadata=nothing, enforcementMode=nothing)
        o = new()
        validate_property(PolicyAssignmentProperties, Symbol("displayName"), displayName)
        setfield!(o, Symbol("displayName"), displayName)
        validate_property(PolicyAssignmentProperties, Symbol("policyDefinitionId"), policyDefinitionId)
        setfield!(o, Symbol("policyDefinitionId"), policyDefinitionId)
        validate_property(PolicyAssignmentProperties, Symbol("scope"), scope)
        setfield!(o, Symbol("scope"), scope)
        validate_property(PolicyAssignmentProperties, Symbol("notScopes"), notScopes)
        setfield!(o, Symbol("notScopes"), notScopes)
        validate_property(PolicyAssignmentProperties, Symbol("parameters"), parameters)
        setfield!(o, Symbol("parameters"), parameters)
        validate_property(PolicyAssignmentProperties, Symbol("description"), description)
        setfield!(o, Symbol("description"), description)
        validate_property(PolicyAssignmentProperties, Symbol("metadata"), metadata)
        setfield!(o, Symbol("metadata"), metadata)
        validate_property(PolicyAssignmentProperties, Symbol("enforcementMode"), enforcementMode)
        setfield!(o, Symbol("enforcementMode"), enforcementMode)
        o
    end
end # type PolicyAssignmentProperties

const _property_map_PolicyAssignmentProperties = Dict{Symbol,Symbol}(Symbol("displayName")=>Symbol("displayName"), Symbol("policyDefinitionId")=>Symbol("policyDefinitionId"), Symbol("scope")=>Symbol("scope"), Symbol("notScopes")=>Symbol("notScopes"), Symbol("parameters")=>Symbol("parameters"), Symbol("description")=>Symbol("description"), Symbol("metadata")=>Symbol("metadata"), Symbol("enforcementMode")=>Symbol("enforcementMode"))
const _property_types_PolicyAssignmentProperties = Dict{Symbol,String}(Symbol("displayName")=>"String", Symbol("policyDefinitionId")=>"String", Symbol("scope")=>"String", Symbol("notScopes")=>"Vector{String}", Symbol("parameters")=>"ParameterValues", Symbol("description")=>"String", Symbol("metadata")=>"Any", Symbol("enforcementMode")=>"String")
Base.propertynames(::Type{ PolicyAssignmentProperties }) = collect(keys(_property_map_PolicyAssignmentProperties))
Swagger.property_type(::Type{ PolicyAssignmentProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PolicyAssignmentProperties[name]))}
Swagger.field_name(::Type{ PolicyAssignmentProperties }, property_name::Symbol) =  _property_map_PolicyAssignmentProperties[property_name]

const _allowed_PolicyAssignmentProperties_enforcementMode = ["Default", "DoNotEnforce"]

function check_required(o::PolicyAssignmentProperties)
    true
end

function validate_property(::Type{ PolicyAssignmentProperties }, name::Symbol, val)
    if name === Symbol("enforcementMode")
        Swagger.validate_param(name, "PolicyAssignmentProperties", :enum, val, _allowed_PolicyAssignmentProperties_enforcementMode)
    end
end
