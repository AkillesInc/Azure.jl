# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

type PolicyDefinitionProperties <: SwaggerModel
    policyType::Nullable{ String } # policyType
    displayName::Nullable{ String } # displayName
    description::Nullable{ String } # description
    policyRule::Nullable{ Any } # policyRule

    function PolicyDefinitionProperties(;policyType=nothing, displayName=nothing, description=nothing, policyRule=nothing)
        o = new()
        set_field!(o, :policyType, policyType)
        set_field!(o, :displayName, displayName)
        set_field!(o, :description, description)
        set_field!(o, :policyRule, policyRule)
        o
    end
end # type PolicyDefinitionProperties

const _name_map_PolicyDefinitionProperties = Dict{String,Symbol}(["policyType"=>:policyType, "displayName"=>:displayName, "description"=>:description, "policyRule"=>:policyRule])
const _field_map_PolicyDefinitionProperties = Dict{Symbol,String}([:policyType=>"policyType", :displayName=>"displayName", :description=>"description", :policyRule=>"policyRule"])
Swagger.name_map(::Type{ PolicyDefinitionProperties }) = _name_map_PolicyDefinitionProperties
Swagger.field_map(::Type{ PolicyDefinitionProperties }) = _field_map_PolicyDefinitionProperties

const _allowed_PolicyDefinitionProperties_policyType = ["NotSpecified", "BuiltIn", "Custom"]

function check_required(o::PolicyDefinitionProperties)
    true
end

function validate_field(o::PolicyDefinitionProperties, name::Symbol, val)
    if name === :policyType
        Swagger.validate_param(name, "PolicyDefinitionProperties", :enum, val, _allowed_PolicyDefinitionProperties_policyType)
    end
end
