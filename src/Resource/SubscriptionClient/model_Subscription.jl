# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct Subscription <: SwaggerModel
    id::Any # spec type: Union{ Nothing, String } # spec name: id
    subscriptionId::Any # spec type: Union{ Nothing, String } # spec name: subscriptionId
    displayName::Any # spec type: Union{ Nothing, String } # spec name: displayName
    tenantId::Any # spec type: Union{ Nothing, String } # spec name: tenantId
    state::Any # spec type: Union{ Nothing, String } # spec name: state
    subscriptionPolicies::Any # spec type: Union{ Nothing, SubscriptionPolicies } # spec name: subscriptionPolicies
    authorizationSource::Any # spec type: Union{ Nothing, String } # spec name: authorizationSource
    managedByTenants::Any # spec type: Union{ Nothing, Vector{ManagedByTenant} } # spec name: managedByTenants
    tags::Any # spec type: Union{ Nothing, Dict{String, String} } # spec name: tags

    function Subscription(;id=nothing, subscriptionId=nothing, displayName=nothing, tenantId=nothing, state=nothing, subscriptionPolicies=nothing, authorizationSource=nothing, managedByTenants=nothing, tags=nothing)
        o = new()
        validate_property(Subscription, Symbol("id"), id)
        setfield!(o, Symbol("id"), id)
        validate_property(Subscription, Symbol("subscriptionId"), subscriptionId)
        setfield!(o, Symbol("subscriptionId"), subscriptionId)
        validate_property(Subscription, Symbol("displayName"), displayName)
        setfield!(o, Symbol("displayName"), displayName)
        validate_property(Subscription, Symbol("tenantId"), tenantId)
        setfield!(o, Symbol("tenantId"), tenantId)
        validate_property(Subscription, Symbol("state"), state)
        setfield!(o, Symbol("state"), state)
        validate_property(Subscription, Symbol("subscriptionPolicies"), subscriptionPolicies)
        setfield!(o, Symbol("subscriptionPolicies"), subscriptionPolicies)
        validate_property(Subscription, Symbol("authorizationSource"), authorizationSource)
        setfield!(o, Symbol("authorizationSource"), authorizationSource)
        validate_property(Subscription, Symbol("managedByTenants"), managedByTenants)
        setfield!(o, Symbol("managedByTenants"), managedByTenants)
        validate_property(Subscription, Symbol("tags"), tags)
        setfield!(o, Symbol("tags"), tags)
        o
    end
end # type Subscription

const _property_map_Subscription = Dict{Symbol,Symbol}(Symbol("id")=>Symbol("id"), Symbol("subscriptionId")=>Symbol("subscriptionId"), Symbol("displayName")=>Symbol("displayName"), Symbol("tenantId")=>Symbol("tenantId"), Symbol("state")=>Symbol("state"), Symbol("subscriptionPolicies")=>Symbol("subscriptionPolicies"), Symbol("authorizationSource")=>Symbol("authorizationSource"), Symbol("managedByTenants")=>Symbol("managedByTenants"), Symbol("tags")=>Symbol("tags"))
const _property_types_Subscription = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("subscriptionId")=>"String", Symbol("displayName")=>"String", Symbol("tenantId")=>"String", Symbol("state")=>"String", Symbol("subscriptionPolicies")=>"SubscriptionPolicies", Symbol("authorizationSource")=>"String", Symbol("managedByTenants")=>"Vector{ManagedByTenant}", Symbol("tags")=>"Dict{String, String}")
Base.propertynames(::Type{ Subscription }) = collect(keys(_property_map_Subscription))
Swagger.property_type(::Type{ Subscription }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Subscription[name]))}
Swagger.field_name(::Type{ Subscription }, property_name::Symbol) =  _property_map_Subscription[property_name]

const _allowed_Subscription_state = ["Enabled", "Warned", "PastDue", "Disabled", "Deleted"]

function check_required(o::Subscription)
    true
end

function validate_property(::Type{ Subscription }, name::Symbol, val)
    if name === Symbol("state")
        Swagger.validate_param(name, "Subscription", :enum, val, _allowed_Subscription_state)
    end
end
