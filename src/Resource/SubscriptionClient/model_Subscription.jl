# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

type Subscription <: SwaggerModel
    id::Nullable{ String } # id
    subscriptionId::Nullable{ String } # subscriptionId
    displayName::Nullable{ String } # displayName
    state::Nullable{ String } # state
    subscriptionPolicies::Nullable{ SubscriptionPolicies } # subscriptionPolicies
    authorizationSource::Nullable{ String } # authorizationSource

    function Subscription(;id=nothing, subscriptionId=nothing, displayName=nothing, state=nothing, subscriptionPolicies=nothing, authorizationSource=nothing)
        o = new()
        set_field!(o, :id, id)
        set_field!(o, :subscriptionId, subscriptionId)
        set_field!(o, :displayName, displayName)
        set_field!(o, :state, state)
        set_field!(o, :subscriptionPolicies, subscriptionPolicies)
        set_field!(o, :authorizationSource, authorizationSource)
        o
    end
end # type Subscription

const _name_map_Subscription = Dict{String,Symbol}(["id"=>:id, "subscriptionId"=>:subscriptionId, "displayName"=>:displayName, "state"=>:state, "subscriptionPolicies"=>:subscriptionPolicies, "authorizationSource"=>:authorizationSource])
const _field_map_Subscription = Dict{Symbol,String}([:id=>"id", :subscriptionId=>"subscriptionId", :displayName=>"displayName", :state=>"state", :subscriptionPolicies=>"subscriptionPolicies", :authorizationSource=>"authorizationSource"])
Swagger.name_map(::Type{ Subscription }) = _name_map_Subscription
Swagger.field_map(::Type{ Subscription }) = _field_map_Subscription

const _allowed_Subscription_state = ["Enabled", "Warned", "PastDue", "Disabled", "Deleted"]

function check_required(o::Subscription)
    true
end

function validate_field(o::Subscription, name::Symbol, val)
    if name === :state
        Swagger.validate_param(name, "Subscription", :enum, val, _allowed_Subscription_state)
    end
end
