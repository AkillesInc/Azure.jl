# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct PairedRegion <: SwaggerModel
    name::Any # spec type: Union{ Nothing, String } # spec name: name
    id::Any # spec type: Union{ Nothing, String } # spec name: id
    subscriptionId::Any # spec type: Union{ Nothing, String } # spec name: subscriptionId

    function PairedRegion(;name=nothing, id=nothing, subscriptionId=nothing)
        o = new()
        validate_property(PairedRegion, Symbol("name"), name)
        setfield!(o, Symbol("name"), name)
        validate_property(PairedRegion, Symbol("id"), id)
        setfield!(o, Symbol("id"), id)
        validate_property(PairedRegion, Symbol("subscriptionId"), subscriptionId)
        setfield!(o, Symbol("subscriptionId"), subscriptionId)
        o
    end
end # type PairedRegion

const _property_map_PairedRegion = Dict{Symbol,Symbol}(Symbol("name")=>Symbol("name"), Symbol("id")=>Symbol("id"), Symbol("subscriptionId")=>Symbol("subscriptionId"))
const _property_types_PairedRegion = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("id")=>"String", Symbol("subscriptionId")=>"String")
Base.propertynames(::Type{ PairedRegion }) = collect(keys(_property_map_PairedRegion))
Swagger.property_type(::Type{ PairedRegion }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PairedRegion[name]))}
Swagger.field_name(::Type{ PairedRegion }, property_name::Symbol) =  _property_map_PairedRegion[property_name]

function check_required(o::PairedRegion)
    true
end

function validate_property(::Type{ PairedRegion }, name::Symbol, val)
end
