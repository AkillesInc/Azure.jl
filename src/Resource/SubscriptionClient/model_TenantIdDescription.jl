# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct TenantIdDescription <: SwaggerModel
    id::Any # spec type: Union{ Nothing, String } # spec name: id
    tenantId::Any # spec type: Union{ Nothing, String } # spec name: tenantId
    tenantCategory::Any # spec type: Union{ Nothing, String } # spec name: tenantCategory
    country::Any # spec type: Union{ Nothing, String } # spec name: country
    countryCode::Any # spec type: Union{ Nothing, String } # spec name: countryCode
    displayName::Any # spec type: Union{ Nothing, String } # spec name: displayName
    domains::Any # spec type: Union{ Nothing, Vector{String} } # spec name: domains
    defaultDomain::Any # spec type: Union{ Nothing, String } # spec name: defaultDomain
    tenantType::Any # spec type: Union{ Nothing, String } # spec name: tenantType
    tenantBrandingLogoUrl::Any # spec type: Union{ Nothing, String } # spec name: tenantBrandingLogoUrl

    function TenantIdDescription(;id=nothing, tenantId=nothing, tenantCategory=nothing, country=nothing, countryCode=nothing, displayName=nothing, domains=nothing, defaultDomain=nothing, tenantType=nothing, tenantBrandingLogoUrl=nothing)
        o = new()
        validate_property(TenantIdDescription, Symbol("id"), id)
        setfield!(o, Symbol("id"), id)
        validate_property(TenantIdDescription, Symbol("tenantId"), tenantId)
        setfield!(o, Symbol("tenantId"), tenantId)
        validate_property(TenantIdDescription, Symbol("tenantCategory"), tenantCategory)
        setfield!(o, Symbol("tenantCategory"), tenantCategory)
        validate_property(TenantIdDescription, Symbol("country"), country)
        setfield!(o, Symbol("country"), country)
        validate_property(TenantIdDescription, Symbol("countryCode"), countryCode)
        setfield!(o, Symbol("countryCode"), countryCode)
        validate_property(TenantIdDescription, Symbol("displayName"), displayName)
        setfield!(o, Symbol("displayName"), displayName)
        validate_property(TenantIdDescription, Symbol("domains"), domains)
        setfield!(o, Symbol("domains"), domains)
        validate_property(TenantIdDescription, Symbol("defaultDomain"), defaultDomain)
        setfield!(o, Symbol("defaultDomain"), defaultDomain)
        validate_property(TenantIdDescription, Symbol("tenantType"), tenantType)
        setfield!(o, Symbol("tenantType"), tenantType)
        validate_property(TenantIdDescription, Symbol("tenantBrandingLogoUrl"), tenantBrandingLogoUrl)
        setfield!(o, Symbol("tenantBrandingLogoUrl"), tenantBrandingLogoUrl)
        o
    end
end # type TenantIdDescription

const _property_map_TenantIdDescription = Dict{Symbol,Symbol}(Symbol("id")=>Symbol("id"), Symbol("tenantId")=>Symbol("tenantId"), Symbol("tenantCategory")=>Symbol("tenantCategory"), Symbol("country")=>Symbol("country"), Symbol("countryCode")=>Symbol("countryCode"), Symbol("displayName")=>Symbol("displayName"), Symbol("domains")=>Symbol("domains"), Symbol("defaultDomain")=>Symbol("defaultDomain"), Symbol("tenantType")=>Symbol("tenantType"), Symbol("tenantBrandingLogoUrl")=>Symbol("tenantBrandingLogoUrl"))
const _property_types_TenantIdDescription = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("tenantId")=>"String", Symbol("tenantCategory")=>"String", Symbol("country")=>"String", Symbol("countryCode")=>"String", Symbol("displayName")=>"String", Symbol("domains")=>"Vector{String}", Symbol("defaultDomain")=>"String", Symbol("tenantType")=>"String", Symbol("tenantBrandingLogoUrl")=>"String")
Base.propertynames(::Type{ TenantIdDescription }) = collect(keys(_property_map_TenantIdDescription))
Swagger.property_type(::Type{ TenantIdDescription }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TenantIdDescription[name]))}
Swagger.field_name(::Type{ TenantIdDescription }, property_name::Symbol) =  _property_map_TenantIdDescription[property_name]

const _allowed_TenantIdDescription_tenantCategory = ["Home", "ProjectedBy", "ManagedBy"]

function check_required(o::TenantIdDescription)
    true
end

function validate_property(::Type{ TenantIdDescription }, name::Symbol, val)
    if name === Symbol("tenantCategory")
        Swagger.validate_param(name, "TenantIdDescription", :enum, val, _allowed_TenantIdDescription_tenantCategory)
    end
end
