# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

struct DeploymentsApi <: SwaggerApi
    client::Swagger.Client
end

"""

Calculate the hash of the given template.
Param: api_version::String (required)
Param: template::Any (required)
Return: TemplateHashResult
"""
function deploymentsCalculateTemplateHash(_api::DeploymentsApi, api_version::String, template; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", TemplateHashResult, "/providers/Microsoft.Resources/calculateTemplateHash", ["azure_auth"], template)
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""
Cancels a currently running template deployment.
You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resource group partially deployed.
Param: resourceGroupName::String (required)
Param: deploymentName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: Nothing
"""
function deploymentsCancel(_api::DeploymentsApi, resourceGroupName::String, deploymentName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    Swagger.validate_param("resourceGroupName", "deploymentsCancel", :maxLength, resourceGroupName, 90)
    Swagger.validate_param("resourceGroupName", "deploymentsCancel", :minLength, resourceGroupName, 1)

    Swagger.validate_param("deploymentName", "deploymentsCancel", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsCancel", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "POST", Nothing, "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel", ["azure_auth"])
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""
Cancels a currently running template deployment.
You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resources partially deployed.
Param: groupId::String (required)
Param: deploymentName::String (required)
Param: api_version::String (required)
Return: Nothing
"""
function deploymentsCancelAtManagementGroupScope(_api::DeploymentsApi, groupId::String, deploymentName::String, api_version::String; _mediaType=nothing)
    Swagger.validate_param("groupId", "deploymentsCancelAtManagementGroupScope", :maxLength, groupId, 90)
    Swagger.validate_param("groupId", "deploymentsCancelAtManagementGroupScope", :minLength, groupId, 1)

    Swagger.validate_param("deploymentName", "deploymentsCancelAtManagementGroupScope", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsCancelAtManagementGroupScope", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "POST", Nothing, "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel", ["azure_auth"])
    Swagger.set_param(_ctx.path, "groupId", groupId)  # type String
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""
Cancels a currently running template deployment.
You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resources partially deployed.
Param: scope::String (required)
Param: deploymentName::String (required)
Param: api_version::String (required)
Return: Nothing
"""
function deploymentsCancelAtScope(_api::DeploymentsApi, scope::String, deploymentName::String, api_version::String; _mediaType=nothing)
    Swagger.validate_param("deploymentName", "deploymentsCancelAtScope", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsCancelAtScope", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "POST", Nothing, "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel", ["azure_auth"])
    Swagger.set_param(_ctx.path, "scope", scope)  # type String
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""
Cancels a currently running template deployment.
You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resources partially deployed.
Param: deploymentName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: Nothing
"""
function deploymentsCancelAtSubscriptionScope(_api::DeploymentsApi, deploymentName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    Swagger.validate_param("deploymentName", "deploymentsCancelAtSubscriptionScope", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsCancelAtSubscriptionScope", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "POST", Nothing, "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel", ["azure_auth"])
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""
Cancels a currently running template deployment.
You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resources partially deployed.
Param: deploymentName::String (required)
Param: api_version::String (required)
Return: Nothing
"""
function deploymentsCancelAtTenantScope(_api::DeploymentsApi, deploymentName::String, api_version::String; _mediaType=nothing)
    Swagger.validate_param("deploymentName", "deploymentsCancelAtTenantScope", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsCancelAtTenantScope", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "POST", Nothing, "/providers/Microsoft.Resources/deployments/{deploymentName}/cancel", ["azure_auth"])
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Checks whether the deployment exists.
Param: resourceGroupName::String (required)
Param: deploymentName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: Nothing
"""
function deploymentsCheckExistence(_api::DeploymentsApi, resourceGroupName::String, deploymentName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    Swagger.validate_param("resourceGroupName", "deploymentsCheckExistence", :maxLength, resourceGroupName, 90)
    Swagger.validate_param("resourceGroupName", "deploymentsCheckExistence", :minLength, resourceGroupName, 1)

    Swagger.validate_param("deploymentName", "deploymentsCheckExistence", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsCheckExistence", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "HEAD", Nothing, "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth"])
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Checks whether the deployment exists.
Param: groupId::String (required)
Param: deploymentName::String (required)
Param: api_version::String (required)
Return: Nothing
"""
function deploymentsCheckExistenceAtManagementGroupScope(_api::DeploymentsApi, groupId::String, deploymentName::String, api_version::String; _mediaType=nothing)
    Swagger.validate_param("groupId", "deploymentsCheckExistenceAtManagementGroupScope", :maxLength, groupId, 90)
    Swagger.validate_param("groupId", "deploymentsCheckExistenceAtManagementGroupScope", :minLength, groupId, 1)

    Swagger.validate_param("deploymentName", "deploymentsCheckExistenceAtManagementGroupScope", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsCheckExistenceAtManagementGroupScope", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "HEAD", Nothing, "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth"])
    Swagger.set_param(_ctx.path, "groupId", groupId)  # type String
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Checks whether the deployment exists.
Param: scope::String (required)
Param: deploymentName::String (required)
Param: api_version::String (required)
Return: Nothing
"""
function deploymentsCheckExistenceAtScope(_api::DeploymentsApi, scope::String, deploymentName::String, api_version::String; _mediaType=nothing)
    Swagger.validate_param("deploymentName", "deploymentsCheckExistenceAtScope", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsCheckExistenceAtScope", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "HEAD", Nothing, "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth"])
    Swagger.set_param(_ctx.path, "scope", scope)  # type String
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Checks whether the deployment exists.
Param: deploymentName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: Nothing
"""
function deploymentsCheckExistenceAtSubscriptionScope(_api::DeploymentsApi, deploymentName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    Swagger.validate_param("deploymentName", "deploymentsCheckExistenceAtSubscriptionScope", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsCheckExistenceAtSubscriptionScope", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "HEAD", Nothing, "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth"])
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Checks whether the deployment exists.
Param: deploymentName::String (required)
Param: api_version::String (required)
Return: Nothing
"""
function deploymentsCheckExistenceAtTenantScope(_api::DeploymentsApi, deploymentName::String, api_version::String; _mediaType=nothing)
    Swagger.validate_param("deploymentName", "deploymentsCheckExistenceAtTenantScope", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsCheckExistenceAtTenantScope", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "HEAD", Nothing, "/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth"])
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""
Deploys resources to a resource group.
You can provide the template and parameters directly in the request or link to JSON files.
Param: resourceGroupName::String (required)
Param: deploymentName::String (required)
Param: parameters::Deployment (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: DeploymentExtended
"""
function deploymentsCreateOrUpdate(_api::DeploymentsApi, resourceGroupName::String, deploymentName::String, parameters, api_version::String, subscriptionId::String; _mediaType=nothing)
    Swagger.validate_param("resourceGroupName", "deploymentsCreateOrUpdate", :maxLength, resourceGroupName, 90)
    Swagger.validate_param("resourceGroupName", "deploymentsCreateOrUpdate", :minLength, resourceGroupName, 1)

    Swagger.validate_param("deploymentName", "deploymentsCreateOrUpdate", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsCreateOrUpdate", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "PUT", DeploymentExtended, "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth"], parameters)
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""
Deploys resources at management group scope.
You can provide the template and parameters directly in the request or link to JSON files.
Param: groupId::String (required)
Param: deploymentName::String (required)
Param: parameters::ScopedDeployment (required)
Param: api_version::String (required)
Return: DeploymentExtended
"""
function deploymentsCreateOrUpdateAtManagementGroupScope(_api::DeploymentsApi, groupId::String, deploymentName::String, parameters, api_version::String; _mediaType=nothing)
    Swagger.validate_param("groupId", "deploymentsCreateOrUpdateAtManagementGroupScope", :maxLength, groupId, 90)
    Swagger.validate_param("groupId", "deploymentsCreateOrUpdateAtManagementGroupScope", :minLength, groupId, 1)

    Swagger.validate_param("deploymentName", "deploymentsCreateOrUpdateAtManagementGroupScope", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsCreateOrUpdateAtManagementGroupScope", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "PUT", DeploymentExtended, "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth"], parameters)
    Swagger.set_param(_ctx.path, "groupId", groupId)  # type String
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""
Deploys resources at a given scope.
You can provide the template and parameters directly in the request or link to JSON files.
Param: scope::String (required)
Param: deploymentName::String (required)
Param: parameters::Deployment (required)
Param: api_version::String (required)
Return: DeploymentExtended
"""
function deploymentsCreateOrUpdateAtScope(_api::DeploymentsApi, scope::String, deploymentName::String, parameters, api_version::String; _mediaType=nothing)
    Swagger.validate_param("deploymentName", "deploymentsCreateOrUpdateAtScope", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsCreateOrUpdateAtScope", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "PUT", DeploymentExtended, "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth"], parameters)
    Swagger.set_param(_ctx.path, "scope", scope)  # type String
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""
Deploys resources at subscription scope.
You can provide the template and parameters directly in the request or link to JSON files.
Param: deploymentName::String (required)
Param: parameters::Deployment (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: DeploymentExtended
"""
function deploymentsCreateOrUpdateAtSubscriptionScope(_api::DeploymentsApi, deploymentName::String, parameters, api_version::String, subscriptionId::String; _mediaType=nothing)
    Swagger.validate_param("deploymentName", "deploymentsCreateOrUpdateAtSubscriptionScope", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsCreateOrUpdateAtSubscriptionScope", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "PUT", DeploymentExtended, "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth"], parameters)
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""
Deploys resources at tenant scope.
You can provide the template and parameters directly in the request or link to JSON files.
Param: deploymentName::String (required)
Param: parameters::ScopedDeployment (required)
Param: api_version::String (required)
Return: DeploymentExtended
"""
function deploymentsCreateOrUpdateAtTenantScope(_api::DeploymentsApi, deploymentName::String, parameters, api_version::String; _mediaType=nothing)
    Swagger.validate_param("deploymentName", "deploymentsCreateOrUpdateAtTenantScope", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsCreateOrUpdateAtTenantScope", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "PUT", DeploymentExtended, "/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth"], parameters)
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""
Deletes a deployment from the deployment history.
A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. Deleting a template deployment does not affect the state of the resource group. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code.
Param: resourceGroupName::String (required)
Param: deploymentName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: Nothing
"""
function deploymentsDelete(_api::DeploymentsApi, resourceGroupName::String, deploymentName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    Swagger.validate_param("resourceGroupName", "deploymentsDelete", :maxLength, resourceGroupName, 90)
    Swagger.validate_param("resourceGroupName", "deploymentsDelete", :minLength, resourceGroupName, 1)

    Swagger.validate_param("deploymentName", "deploymentsDelete", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsDelete", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "DELETE", Nothing, "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth"])
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""
Deletes a deployment from the deployment history.
A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code.
Param: groupId::String (required)
Param: deploymentName::String (required)
Param: api_version::String (required)
Return: Nothing
"""
function deploymentsDeleteAtManagementGroupScope(_api::DeploymentsApi, groupId::String, deploymentName::String, api_version::String; _mediaType=nothing)
    Swagger.validate_param("groupId", "deploymentsDeleteAtManagementGroupScope", :maxLength, groupId, 90)
    Swagger.validate_param("groupId", "deploymentsDeleteAtManagementGroupScope", :minLength, groupId, 1)

    Swagger.validate_param("deploymentName", "deploymentsDeleteAtManagementGroupScope", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsDeleteAtManagementGroupScope", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "DELETE", Nothing, "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth"])
    Swagger.set_param(_ctx.path, "groupId", groupId)  # type String
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""
Deletes a deployment from the deployment history.
A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code.
Param: scope::String (required)
Param: deploymentName::String (required)
Param: api_version::String (required)
Return: Nothing
"""
function deploymentsDeleteAtScope(_api::DeploymentsApi, scope::String, deploymentName::String, api_version::String; _mediaType=nothing)
    Swagger.validate_param("deploymentName", "deploymentsDeleteAtScope", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsDeleteAtScope", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "DELETE", Nothing, "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth"])
    Swagger.set_param(_ctx.path, "scope", scope)  # type String
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""
Deletes a deployment from the deployment history.
A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code.
Param: deploymentName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: Nothing
"""
function deploymentsDeleteAtSubscriptionScope(_api::DeploymentsApi, deploymentName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    Swagger.validate_param("deploymentName", "deploymentsDeleteAtSubscriptionScope", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsDeleteAtSubscriptionScope", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "DELETE", Nothing, "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth"])
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""
Deletes a deployment from the deployment history.
A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code.
Param: deploymentName::String (required)
Param: api_version::String (required)
Return: Nothing
"""
function deploymentsDeleteAtTenantScope(_api::DeploymentsApi, deploymentName::String, api_version::String; _mediaType=nothing)
    Swagger.validate_param("deploymentName", "deploymentsDeleteAtTenantScope", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsDeleteAtTenantScope", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "DELETE", Nothing, "/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth"])
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Exports the template used for specified deployment.
Param: resourceGroupName::String (required)
Param: deploymentName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: DeploymentExportResult
"""
function deploymentsExportTemplate(_api::DeploymentsApi, resourceGroupName::String, deploymentName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    Swagger.validate_param("resourceGroupName", "deploymentsExportTemplate", :maxLength, resourceGroupName, 90)
    Swagger.validate_param("resourceGroupName", "deploymentsExportTemplate", :minLength, resourceGroupName, 1)

    Swagger.validate_param("deploymentName", "deploymentsExportTemplate", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsExportTemplate", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "POST", DeploymentExportResult, "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate", ["azure_auth"])
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Exports the template used for specified deployment.
Param: groupId::String (required)
Param: deploymentName::String (required)
Param: api_version::String (required)
Return: DeploymentExportResult
"""
function deploymentsExportTemplateAtManagementGroupScope(_api::DeploymentsApi, groupId::String, deploymentName::String, api_version::String; _mediaType=nothing)
    Swagger.validate_param("groupId", "deploymentsExportTemplateAtManagementGroupScope", :maxLength, groupId, 90)
    Swagger.validate_param("groupId", "deploymentsExportTemplateAtManagementGroupScope", :minLength, groupId, 1)

    Swagger.validate_param("deploymentName", "deploymentsExportTemplateAtManagementGroupScope", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsExportTemplateAtManagementGroupScope", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "POST", DeploymentExportResult, "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate", ["azure_auth"])
    Swagger.set_param(_ctx.path, "groupId", groupId)  # type String
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Exports the template used for specified deployment.
Param: scope::String (required)
Param: deploymentName::String (required)
Param: api_version::String (required)
Return: DeploymentExportResult
"""
function deploymentsExportTemplateAtScope(_api::DeploymentsApi, scope::String, deploymentName::String, api_version::String; _mediaType=nothing)
    Swagger.validate_param("deploymentName", "deploymentsExportTemplateAtScope", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsExportTemplateAtScope", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "POST", DeploymentExportResult, "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate", ["azure_auth"])
    Swagger.set_param(_ctx.path, "scope", scope)  # type String
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Exports the template used for specified deployment.
Param: deploymentName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: DeploymentExportResult
"""
function deploymentsExportTemplateAtSubscriptionScope(_api::DeploymentsApi, deploymentName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    Swagger.validate_param("deploymentName", "deploymentsExportTemplateAtSubscriptionScope", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsExportTemplateAtSubscriptionScope", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "POST", DeploymentExportResult, "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate", ["azure_auth"])
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Exports the template used for specified deployment.
Param: deploymentName::String (required)
Param: api_version::String (required)
Return: DeploymentExportResult
"""
function deploymentsExportTemplateAtTenantScope(_api::DeploymentsApi, deploymentName::String, api_version::String; _mediaType=nothing)
    Swagger.validate_param("deploymentName", "deploymentsExportTemplateAtTenantScope", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsExportTemplateAtTenantScope", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "POST", DeploymentExportResult, "/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate", ["azure_auth"])
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Gets a deployment.
Param: resourceGroupName::String (required)
Param: deploymentName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: DeploymentExtended
"""
function deploymentsGet(_api::DeploymentsApi, resourceGroupName::String, deploymentName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    Swagger.validate_param("resourceGroupName", "deploymentsGet", :maxLength, resourceGroupName, 90)
    Swagger.validate_param("resourceGroupName", "deploymentsGet", :minLength, resourceGroupName, 1)

    Swagger.validate_param("deploymentName", "deploymentsGet", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsGet", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "GET", DeploymentExtended, "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth"])
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Gets a deployment.
Param: groupId::String (required)
Param: deploymentName::String (required)
Param: api_version::String (required)
Return: DeploymentExtended
"""
function deploymentsGetAtManagementGroupScope(_api::DeploymentsApi, groupId::String, deploymentName::String, api_version::String; _mediaType=nothing)
    Swagger.validate_param("groupId", "deploymentsGetAtManagementGroupScope", :maxLength, groupId, 90)
    Swagger.validate_param("groupId", "deploymentsGetAtManagementGroupScope", :minLength, groupId, 1)

    Swagger.validate_param("deploymentName", "deploymentsGetAtManagementGroupScope", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsGetAtManagementGroupScope", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "GET", DeploymentExtended, "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth"])
    Swagger.set_param(_ctx.path, "groupId", groupId)  # type String
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Gets a deployment.
Param: scope::String (required)
Param: deploymentName::String (required)
Param: api_version::String (required)
Return: DeploymentExtended
"""
function deploymentsGetAtScope(_api::DeploymentsApi, scope::String, deploymentName::String, api_version::String; _mediaType=nothing)
    Swagger.validate_param("deploymentName", "deploymentsGetAtScope", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsGetAtScope", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "GET", DeploymentExtended, "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth"])
    Swagger.set_param(_ctx.path, "scope", scope)  # type String
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Gets a deployment.
Param: deploymentName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: DeploymentExtended
"""
function deploymentsGetAtSubscriptionScope(_api::DeploymentsApi, deploymentName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    Swagger.validate_param("deploymentName", "deploymentsGetAtSubscriptionScope", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsGetAtSubscriptionScope", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "GET", DeploymentExtended, "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth"])
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Gets a deployment.
Param: deploymentName::String (required)
Param: api_version::String (required)
Return: DeploymentExtended
"""
function deploymentsGetAtTenantScope(_api::DeploymentsApi, deploymentName::String, api_version::String; _mediaType=nothing)
    Swagger.validate_param("deploymentName", "deploymentsGetAtTenantScope", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsGetAtTenantScope", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "GET", DeploymentExtended, "/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth"])
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Get all the deployments for a management group.
Param: groupId::String (required)
Param: api_version::String (required)
Param: filter::String
Param: top::Int32
Return: DeploymentListResult
"""
function deploymentsListAtManagementGroupScope(_api::DeploymentsApi, groupId::String, api_version::String; filter=nothing, top=nothing, _mediaType=nothing)
    Swagger.validate_param("groupId", "deploymentsListAtManagementGroupScope", :maxLength, groupId, 90)
    Swagger.validate_param("groupId", "deploymentsListAtManagementGroupScope", :minLength, groupId, 1)

    _ctx = Swagger.Ctx(_api.client, "GET", DeploymentListResult, "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/", ["azure_auth"])
    Swagger.set_param(_ctx.path, "groupId", groupId)  # type String
    Swagger.set_param(_ctx.query, "\$filter", filter)  # type String
    Swagger.set_param(_ctx.query, "\$top", top)  # type Int32
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Get all the deployments at the given scope.
Param: scope::String (required)
Param: api_version::String (required)
Param: filter::String
Param: top::Int32
Return: DeploymentListResult
"""
function deploymentsListAtScope(_api::DeploymentsApi, scope::String, api_version::String; filter=nothing, top=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", DeploymentListResult, "/{scope}/providers/Microsoft.Resources/deployments/", ["azure_auth"])
    Swagger.set_param(_ctx.path, "scope", scope)  # type String
    Swagger.set_param(_ctx.query, "\$filter", filter)  # type String
    Swagger.set_param(_ctx.query, "\$top", top)  # type Int32
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Get all the deployments for a subscription.
Param: api_version::String (required)
Param: subscriptionId::String (required)
Param: filter::String
Param: top::Int32
Return: DeploymentListResult
"""
function deploymentsListAtSubscriptionScope(_api::DeploymentsApi, api_version::String, subscriptionId::String; filter=nothing, top=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", DeploymentListResult, "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/", ["azure_auth"])
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "\$filter", filter)  # type String
    Swagger.set_param(_ctx.query, "\$top", top)  # type Int32
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Get all the deployments at the tenant scope.
Param: api_version::String (required)
Param: filter::String
Param: top::Int32
Return: DeploymentListResult
"""
function deploymentsListAtTenantScope(_api::DeploymentsApi, api_version::String; filter=nothing, top=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", DeploymentListResult, "/providers/Microsoft.Resources/deployments/", ["azure_auth"])
    Swagger.set_param(_ctx.query, "\$filter", filter)  # type String
    Swagger.set_param(_ctx.query, "\$top", top)  # type Int32
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Get all the deployments for a resource group.
Param: resourceGroupName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Param: filter::String
Param: top::Int32
Return: DeploymentListResult
"""
function deploymentsListByResourceGroup(_api::DeploymentsApi, resourceGroupName::String, api_version::String, subscriptionId::String; filter=nothing, top=nothing, _mediaType=nothing)
    Swagger.validate_param("resourceGroupName", "deploymentsListByResourceGroup", :maxLength, resourceGroupName, 90)
    Swagger.validate_param("resourceGroupName", "deploymentsListByResourceGroup", :minLength, resourceGroupName, 1)

    _ctx = Swagger.Ctx(_api.client, "GET", DeploymentListResult, "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/", ["azure_auth"])
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "\$filter", filter)  # type String
    Swagger.set_param(_ctx.query, "\$top", top)  # type Int32
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager..
Param: resourceGroupName::String (required)
Param: deploymentName::String (required)
Param: parameters::Deployment (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: DeploymentValidateResult
"""
function deploymentsValidate(_api::DeploymentsApi, resourceGroupName::String, deploymentName::String, parameters, api_version::String, subscriptionId::String; _mediaType=nothing)
    Swagger.validate_param("resourceGroupName", "deploymentsValidate", :maxLength, resourceGroupName, 90)
    Swagger.validate_param("resourceGroupName", "deploymentsValidate", :minLength, resourceGroupName, 1)

    Swagger.validate_param("deploymentName", "deploymentsValidate", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsValidate", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "POST", DeploymentValidateResult, "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/validate", ["azure_auth"], parameters)
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager..
Param: groupId::String (required)
Param: deploymentName::String (required)
Param: parameters::ScopedDeployment (required)
Param: api_version::String (required)
Return: DeploymentValidateResult
"""
function deploymentsValidateAtManagementGroupScope(_api::DeploymentsApi, groupId::String, deploymentName::String, parameters, api_version::String; _mediaType=nothing)
    Swagger.validate_param("groupId", "deploymentsValidateAtManagementGroupScope", :maxLength, groupId, 90)
    Swagger.validate_param("groupId", "deploymentsValidateAtManagementGroupScope", :minLength, groupId, 1)

    Swagger.validate_param("deploymentName", "deploymentsValidateAtManagementGroupScope", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsValidateAtManagementGroupScope", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "POST", DeploymentValidateResult, "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/validate", ["azure_auth"], parameters)
    Swagger.set_param(_ctx.path, "groupId", groupId)  # type String
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager..
Param: scope::String (required)
Param: deploymentName::String (required)
Param: parameters::Deployment (required)
Param: api_version::String (required)
Return: DeploymentValidateResult
"""
function deploymentsValidateAtScope(_api::DeploymentsApi, scope::String, deploymentName::String, parameters, api_version::String; _mediaType=nothing)
    Swagger.validate_param("deploymentName", "deploymentsValidateAtScope", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsValidateAtScope", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "POST", DeploymentValidateResult, "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/validate", ["azure_auth"], parameters)
    Swagger.set_param(_ctx.path, "scope", scope)  # type String
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager..
Param: deploymentName::String (required)
Param: parameters::Deployment (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: DeploymentValidateResult
"""
function deploymentsValidateAtSubscriptionScope(_api::DeploymentsApi, deploymentName::String, parameters, api_version::String, subscriptionId::String; _mediaType=nothing)
    Swagger.validate_param("deploymentName", "deploymentsValidateAtSubscriptionScope", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsValidateAtSubscriptionScope", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "POST", DeploymentValidateResult, "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/validate", ["azure_auth"], parameters)
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager..
Param: deploymentName::String (required)
Param: parameters::ScopedDeployment (required)
Param: api_version::String (required)
Return: DeploymentValidateResult
"""
function deploymentsValidateAtTenantScope(_api::DeploymentsApi, deploymentName::String, parameters, api_version::String; _mediaType=nothing)
    Swagger.validate_param("deploymentName", "deploymentsValidateAtTenantScope", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsValidateAtTenantScope", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "POST", DeploymentValidateResult, "/providers/Microsoft.Resources/deployments/{deploymentName}/validate", ["azure_auth"], parameters)
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Returns changes that will be made by the deployment if executed at the scope of the resource group.
Param: resourceGroupName::String (required)
Param: deploymentName::String (required)
Param: parameters::DeploymentWhatIf (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: WhatIfOperationResult
"""
function deploymentsWhatIf(_api::DeploymentsApi, resourceGroupName::String, deploymentName::String, parameters, api_version::String, subscriptionId::String; _mediaType=nothing)
    Swagger.validate_param("resourceGroupName", "deploymentsWhatIf", :maxLength, resourceGroupName, 90)
    Swagger.validate_param("resourceGroupName", "deploymentsWhatIf", :minLength, resourceGroupName, 1)

    Swagger.validate_param("deploymentName", "deploymentsWhatIf", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsWhatIf", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "POST", WhatIfOperationResult, "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/whatIf", ["azure_auth"], parameters)
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Returns changes that will be made by the deployment if executed at the scope of the management group.
Param: groupId::String (required)
Param: deploymentName::String (required)
Param: parameters::ScopedDeploymentWhatIf (required)
Param: api_version::String (required)
Return: WhatIfOperationResult
"""
function deploymentsWhatIfAtManagementGroupScope(_api::DeploymentsApi, groupId::String, deploymentName::String, parameters, api_version::String; _mediaType=nothing)
    Swagger.validate_param("groupId", "deploymentsWhatIfAtManagementGroupScope", :maxLength, groupId, 90)
    Swagger.validate_param("groupId", "deploymentsWhatIfAtManagementGroupScope", :minLength, groupId, 1)

    Swagger.validate_param("deploymentName", "deploymentsWhatIfAtManagementGroupScope", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsWhatIfAtManagementGroupScope", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "POST", WhatIfOperationResult, "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/whatIf", ["azure_auth"], parameters)
    Swagger.set_param(_ctx.path, "groupId", groupId)  # type String
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Returns changes that will be made by the deployment if executed at the scope of the subscription.
Param: deploymentName::String (required)
Param: parameters::DeploymentWhatIf (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: WhatIfOperationResult
"""
function deploymentsWhatIfAtSubscriptionScope(_api::DeploymentsApi, deploymentName::String, parameters, api_version::String, subscriptionId::String; _mediaType=nothing)
    Swagger.validate_param("deploymentName", "deploymentsWhatIfAtSubscriptionScope", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsWhatIfAtSubscriptionScope", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "POST", WhatIfOperationResult, "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/whatIf", ["azure_auth"], parameters)
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Returns changes that will be made by the deployment if executed at the scope of the tenant group.
Param: deploymentName::String (required)
Param: parameters::ScopedDeploymentWhatIf (required)
Param: api_version::String (required)
Return: WhatIfOperationResult
"""
function deploymentsWhatIfAtTenantScope(_api::DeploymentsApi, deploymentName::String, parameters, api_version::String; _mediaType=nothing)
    Swagger.validate_param("deploymentName", "deploymentsWhatIfAtTenantScope", :maxLength, deploymentName, 64)
    Swagger.validate_param("deploymentName", "deploymentsWhatIfAtTenantScope", :minLength, deploymentName, 1)

    _ctx = Swagger.Ctx(_api.client, "POST", WhatIfOperationResult, "/providers/Microsoft.Resources/deployments/{deploymentName}/whatIf", ["azure_auth"], parameters)
    Swagger.set_param(_ctx.path, "deploymentName", deploymentName)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

export deploymentsCalculateTemplateHash, deploymentsCancel, deploymentsCancelAtManagementGroupScope, deploymentsCancelAtScope, deploymentsCancelAtSubscriptionScope, deploymentsCancelAtTenantScope, deploymentsCheckExistence, deploymentsCheckExistenceAtManagementGroupScope, deploymentsCheckExistenceAtScope, deploymentsCheckExistenceAtSubscriptionScope, deploymentsCheckExistenceAtTenantScope, deploymentsCreateOrUpdate, deploymentsCreateOrUpdateAtManagementGroupScope, deploymentsCreateOrUpdateAtScope, deploymentsCreateOrUpdateAtSubscriptionScope, deploymentsCreateOrUpdateAtTenantScope, deploymentsDelete, deploymentsDeleteAtManagementGroupScope, deploymentsDeleteAtScope, deploymentsDeleteAtSubscriptionScope, deploymentsDeleteAtTenantScope, deploymentsExportTemplate, deploymentsExportTemplateAtManagementGroupScope, deploymentsExportTemplateAtScope, deploymentsExportTemplateAtSubscriptionScope, deploymentsExportTemplateAtTenantScope, deploymentsGet, deploymentsGetAtManagementGroupScope, deploymentsGetAtScope, deploymentsGetAtSubscriptionScope, deploymentsGetAtTenantScope, deploymentsListAtManagementGroupScope, deploymentsListAtScope, deploymentsListAtSubscriptionScope, deploymentsListAtTenantScope, deploymentsListByResourceGroup, deploymentsValidate, deploymentsValidateAtManagementGroupScope, deploymentsValidateAtScope, deploymentsValidateAtSubscriptionScope, deploymentsValidateAtTenantScope, deploymentsWhatIf, deploymentsWhatIfAtManagementGroupScope, deploymentsWhatIfAtSubscriptionScope, deploymentsWhatIfAtTenantScope
