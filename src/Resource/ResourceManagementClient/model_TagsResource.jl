# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct TagsResource <: SwaggerModel
    id::Any # spec type: Union{ Nothing, String } # spec name: id
    name::Any # spec type: Union{ Nothing, String } # spec name: name
    type::Any # spec type: Union{ Nothing, String } # spec name: type
    properties::Any # spec type: Union{ Nothing, Tags } # spec name: properties

    function TagsResource(;id=nothing, name=nothing, type=nothing, properties=nothing)
        o = new()
        validate_property(TagsResource, Symbol("id"), id)
        setfield!(o, Symbol("id"), id)
        validate_property(TagsResource, Symbol("name"), name)
        setfield!(o, Symbol("name"), name)
        validate_property(TagsResource, Symbol("type"), type)
        setfield!(o, Symbol("type"), type)
        validate_property(TagsResource, Symbol("properties"), properties)
        setfield!(o, Symbol("properties"), properties)
        o
    end
end # type TagsResource

const _property_map_TagsResource = Dict{Symbol,Symbol}(Symbol("id")=>Symbol("id"), Symbol("name")=>Symbol("name"), Symbol("type")=>Symbol("type"), Symbol("properties")=>Symbol("properties"))
const _property_types_TagsResource = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("name")=>"String", Symbol("type")=>"String", Symbol("properties")=>"Tags")
Base.propertynames(::Type{ TagsResource }) = collect(keys(_property_map_TagsResource))
Swagger.property_type(::Type{ TagsResource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TagsResource[name]))}
Swagger.field_name(::Type{ TagsResource }, property_name::Symbol) =  _property_map_TagsResource[property_name]

function check_required(o::TagsResource)
    (getproperty(o, Symbol("properties")) === nothing) && (return false)
    true
end

function validate_property(::Type{ TagsResource }, name::Symbol, val)
end
