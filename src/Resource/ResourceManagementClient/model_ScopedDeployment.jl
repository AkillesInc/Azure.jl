# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct ScopedDeployment <: SwaggerModel
    location::Any # spec type: Union{ Nothing, String } # spec name: location
    properties::Any # spec type: Union{ Nothing, DeploymentProperties } # spec name: properties
    tags::Any # spec type: Union{ Nothing, Dict{String, String} } # spec name: tags

    function ScopedDeployment(;location=nothing, properties=nothing, tags=nothing)
        o = new()
        validate_property(ScopedDeployment, Symbol("location"), location)
        setfield!(o, Symbol("location"), location)
        validate_property(ScopedDeployment, Symbol("properties"), properties)
        setfield!(o, Symbol("properties"), properties)
        validate_property(ScopedDeployment, Symbol("tags"), tags)
        setfield!(o, Symbol("tags"), tags)
        o
    end
end # type ScopedDeployment

const _property_map_ScopedDeployment = Dict{Symbol,Symbol}(Symbol("location")=>Symbol("location"), Symbol("properties")=>Symbol("properties"), Symbol("tags")=>Symbol("tags"))
const _property_types_ScopedDeployment = Dict{Symbol,String}(Symbol("location")=>"String", Symbol("properties")=>"DeploymentProperties", Symbol("tags")=>"Dict{String, String}")
Base.propertynames(::Type{ ScopedDeployment }) = collect(keys(_property_map_ScopedDeployment))
Swagger.property_type(::Type{ ScopedDeployment }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ScopedDeployment[name]))}
Swagger.field_name(::Type{ ScopedDeployment }, property_name::Symbol) =  _property_map_ScopedDeployment[property_name]

function check_required(o::ScopedDeployment)
    (getproperty(o, Symbol("location")) === nothing) && (return false)
    (getproperty(o, Symbol("properties")) === nothing) && (return false)
    true
end

function validate_property(::Type{ ScopedDeployment }, name::Symbol, val)
end
