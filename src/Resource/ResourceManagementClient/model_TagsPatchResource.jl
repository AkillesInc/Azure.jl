# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct TagsPatchResource <: SwaggerModel
    operation::Any # spec type: Union{ Nothing, String } # spec name: operation
    properties::Any # spec type: Union{ Nothing, Tags } # spec name: properties

    function TagsPatchResource(;operation=nothing, properties=nothing)
        o = new()
        validate_property(TagsPatchResource, Symbol("operation"), operation)
        setfield!(o, Symbol("operation"), operation)
        validate_property(TagsPatchResource, Symbol("properties"), properties)
        setfield!(o, Symbol("properties"), properties)
        o
    end
end # type TagsPatchResource

const _property_map_TagsPatchResource = Dict{Symbol,Symbol}(Symbol("operation")=>Symbol("operation"), Symbol("properties")=>Symbol("properties"))
const _property_types_TagsPatchResource = Dict{Symbol,String}(Symbol("operation")=>"String", Symbol("properties")=>"Tags")
Base.propertynames(::Type{ TagsPatchResource }) = collect(keys(_property_map_TagsPatchResource))
Swagger.property_type(::Type{ TagsPatchResource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TagsPatchResource[name]))}
Swagger.field_name(::Type{ TagsPatchResource }, property_name::Symbol) =  _property_map_TagsPatchResource[property_name]

const _allowed_TagsPatchResource_operation = ["Replace", "Merge", "Delete"]

function check_required(o::TagsPatchResource)
    true
end

function validate_property(::Type{ TagsPatchResource }, name::Symbol, val)
    if name === Symbol("operation")
        Swagger.validate_param(name, "TagsPatchResource", :enum, val, _allowed_TagsPatchResource_operation)
    end
end
