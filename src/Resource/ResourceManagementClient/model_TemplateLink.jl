# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct TemplateLink <: SwaggerModel
    uri::Any # spec type: Union{ Nothing, String } # spec name: uri
    id::Any # spec type: Union{ Nothing, String } # spec name: id
    relativePath::Any # spec type: Union{ Nothing, String } # spec name: relativePath
    contentVersion::Any # spec type: Union{ Nothing, String } # spec name: contentVersion

    function TemplateLink(;uri=nothing, id=nothing, relativePath=nothing, contentVersion=nothing)
        o = new()
        validate_property(TemplateLink, Symbol("uri"), uri)
        setfield!(o, Symbol("uri"), uri)
        validate_property(TemplateLink, Symbol("id"), id)
        setfield!(o, Symbol("id"), id)
        validate_property(TemplateLink, Symbol("relativePath"), relativePath)
        setfield!(o, Symbol("relativePath"), relativePath)
        validate_property(TemplateLink, Symbol("contentVersion"), contentVersion)
        setfield!(o, Symbol("contentVersion"), contentVersion)
        o
    end
end # type TemplateLink

const _property_map_TemplateLink = Dict{Symbol,Symbol}(Symbol("uri")=>Symbol("uri"), Symbol("id")=>Symbol("id"), Symbol("relativePath")=>Symbol("relativePath"), Symbol("contentVersion")=>Symbol("contentVersion"))
const _property_types_TemplateLink = Dict{Symbol,String}(Symbol("uri")=>"String", Symbol("id")=>"String", Symbol("relativePath")=>"String", Symbol("contentVersion")=>"String")
Base.propertynames(::Type{ TemplateLink }) = collect(keys(_property_map_TemplateLink))
Swagger.property_type(::Type{ TemplateLink }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TemplateLink[name]))}
Swagger.field_name(::Type{ TemplateLink }, property_name::Symbol) =  _property_map_TemplateLink[property_name]

function check_required(o::TemplateLink)
    true
end

function validate_property(::Type{ TemplateLink }, name::Symbol, val)
end
