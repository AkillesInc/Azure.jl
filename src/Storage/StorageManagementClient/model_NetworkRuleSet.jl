# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

mutable struct NetworkRuleSet <: SwaggerModel
    bypass::Union{ Nothing, String } # bypass
    virtualNetworkRules::Union{ Nothing, Vector{VirtualNetworkRule} } # virtualNetworkRules
    ipRules::Union{ Nothing, Vector{IPRule} } # ipRules
    defaultAction::Union{ Nothing, String } # defaultAction

    function NetworkRuleSet(;bypass="AzureServices", virtualNetworkRules=nothing, ipRules=nothing, defaultAction="Allow")
        o = new()
        set_field!(o, :bypass, bypass)
        set_field!(o, :virtualNetworkRules, virtualNetworkRules)
        set_field!(o, :ipRules, ipRules)
        set_field!(o, :defaultAction, defaultAction)
        o
    end
end # type NetworkRuleSet

const _name_map_NetworkRuleSet = Dict{String,Symbol}(["bypass"=>:bypass, "virtualNetworkRules"=>:virtualNetworkRules, "ipRules"=>:ipRules, "defaultAction"=>:defaultAction])
const _field_map_NetworkRuleSet = Dict{Symbol,String}([:bypass=>"bypass", :virtualNetworkRules=>"virtualNetworkRules", :ipRules=>"ipRules", :defaultAction=>"defaultAction"])
Swagger.name_map(::Type{ NetworkRuleSet }) = _name_map_NetworkRuleSet
Swagger.field_map(::Type{ NetworkRuleSet }) = _field_map_NetworkRuleSet

const _allowed_NetworkRuleSet_bypass = ["None", "Logging", "Metrics", "AzureServices"]

const _allowed_NetworkRuleSet_defaultAction = ["Allow", "Deny"]

function check_required(o::NetworkRuleSet)
    true
end

function validate_field(o::NetworkRuleSet, name::Symbol, val)
    if name === :bypass
        Swagger.validate_param(name, "NetworkRuleSet", :enum, val, _allowed_NetworkRuleSet_bypass)
    end
    if name === :defaultAction
        Swagger.validate_param(name, "NetworkRuleSet", :enum, val, _allowed_NetworkRuleSet_defaultAction)
    end
end
