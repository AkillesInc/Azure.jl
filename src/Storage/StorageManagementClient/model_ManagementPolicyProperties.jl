# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct ManagementPolicyProperties <: SwaggerModel
    lastModifiedTime::Any # spec type: Union{ Nothing, DateTime } # spec name: lastModifiedTime
    policy::Any # spec type: Union{ Nothing, ManagementPolicySchema } # spec name: policy

    function ManagementPolicyProperties(;lastModifiedTime=nothing, policy=nothing)
        o = new()
        validate_property(ManagementPolicyProperties, Symbol("lastModifiedTime"), lastModifiedTime)
        setfield!(o, Symbol("lastModifiedTime"), lastModifiedTime)
        validate_property(ManagementPolicyProperties, Symbol("policy"), policy)
        setfield!(o, Symbol("policy"), policy)
        o
    end
end # type ManagementPolicyProperties

const _property_map_ManagementPolicyProperties = Dict{Symbol,Symbol}(Symbol("lastModifiedTime")=>Symbol("lastModifiedTime"), Symbol("policy")=>Symbol("policy"))
const _property_types_ManagementPolicyProperties = Dict{Symbol,String}(Symbol("lastModifiedTime")=>"DateTime", Symbol("policy")=>"ManagementPolicySchema")
Base.propertynames(::Type{ ManagementPolicyProperties }) = collect(keys(_property_map_ManagementPolicyProperties))
Swagger.property_type(::Type{ ManagementPolicyProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ManagementPolicyProperties[name]))}
Swagger.field_name(::Type{ ManagementPolicyProperties }, property_name::Symbol) =  _property_map_ManagementPolicyProperties[property_name]

function check_required(o::ManagementPolicyProperties)
    (getproperty(o, Symbol("policy")) === nothing) && (return false)
    true
end

function validate_property(::Type{ ManagementPolicyProperties }, name::Symbol, val)
end
