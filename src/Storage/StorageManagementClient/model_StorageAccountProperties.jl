# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

type StorageAccountProperties <: SwaggerModel
    provisioningState::Nullable{ String } # provisioningState
    primaryEndpoints::Nullable{ Endpoints } # primaryEndpoints
    primaryLocation::Nullable{ String } # primaryLocation
    statusOfPrimary::Nullable{ String } # statusOfPrimary
    lastGeoFailoverTime::Nullable{ DateTime } # lastGeoFailoverTime
    secondaryLocation::Nullable{ String } # secondaryLocation
    statusOfSecondary::Nullable{ String } # statusOfSecondary
    creationTime::Nullable{ DateTime } # creationTime
    customDomain::Nullable{ CustomDomain } # customDomain
    secondaryEndpoints::Nullable{ Endpoints } # secondaryEndpoints
    encryption::Nullable{ Encryption } # encryption
    accessTier::Nullable{ String } # accessTier
    supportsHttpsTrafficOnly::Nullable{ Bool } # supportsHttpsTrafficOnly
    networkAcls::Nullable{ NetworkRuleSet } # networkAcls

    function StorageAccountProperties(;provisioningState=nothing, primaryEndpoints=nothing, primaryLocation=nothing, statusOfPrimary=nothing, lastGeoFailoverTime=nothing, secondaryLocation=nothing, statusOfSecondary=nothing, creationTime=nothing, customDomain=nothing, secondaryEndpoints=nothing, encryption=nothing, accessTier=nothing, supportsHttpsTrafficOnly=false, networkAcls=nothing)
        o = new()
        set_field!(o, :provisioningState, provisioningState)
        set_field!(o, :primaryEndpoints, primaryEndpoints)
        set_field!(o, :primaryLocation, primaryLocation)
        set_field!(o, :statusOfPrimary, statusOfPrimary)
        set_field!(o, :lastGeoFailoverTime, lastGeoFailoverTime)
        set_field!(o, :secondaryLocation, secondaryLocation)
        set_field!(o, :statusOfSecondary, statusOfSecondary)
        set_field!(o, :creationTime, creationTime)
        set_field!(o, :customDomain, customDomain)
        set_field!(o, :secondaryEndpoints, secondaryEndpoints)
        set_field!(o, :encryption, encryption)
        set_field!(o, :accessTier, accessTier)
        set_field!(o, :supportsHttpsTrafficOnly, supportsHttpsTrafficOnly)
        set_field!(o, :networkAcls, networkAcls)
        o
    end
end # type StorageAccountProperties

const _name_map_StorageAccountProperties = Dict{String,Symbol}(["provisioningState"=>:provisioningState, "primaryEndpoints"=>:primaryEndpoints, "primaryLocation"=>:primaryLocation, "statusOfPrimary"=>:statusOfPrimary, "lastGeoFailoverTime"=>:lastGeoFailoverTime, "secondaryLocation"=>:secondaryLocation, "statusOfSecondary"=>:statusOfSecondary, "creationTime"=>:creationTime, "customDomain"=>:customDomain, "secondaryEndpoints"=>:secondaryEndpoints, "encryption"=>:encryption, "accessTier"=>:accessTier, "supportsHttpsTrafficOnly"=>:supportsHttpsTrafficOnly, "networkAcls"=>:networkAcls])
const _field_map_StorageAccountProperties = Dict{Symbol,String}([:provisioningState=>"provisioningState", :primaryEndpoints=>"primaryEndpoints", :primaryLocation=>"primaryLocation", :statusOfPrimary=>"statusOfPrimary", :lastGeoFailoverTime=>"lastGeoFailoverTime", :secondaryLocation=>"secondaryLocation", :statusOfSecondary=>"statusOfSecondary", :creationTime=>"creationTime", :customDomain=>"customDomain", :secondaryEndpoints=>"secondaryEndpoints", :encryption=>"encryption", :accessTier=>"accessTier", :supportsHttpsTrafficOnly=>"supportsHttpsTrafficOnly", :networkAcls=>"networkAcls"])
Swagger.name_map(::Type{ StorageAccountProperties }) = _name_map_StorageAccountProperties
Swagger.field_map(::Type{ StorageAccountProperties }) = _field_map_StorageAccountProperties

const _allowed_StorageAccountProperties_provisioningState = ["Creating", "ResolvingDNS", "Succeeded"]

const _allowed_StorageAccountProperties_statusOfPrimary = ["available", "unavailable"]

const _allowed_StorageAccountProperties_statusOfSecondary = ["available", "unavailable"]

const _allowed_StorageAccountProperties_accessTier = ["Hot", "Cool"]

function check_required(o::StorageAccountProperties)
    true
end

function validate_field(o::StorageAccountProperties, name::Symbol, val)
    if name === :provisioningState
        Swagger.validate_param(name, "StorageAccountProperties", :enum, val, _allowed_StorageAccountProperties_provisioningState)
    end
    if name === :statusOfPrimary
        Swagger.validate_param(name, "StorageAccountProperties", :enum, val, _allowed_StorageAccountProperties_statusOfPrimary)
    end
    if name === :statusOfSecondary
        Swagger.validate_param(name, "StorageAccountProperties", :enum, val, _allowed_StorageAccountProperties_statusOfSecondary)
    end
    if name === :accessTier
        Swagger.validate_param(name, "StorageAccountProperties", :enum, val, _allowed_StorageAccountProperties_accessTier)
    end
end
