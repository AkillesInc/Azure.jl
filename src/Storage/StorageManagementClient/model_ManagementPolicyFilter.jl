# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct ManagementPolicyFilter <: SwaggerModel
    prefixMatch::Any # spec type: Union{ Nothing, Vector{String} } # spec name: prefixMatch
    blobTypes::Any # spec type: Union{ Nothing, Vector{String} } # spec name: blobTypes
    blobIndexMatch::Any # spec type: Union{ Nothing, Vector{TagFilter} } # spec name: blobIndexMatch

    function ManagementPolicyFilter(;prefixMatch=nothing, blobTypes=nothing, blobIndexMatch=nothing)
        o = new()
        validate_property(ManagementPolicyFilter, Symbol("prefixMatch"), prefixMatch)
        setfield!(o, Symbol("prefixMatch"), prefixMatch)
        validate_property(ManagementPolicyFilter, Symbol("blobTypes"), blobTypes)
        setfield!(o, Symbol("blobTypes"), blobTypes)
        validate_property(ManagementPolicyFilter, Symbol("blobIndexMatch"), blobIndexMatch)
        setfield!(o, Symbol("blobIndexMatch"), blobIndexMatch)
        o
    end
end # type ManagementPolicyFilter

const _property_map_ManagementPolicyFilter = Dict{Symbol,Symbol}(Symbol("prefixMatch")=>Symbol("prefixMatch"), Symbol("blobTypes")=>Symbol("blobTypes"), Symbol("blobIndexMatch")=>Symbol("blobIndexMatch"))
const _property_types_ManagementPolicyFilter = Dict{Symbol,String}(Symbol("prefixMatch")=>"Vector{String}", Symbol("blobTypes")=>"Vector{String}", Symbol("blobIndexMatch")=>"Vector{TagFilter}")
Base.propertynames(::Type{ ManagementPolicyFilter }) = collect(keys(_property_map_ManagementPolicyFilter))
Swagger.property_type(::Type{ ManagementPolicyFilter }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ManagementPolicyFilter[name]))}
Swagger.field_name(::Type{ ManagementPolicyFilter }, property_name::Symbol) =  _property_map_ManagementPolicyFilter[property_name]

function check_required(o::ManagementPolicyFilter)
    (getproperty(o, Symbol("blobTypes")) === nothing) && (return false)
    true
end

function validate_property(::Type{ ManagementPolicyFilter }, name::Symbol, val)
end
