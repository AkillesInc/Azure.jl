# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct SkuInformation <: SwaggerModel
    name::Any # spec type: Union{ Nothing, SkuName } # spec name: name
    tier::Any # spec type: Union{ Nothing, Tier } # spec name: tier
    resourceType::Any # spec type: Union{ Nothing, String } # spec name: resourceType
    kind::Any # spec type: Union{ Nothing, String } # spec name: kind
    locations::Any # spec type: Union{ Nothing, Vector{String} } # spec name: locations
    capabilities::Any # spec type: Union{ Nothing, Vector{SKUCapability} } # spec name: capabilities
    restrictions::Any # spec type: Union{ Nothing, Vector{Restriction} } # spec name: restrictions

    function SkuInformation(;name=nothing, tier=nothing, resourceType=nothing, kind=nothing, locations=nothing, capabilities=nothing, restrictions=nothing)
        o = new()
        validate_property(SkuInformation, Symbol("name"), name)
        setfield!(o, Symbol("name"), name)
        validate_property(SkuInformation, Symbol("tier"), tier)
        setfield!(o, Symbol("tier"), tier)
        validate_property(SkuInformation, Symbol("resourceType"), resourceType)
        setfield!(o, Symbol("resourceType"), resourceType)
        validate_property(SkuInformation, Symbol("kind"), kind)
        setfield!(o, Symbol("kind"), kind)
        validate_property(SkuInformation, Symbol("locations"), locations)
        setfield!(o, Symbol("locations"), locations)
        validate_property(SkuInformation, Symbol("capabilities"), capabilities)
        setfield!(o, Symbol("capabilities"), capabilities)
        validate_property(SkuInformation, Symbol("restrictions"), restrictions)
        setfield!(o, Symbol("restrictions"), restrictions)
        o
    end
end # type SkuInformation

const _property_map_SkuInformation = Dict{Symbol,Symbol}(Symbol("name")=>Symbol("name"), Symbol("tier")=>Symbol("tier"), Symbol("resourceType")=>Symbol("resourceType"), Symbol("kind")=>Symbol("kind"), Symbol("locations")=>Symbol("locations"), Symbol("capabilities")=>Symbol("capabilities"), Symbol("restrictions")=>Symbol("restrictions"))
const _property_types_SkuInformation = Dict{Symbol,String}(Symbol("name")=>"SkuName", Symbol("tier")=>"Tier", Symbol("resourceType")=>"String", Symbol("kind")=>"String", Symbol("locations")=>"Vector{String}", Symbol("capabilities")=>"Vector{SKUCapability}", Symbol("restrictions")=>"Vector{Restriction}")
Base.propertynames(::Type{ SkuInformation }) = collect(keys(_property_map_SkuInformation))
Swagger.property_type(::Type{ SkuInformation }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_SkuInformation[name]))}
Swagger.field_name(::Type{ SkuInformation }, property_name::Symbol) =  _property_map_SkuInformation[property_name]

const _allowed_SkuInformation_kind = ["Storage", "StorageV2", "BlobStorage", "FileStorage", "BlockBlobStorage"]

function check_required(o::SkuInformation)
    (getproperty(o, Symbol("name")) === nothing) && (return false)
    true
end

function validate_property(::Type{ SkuInformation }, name::Symbol, val)
    if name === Symbol("kind")
        Swagger.validate_param(name, "SkuInformation", :enum, val, _allowed_SkuInformation_kind)
    end
end
