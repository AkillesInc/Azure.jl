# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct EncryptionScopeProperties <: SwaggerModel
    source::Any # spec type: Union{ Nothing, String } # spec name: source
    state::Any # spec type: Union{ Nothing, String } # spec name: state
    creationTime::Any # spec type: Union{ Nothing, DateTime } # spec name: creationTime
    lastModifiedTime::Any # spec type: Union{ Nothing, DateTime } # spec name: lastModifiedTime
    keyVaultProperties::Any # spec type: Union{ Nothing, EncryptionScopeKeyVaultProperties } # spec name: keyVaultProperties

    function EncryptionScopeProperties(;source=nothing, state=nothing, creationTime=nothing, lastModifiedTime=nothing, keyVaultProperties=nothing)
        o = new()
        validate_property(EncryptionScopeProperties, Symbol("source"), source)
        setfield!(o, Symbol("source"), source)
        validate_property(EncryptionScopeProperties, Symbol("state"), state)
        setfield!(o, Symbol("state"), state)
        validate_property(EncryptionScopeProperties, Symbol("creationTime"), creationTime)
        setfield!(o, Symbol("creationTime"), creationTime)
        validate_property(EncryptionScopeProperties, Symbol("lastModifiedTime"), lastModifiedTime)
        setfield!(o, Symbol("lastModifiedTime"), lastModifiedTime)
        validate_property(EncryptionScopeProperties, Symbol("keyVaultProperties"), keyVaultProperties)
        setfield!(o, Symbol("keyVaultProperties"), keyVaultProperties)
        o
    end
end # type EncryptionScopeProperties

const _property_map_EncryptionScopeProperties = Dict{Symbol,Symbol}(Symbol("source")=>Symbol("source"), Symbol("state")=>Symbol("state"), Symbol("creationTime")=>Symbol("creationTime"), Symbol("lastModifiedTime")=>Symbol("lastModifiedTime"), Symbol("keyVaultProperties")=>Symbol("keyVaultProperties"))
const _property_types_EncryptionScopeProperties = Dict{Symbol,String}(Symbol("source")=>"String", Symbol("state")=>"String", Symbol("creationTime")=>"DateTime", Symbol("lastModifiedTime")=>"DateTime", Symbol("keyVaultProperties")=>"EncryptionScopeKeyVaultProperties")
Base.propertynames(::Type{ EncryptionScopeProperties }) = collect(keys(_property_map_EncryptionScopeProperties))
Swagger.property_type(::Type{ EncryptionScopeProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_EncryptionScopeProperties[name]))}
Swagger.field_name(::Type{ EncryptionScopeProperties }, property_name::Symbol) =  _property_map_EncryptionScopeProperties[property_name]

const _allowed_EncryptionScopeProperties_source = ["Microsoft.Storage", "Microsoft.KeyVault"]

const _allowed_EncryptionScopeProperties_state = ["Enabled", "Disabled"]

function check_required(o::EncryptionScopeProperties)
    true
end

function validate_property(::Type{ EncryptionScopeProperties }, name::Symbol, val)
    if name === Symbol("source")
        Swagger.validate_param(name, "EncryptionScopeProperties", :enum, val, _allowed_EncryptionScopeProperties_source)
    end
    if name === Symbol("state")
        Swagger.validate_param(name, "EncryptionScopeProperties", :enum, val, _allowed_EncryptionScopeProperties_state)
    end
end
