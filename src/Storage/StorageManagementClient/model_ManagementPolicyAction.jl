# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct ManagementPolicyAction <: SwaggerModel
    baseBlob::Any # spec type: Union{ Nothing, ManagementPolicyBaseBlob } # spec name: baseBlob
    snapshot::Any # spec type: Union{ Nothing, ManagementPolicySnapShot } # spec name: snapshot

    function ManagementPolicyAction(;baseBlob=nothing, snapshot=nothing)
        o = new()
        validate_property(ManagementPolicyAction, Symbol("baseBlob"), baseBlob)
        setfield!(o, Symbol("baseBlob"), baseBlob)
        validate_property(ManagementPolicyAction, Symbol("snapshot"), snapshot)
        setfield!(o, Symbol("snapshot"), snapshot)
        o
    end
end # type ManagementPolicyAction

const _property_map_ManagementPolicyAction = Dict{Symbol,Symbol}(Symbol("baseBlob")=>Symbol("baseBlob"), Symbol("snapshot")=>Symbol("snapshot"))
const _property_types_ManagementPolicyAction = Dict{Symbol,String}(Symbol("baseBlob")=>"ManagementPolicyBaseBlob", Symbol("snapshot")=>"ManagementPolicySnapShot")
Base.propertynames(::Type{ ManagementPolicyAction }) = collect(keys(_property_map_ManagementPolicyAction))
Swagger.property_type(::Type{ ManagementPolicyAction }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ManagementPolicyAction[name]))}
Swagger.field_name(::Type{ ManagementPolicyAction }, property_name::Symbol) =  _property_map_ManagementPolicyAction[property_name]

function check_required(o::ManagementPolicyAction)
    true
end

function validate_property(::Type{ ManagementPolicyAction }, name::Symbol, val)
end
