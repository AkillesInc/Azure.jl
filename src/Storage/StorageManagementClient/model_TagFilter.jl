# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct TagFilter <: SwaggerModel
    name::Any # spec type: Union{ Nothing, String } # spec name: name
    op::Any # spec type: Union{ Nothing, String } # spec name: op
    value::Any # spec type: Union{ Nothing, String } # spec name: value

    function TagFilter(;name=nothing, op=nothing, value=nothing)
        o = new()
        validate_property(TagFilter, Symbol("name"), name)
        setfield!(o, Symbol("name"), name)
        validate_property(TagFilter, Symbol("op"), op)
        setfield!(o, Symbol("op"), op)
        validate_property(TagFilter, Symbol("value"), value)
        setfield!(o, Symbol("value"), value)
        o
    end
end # type TagFilter

const _property_map_TagFilter = Dict{Symbol,Symbol}(Symbol("name")=>Symbol("name"), Symbol("op")=>Symbol("op"), Symbol("value")=>Symbol("value"))
const _property_types_TagFilter = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("op")=>"String", Symbol("value")=>"String")
Base.propertynames(::Type{ TagFilter }) = collect(keys(_property_map_TagFilter))
Swagger.property_type(::Type{ TagFilter }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TagFilter[name]))}
Swagger.field_name(::Type{ TagFilter }, property_name::Symbol) =  _property_map_TagFilter[property_name]

function check_required(o::TagFilter)
    (getproperty(o, Symbol("name")) === nothing) && (return false)
    (getproperty(o, Symbol("op")) === nothing) && (return false)
    (getproperty(o, Symbol("value")) === nothing) && (return false)
    true
end

function validate_property(::Type{ TagFilter }, name::Symbol, val)
    if name === Symbol("name")
        Swagger.validate_param(name, "TagFilter", :maxLength, val, 128)
        Swagger.validate_param(name, "TagFilter", :minLength, val, 1)
    end
    if name === Symbol("value")
        Swagger.validate_param(name, "TagFilter", :maxLength, val, 256)
        Swagger.validate_param(name, "TagFilter", :minLength, val, 0)
    end
end
