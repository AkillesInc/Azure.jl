# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct ManagementPolicySchema <: SwaggerModel
    rules::Any # spec type: Union{ Nothing, Vector{ManagementPolicyRule} } # spec name: rules

    function ManagementPolicySchema(;rules=nothing)
        o = new()
        validate_property(ManagementPolicySchema, Symbol("rules"), rules)
        setfield!(o, Symbol("rules"), rules)
        o
    end
end # type ManagementPolicySchema

const _property_map_ManagementPolicySchema = Dict{Symbol,Symbol}(Symbol("rules")=>Symbol("rules"))
const _property_types_ManagementPolicySchema = Dict{Symbol,String}(Symbol("rules")=>"Vector{ManagementPolicyRule}")
Base.propertynames(::Type{ ManagementPolicySchema }) = collect(keys(_property_map_ManagementPolicySchema))
Swagger.property_type(::Type{ ManagementPolicySchema }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ManagementPolicySchema[name]))}
Swagger.field_name(::Type{ ManagementPolicySchema }, property_name::Symbol) =  _property_map_ManagementPolicySchema[property_name]

function check_required(o::ManagementPolicySchema)
    (getproperty(o, Symbol("rules")) === nothing) && (return false)
    true
end

function validate_property(::Type{ ManagementPolicySchema }, name::Symbol, val)
end
