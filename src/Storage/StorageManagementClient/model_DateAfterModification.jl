# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct DateAfterModification <: SwaggerModel
    daysAfterModificationGreaterThan::Any # spec type: Union{ Nothing, Float32 } # spec name: daysAfterModificationGreaterThan

    function DateAfterModification(;daysAfterModificationGreaterThan=nothing)
        o = new()
        validate_property(DateAfterModification, Symbol("daysAfterModificationGreaterThan"), daysAfterModificationGreaterThan)
        setfield!(o, Symbol("daysAfterModificationGreaterThan"), daysAfterModificationGreaterThan)
        o
    end
end # type DateAfterModification

const _property_map_DateAfterModification = Dict{Symbol,Symbol}(Symbol("daysAfterModificationGreaterThan")=>Symbol("daysAfterModificationGreaterThan"))
const _property_types_DateAfterModification = Dict{Symbol,String}(Symbol("daysAfterModificationGreaterThan")=>"Float32")
Base.propertynames(::Type{ DateAfterModification }) = collect(keys(_property_map_DateAfterModification))
Swagger.property_type(::Type{ DateAfterModification }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DateAfterModification[name]))}
Swagger.field_name(::Type{ DateAfterModification }, property_name::Symbol) =  _property_map_DateAfterModification[property_name]

function check_required(o::DateAfterModification)
    (getproperty(o, Symbol("daysAfterModificationGreaterThan")) === nothing) && (return false)
    true
end

function validate_property(::Type{ DateAfterModification }, name::Symbol, val)
    if name === Symbol("daysAfterModificationGreaterThan")
        Swagger.validate_param(name, "DateAfterModification", :minimum, val, 0, false)
    end
end
