# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

mutable struct ServiceSasParameters <: SwaggerModel
    canonicalizedResource::Union{ Nothing, String } # canonicalizedResource
    signedResource::Union{ Nothing, String } # signedResource
    signedPermission::Union{ Nothing, String } # signedPermission
    signedIp::Union{ Nothing, String } # signedIp
    signedProtocol::Union{ Nothing, String } # signedProtocol
    signedStart::Union{ Nothing, DateTime } # signedStart
    signedExpiry::Union{ Nothing, DateTime } # signedExpiry
    signedIdentifier::Union{ Nothing, String } # signedIdentifier
    startPk::Union{ Nothing, String } # startPk
    endPk::Union{ Nothing, String } # endPk
    startRk::Union{ Nothing, String } # startRk
    endRk::Union{ Nothing, String } # endRk
    keyToSign::Union{ Nothing, String } # keyToSign
    rscc::Union{ Nothing, String } # rscc
    rscd::Union{ Nothing, String } # rscd
    rsce::Union{ Nothing, String } # rsce
    rscl::Union{ Nothing, String } # rscl
    rsct::Union{ Nothing, String } # rsct

    function ServiceSasParameters(;canonicalizedResource=nothing, signedResource=nothing, signedPermission=nothing, signedIp=nothing, signedProtocol=nothing, signedStart=nothing, signedExpiry=nothing, signedIdentifier=nothing, startPk=nothing, endPk=nothing, startRk=nothing, endRk=nothing, keyToSign=nothing, rscc=nothing, rscd=nothing, rsce=nothing, rscl=nothing, rsct=nothing)
        o = new()
        set_field!(o, :canonicalizedResource, canonicalizedResource)
        set_field!(o, :signedResource, signedResource)
        set_field!(o, :signedPermission, signedPermission)
        set_field!(o, :signedIp, signedIp)
        set_field!(o, :signedProtocol, signedProtocol)
        set_field!(o, :signedStart, signedStart)
        set_field!(o, :signedExpiry, signedExpiry)
        set_field!(o, :signedIdentifier, signedIdentifier)
        set_field!(o, :startPk, startPk)
        set_field!(o, :endPk, endPk)
        set_field!(o, :startRk, startRk)
        set_field!(o, :endRk, endRk)
        set_field!(o, :keyToSign, keyToSign)
        set_field!(o, :rscc, rscc)
        set_field!(o, :rscd, rscd)
        set_field!(o, :rsce, rsce)
        set_field!(o, :rscl, rscl)
        set_field!(o, :rsct, rsct)
        o
    end
end # type ServiceSasParameters

const _name_map_ServiceSasParameters = Dict{String,Symbol}(["canonicalizedResource"=>:canonicalizedResource, "signedResource"=>:signedResource, "signedPermission"=>:signedPermission, "signedIp"=>:signedIp, "signedProtocol"=>:signedProtocol, "signedStart"=>:signedStart, "signedExpiry"=>:signedExpiry, "signedIdentifier"=>:signedIdentifier, "startPk"=>:startPk, "endPk"=>:endPk, "startRk"=>:startRk, "endRk"=>:endRk, "keyToSign"=>:keyToSign, "rscc"=>:rscc, "rscd"=>:rscd, "rsce"=>:rsce, "rscl"=>:rscl, "rsct"=>:rsct])
const _field_map_ServiceSasParameters = Dict{Symbol,String}([:canonicalizedResource=>"canonicalizedResource", :signedResource=>"signedResource", :signedPermission=>"signedPermission", :signedIp=>"signedIp", :signedProtocol=>"signedProtocol", :signedStart=>"signedStart", :signedExpiry=>"signedExpiry", :signedIdentifier=>"signedIdentifier", :startPk=>"startPk", :endPk=>"endPk", :startRk=>"startRk", :endRk=>"endRk", :keyToSign=>"keyToSign", :rscc=>"rscc", :rscd=>"rscd", :rsce=>"rsce", :rscl=>"rscl", :rsct=>"rsct"])
Swagger.name_map(::Type{ ServiceSasParameters }) = _name_map_ServiceSasParameters
Swagger.field_map(::Type{ ServiceSasParameters }) = _field_map_ServiceSasParameters

const _allowed_ServiceSasParameters_signedResource = ["b", "c", "f", "s"]

const _allowed_ServiceSasParameters_signedPermission = ["r", "d", "w", "l", "a", "c", "u", "p"]

const _allowed_ServiceSasParameters_signedProtocol = ["https,http", "https"]

function check_required(o::ServiceSasParameters)
    (o.canonicalizedResource === nothing) && (return false)
    true
end

function validate_field(o::ServiceSasParameters, name::Symbol, val)
    if name === :signedResource
        Swagger.validate_param(name, "ServiceSasParameters", :enum, val, _allowed_ServiceSasParameters_signedResource)
    end
    if name === :signedPermission
        Swagger.validate_param(name, "ServiceSasParameters", :enum, val, _allowed_ServiceSasParameters_signedPermission)
    end
    if name === :signedProtocol
        Swagger.validate_param(name, "ServiceSasParameters", :enum, val, _allowed_ServiceSasParameters_signedProtocol)
    end
    if name === :signedIdentifier
        Swagger.validate_param(name, "ServiceSasParameters", :maxLength, val, 64)
    end
end
