# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

type CheckNameAvailabilityResult <: SwaggerModel
    nameAvailable::Nullable{ Bool } # nameAvailable
    reason::Nullable{ String } # reason
    message::Nullable{ String } # message

    function CheckNameAvailabilityResult(;nameAvailable=nothing, reason=nothing, message=nothing)
        o = new()
        set_field!(o, :nameAvailable, nameAvailable)
        set_field!(o, :reason, reason)
        set_field!(o, :message, message)
        o
    end
end # type CheckNameAvailabilityResult

const _name_map_CheckNameAvailabilityResult = Dict{String,Symbol}(["nameAvailable"=>:nameAvailable, "reason"=>:reason, "message"=>:message])
const _field_map_CheckNameAvailabilityResult = Dict{Symbol,String}([:nameAvailable=>"nameAvailable", :reason=>"reason", :message=>"message"])
Swagger.name_map(::Type{ CheckNameAvailabilityResult }) = _name_map_CheckNameAvailabilityResult
Swagger.field_map(::Type{ CheckNameAvailabilityResult }) = _field_map_CheckNameAvailabilityResult

const _allowed_CheckNameAvailabilityResult_reason = ["AccountNameInvalid", "AlreadyExists"]

function check_required(o::CheckNameAvailabilityResult)
    true
end

function validate_field(o::CheckNameAvailabilityResult, name::Symbol, val)
    if name === :reason
        Swagger.validate_param(name, "CheckNameAvailabilityResult", :enum, val, _allowed_CheckNameAvailabilityResult_reason)
    end
end
