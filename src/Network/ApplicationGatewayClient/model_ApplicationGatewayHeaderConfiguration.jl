# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct ApplicationGatewayHeaderConfiguration <: SwaggerModel
    headerName::Any # spec type: Union{ Nothing, String } # spec name: headerName
    headerValue::Any # spec type: Union{ Nothing, String } # spec name: headerValue

    function ApplicationGatewayHeaderConfiguration(;headerName=nothing, headerValue=nothing)
        o = new()
        validate_property(ApplicationGatewayHeaderConfiguration, Symbol("headerName"), headerName)
        setfield!(o, Symbol("headerName"), headerName)
        validate_property(ApplicationGatewayHeaderConfiguration, Symbol("headerValue"), headerValue)
        setfield!(o, Symbol("headerValue"), headerValue)
        o
    end
end # type ApplicationGatewayHeaderConfiguration

const _property_map_ApplicationGatewayHeaderConfiguration = Dict{Symbol,Symbol}(Symbol("headerName")=>Symbol("headerName"), Symbol("headerValue")=>Symbol("headerValue"))
const _property_types_ApplicationGatewayHeaderConfiguration = Dict{Symbol,String}(Symbol("headerName")=>"String", Symbol("headerValue")=>"String")
Base.propertynames(::Type{ ApplicationGatewayHeaderConfiguration }) = collect(keys(_property_map_ApplicationGatewayHeaderConfiguration))
Swagger.property_type(::Type{ ApplicationGatewayHeaderConfiguration }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ApplicationGatewayHeaderConfiguration[name]))}
Swagger.field_name(::Type{ ApplicationGatewayHeaderConfiguration }, property_name::Symbol) =  _property_map_ApplicationGatewayHeaderConfiguration[property_name]

function check_required(o::ApplicationGatewayHeaderConfiguration)
    true
end

function validate_property(::Type{ ApplicationGatewayHeaderConfiguration }, name::Symbol, val)
end
