# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

type ApplicationGatewayPropertiesFormat <: SwaggerModel
    sku::Nullable{ ApplicationGatewaySku } # sku
    sslPolicy::Nullable{ ApplicationGatewaySslPolicy } # sslPolicy
    operationalState::Nullable{ String } # operationalState
    gatewayIPConfigurations::Nullable{ Vector{ApplicationGatewayIPConfiguration} } # gatewayIPConfigurations
    authenticationCertificates::Nullable{ Vector{ApplicationGatewayAuthenticationCertificate} } # authenticationCertificates
    sslCertificates::Nullable{ Vector{ApplicationGatewaySslCertificate} } # sslCertificates
    frontendIPConfigurations::Nullable{ Vector{ApplicationGatewayFrontendIPConfiguration} } # frontendIPConfigurations
    frontendPorts::Nullable{ Vector{ApplicationGatewayFrontendPort} } # frontendPorts
    probes::Nullable{ Vector{ApplicationGatewayProbe} } # probes
    backendAddressPools::Nullable{ Vector{ApplicationGatewayBackendAddressPool} } # backendAddressPools
    backendHttpSettingsCollection::Nullable{ Vector{ApplicationGatewayBackendHttpSettings} } # backendHttpSettingsCollection
    httpListeners::Nullable{ Vector{ApplicationGatewayHttpListener} } # httpListeners
    urlPathMaps::Nullable{ Vector{ApplicationGatewayUrlPathMap} } # urlPathMaps
    requestRoutingRules::Nullable{ Vector{ApplicationGatewayRequestRoutingRule} } # requestRoutingRules
    webApplicationFirewallConfiguration::Nullable{ ApplicationGatewayWebApplicationFirewallConfiguration } # webApplicationFirewallConfiguration
    resourceGuid::Nullable{ String } # resourceGuid
    provisioningState::Nullable{ String } # provisioningState

    function ApplicationGatewayPropertiesFormat(;sku=nothing, sslPolicy=nothing, operationalState=nothing, gatewayIPConfigurations=nothing, authenticationCertificates=nothing, sslCertificates=nothing, frontendIPConfigurations=nothing, frontendPorts=nothing, probes=nothing, backendAddressPools=nothing, backendHttpSettingsCollection=nothing, httpListeners=nothing, urlPathMaps=nothing, requestRoutingRules=nothing, webApplicationFirewallConfiguration=nothing, resourceGuid=nothing, provisioningState=nothing)
        o = new()
        set_field!(o, :sku, sku)
        set_field!(o, :sslPolicy, sslPolicy)
        set_field!(o, :operationalState, operationalState)
        set_field!(o, :gatewayIPConfigurations, gatewayIPConfigurations)
        set_field!(o, :authenticationCertificates, authenticationCertificates)
        set_field!(o, :sslCertificates, sslCertificates)
        set_field!(o, :frontendIPConfigurations, frontendIPConfigurations)
        set_field!(o, :frontendPorts, frontendPorts)
        set_field!(o, :probes, probes)
        set_field!(o, :backendAddressPools, backendAddressPools)
        set_field!(o, :backendHttpSettingsCollection, backendHttpSettingsCollection)
        set_field!(o, :httpListeners, httpListeners)
        set_field!(o, :urlPathMaps, urlPathMaps)
        set_field!(o, :requestRoutingRules, requestRoutingRules)
        set_field!(o, :webApplicationFirewallConfiguration, webApplicationFirewallConfiguration)
        set_field!(o, :resourceGuid, resourceGuid)
        set_field!(o, :provisioningState, provisioningState)
        o
    end
end # type ApplicationGatewayPropertiesFormat

const _name_map_ApplicationGatewayPropertiesFormat = Dict{String,Symbol}(["sku"=>:sku, "sslPolicy"=>:sslPolicy, "operationalState"=>:operationalState, "gatewayIPConfigurations"=>:gatewayIPConfigurations, "authenticationCertificates"=>:authenticationCertificates, "sslCertificates"=>:sslCertificates, "frontendIPConfigurations"=>:frontendIPConfigurations, "frontendPorts"=>:frontendPorts, "probes"=>:probes, "backendAddressPools"=>:backendAddressPools, "backendHttpSettingsCollection"=>:backendHttpSettingsCollection, "httpListeners"=>:httpListeners, "urlPathMaps"=>:urlPathMaps, "requestRoutingRules"=>:requestRoutingRules, "webApplicationFirewallConfiguration"=>:webApplicationFirewallConfiguration, "resourceGuid"=>:resourceGuid, "provisioningState"=>:provisioningState])
const _field_map_ApplicationGatewayPropertiesFormat = Dict{Symbol,String}([:sku=>"sku", :sslPolicy=>"sslPolicy", :operationalState=>"operationalState", :gatewayIPConfigurations=>"gatewayIPConfigurations", :authenticationCertificates=>"authenticationCertificates", :sslCertificates=>"sslCertificates", :frontendIPConfigurations=>"frontendIPConfigurations", :frontendPorts=>"frontendPorts", :probes=>"probes", :backendAddressPools=>"backendAddressPools", :backendHttpSettingsCollection=>"backendHttpSettingsCollection", :httpListeners=>"httpListeners", :urlPathMaps=>"urlPathMaps", :requestRoutingRules=>"requestRoutingRules", :webApplicationFirewallConfiguration=>"webApplicationFirewallConfiguration", :resourceGuid=>"resourceGuid", :provisioningState=>"provisioningState"])
Swagger.name_map(::Type{ ApplicationGatewayPropertiesFormat }) = _name_map_ApplicationGatewayPropertiesFormat
Swagger.field_map(::Type{ ApplicationGatewayPropertiesFormat }) = _field_map_ApplicationGatewayPropertiesFormat

const _allowed_ApplicationGatewayPropertiesFormat_operationalState = ["Stopped", "Starting", "Running", "Stopping"]

function check_required(o::ApplicationGatewayPropertiesFormat)
    true
end

function validate_field(o::ApplicationGatewayPropertiesFormat, name::Symbol, val)
    if name === :operationalState
        Swagger.validate_param(name, "ApplicationGatewayPropertiesFormat", :enum, val, _allowed_ApplicationGatewayPropertiesFormat_operationalState)
    end
end
