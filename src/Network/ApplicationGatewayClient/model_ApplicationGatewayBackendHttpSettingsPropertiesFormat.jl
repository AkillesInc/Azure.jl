# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

type ApplicationGatewayBackendHttpSettingsPropertiesFormat <: SwaggerModel
    port::Nullable{ Int32 } # port
    protocol::Nullable{ String } # protocol
    cookieBasedAffinity::Nullable{ String } # cookieBasedAffinity
    requestTimeout::Nullable{ Int32 } # requestTimeout
    probe::Nullable{ SubResource } # probe
    authenticationCertificates::Nullable{ Vector{SubResource} } # authenticationCertificates
    provisioningState::Nullable{ String } # provisioningState
    connectionDraining::Nullable{ ApplicationGatewayConnectionDraining } # connectionDraining

    function ApplicationGatewayBackendHttpSettingsPropertiesFormat(;port=nothing, protocol=nothing, cookieBasedAffinity=nothing, requestTimeout=nothing, probe=nothing, authenticationCertificates=nothing, provisioningState=nothing, connectionDraining=nothing)
        o = new()
        set_field!(o, :port, port)
        set_field!(o, :protocol, protocol)
        set_field!(o, :cookieBasedAffinity, cookieBasedAffinity)
        set_field!(o, :requestTimeout, requestTimeout)
        set_field!(o, :probe, probe)
        set_field!(o, :authenticationCertificates, authenticationCertificates)
        set_field!(o, :provisioningState, provisioningState)
        set_field!(o, :connectionDraining, connectionDraining)
        o
    end
end # type ApplicationGatewayBackendHttpSettingsPropertiesFormat

const _name_map_ApplicationGatewayBackendHttpSettingsPropertiesFormat = Dict{String,Symbol}(["port"=>:port, "protocol"=>:protocol, "cookieBasedAffinity"=>:cookieBasedAffinity, "requestTimeout"=>:requestTimeout, "probe"=>:probe, "authenticationCertificates"=>:authenticationCertificates, "provisioningState"=>:provisioningState, "connectionDraining"=>:connectionDraining])
const _field_map_ApplicationGatewayBackendHttpSettingsPropertiesFormat = Dict{Symbol,String}([:port=>"port", :protocol=>"protocol", :cookieBasedAffinity=>"cookieBasedAffinity", :requestTimeout=>"requestTimeout", :probe=>"probe", :authenticationCertificates=>"authenticationCertificates", :provisioningState=>"provisioningState", :connectionDraining=>"connectionDraining"])
Swagger.name_map(::Type{ ApplicationGatewayBackendHttpSettingsPropertiesFormat }) = _name_map_ApplicationGatewayBackendHttpSettingsPropertiesFormat
Swagger.field_map(::Type{ ApplicationGatewayBackendHttpSettingsPropertiesFormat }) = _field_map_ApplicationGatewayBackendHttpSettingsPropertiesFormat

const _allowed_ApplicationGatewayBackendHttpSettingsPropertiesFormat_protocol = ["Http", "Https"]

const _allowed_ApplicationGatewayBackendHttpSettingsPropertiesFormat_cookieBasedAffinity = ["Enabled", "Disabled"]

function check_required(o::ApplicationGatewayBackendHttpSettingsPropertiesFormat)
    true
end

function validate_field(o::ApplicationGatewayBackendHttpSettingsPropertiesFormat, name::Symbol, val)
    if name === :protocol
        Swagger.validate_param(name, "ApplicationGatewayBackendHttpSettingsPropertiesFormat", :enum, val, _allowed_ApplicationGatewayBackendHttpSettingsPropertiesFormat_protocol)
    end
    if name === :cookieBasedAffinity
        Swagger.validate_param(name, "ApplicationGatewayBackendHttpSettingsPropertiesFormat", :enum, val, _allowed_ApplicationGatewayBackendHttpSettingsPropertiesFormat_cookieBasedAffinity)
    end
end
