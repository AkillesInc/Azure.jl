# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

mutable struct IpsecPolicy <: SwaggerModel
    saLifeTimeSeconds::Union{ Nothing, Int32 } # saLifeTimeSeconds
    saDataSizeKilobytes::Union{ Nothing, Int32 } # saDataSizeKilobytes
    ipsecEncryption::Union{ Nothing, String } # ipsecEncryption
    ipsecIntegrity::Union{ Nothing, String } # ipsecIntegrity
    ikeEncryption::Union{ Nothing, String } # ikeEncryption
    ikeIntegrity::Union{ Nothing, String } # ikeIntegrity
    dhGroup::Union{ Nothing, String } # dhGroup
    pfsGroup::Union{ Nothing, String } # pfsGroup

    function IpsecPolicy(;saLifeTimeSeconds=nothing, saDataSizeKilobytes=nothing, ipsecEncryption=nothing, ipsecIntegrity=nothing, ikeEncryption=nothing, ikeIntegrity=nothing, dhGroup=nothing, pfsGroup=nothing)
        o = new()
        set_field!(o, :saLifeTimeSeconds, saLifeTimeSeconds)
        set_field!(o, :saDataSizeKilobytes, saDataSizeKilobytes)
        set_field!(o, :ipsecEncryption, ipsecEncryption)
        set_field!(o, :ipsecIntegrity, ipsecIntegrity)
        set_field!(o, :ikeEncryption, ikeEncryption)
        set_field!(o, :ikeIntegrity, ikeIntegrity)
        set_field!(o, :dhGroup, dhGroup)
        set_field!(o, :pfsGroup, pfsGroup)
        o
    end
end # type IpsecPolicy

const _name_map_IpsecPolicy = Dict{String,Symbol}(["saLifeTimeSeconds"=>:saLifeTimeSeconds, "saDataSizeKilobytes"=>:saDataSizeKilobytes, "ipsecEncryption"=>:ipsecEncryption, "ipsecIntegrity"=>:ipsecIntegrity, "ikeEncryption"=>:ikeEncryption, "ikeIntegrity"=>:ikeIntegrity, "dhGroup"=>:dhGroup, "pfsGroup"=>:pfsGroup])
const _field_map_IpsecPolicy = Dict{Symbol,String}([:saLifeTimeSeconds=>"saLifeTimeSeconds", :saDataSizeKilobytes=>"saDataSizeKilobytes", :ipsecEncryption=>"ipsecEncryption", :ipsecIntegrity=>"ipsecIntegrity", :ikeEncryption=>"ikeEncryption", :ikeIntegrity=>"ikeIntegrity", :dhGroup=>"dhGroup", :pfsGroup=>"pfsGroup"])
Swagger.name_map(::Type{ IpsecPolicy }) = _name_map_IpsecPolicy
Swagger.field_map(::Type{ IpsecPolicy }) = _field_map_IpsecPolicy

const _allowed_IpsecPolicy_ipsecEncryption = ["None", "DES", "DES3", "AES128", "AES192", "AES256", "GCMAES128", "GCMAES192", "GCMAES256"]

const _allowed_IpsecPolicy_ipsecIntegrity = ["MD5", "SHA1", "SHA256", "GCMAES128", "GCMAES192", "GCMAES256"]

const _allowed_IpsecPolicy_ikeEncryption = ["DES", "DES3", "AES128", "AES192", "AES256"]

const _allowed_IpsecPolicy_ikeIntegrity = ["MD5", "SHA1", "SHA256", "SHA384"]

const _allowed_IpsecPolicy_dhGroup = ["None", "DHGroup1", "DHGroup2", "DHGroup14", "DHGroup2048", "ECP256", "ECP384", "DHGroup24"]

const _allowed_IpsecPolicy_pfsGroup = ["None", "PFS1", "PFS2", "PFS2048", "ECP256", "ECP384", "PFS24"]

function check_required(o::IpsecPolicy)
    (o.saLifeTimeSeconds === nothing) && (return false)
    (o.saDataSizeKilobytes === nothing) && (return false)
    true
end

function validate_field(o::IpsecPolicy, name::Symbol, val)
    if name === :ipsecEncryption
        Swagger.validate_param(name, "IpsecPolicy", :enum, val, _allowed_IpsecPolicy_ipsecEncryption)
    end
    if name === :ipsecIntegrity
        Swagger.validate_param(name, "IpsecPolicy", :enum, val, _allowed_IpsecPolicy_ipsecIntegrity)
    end
    if name === :ikeEncryption
        Swagger.validate_param(name, "IpsecPolicy", :enum, val, _allowed_IpsecPolicy_ikeEncryption)
    end
    if name === :ikeIntegrity
        Swagger.validate_param(name, "IpsecPolicy", :enum, val, _allowed_IpsecPolicy_ikeIntegrity)
    end
    if name === :dhGroup
        Swagger.validate_param(name, "IpsecPolicy", :enum, val, _allowed_IpsecPolicy_dhGroup)
    end
    if name === :pfsGroup
        Swagger.validate_param(name, "IpsecPolicy", :enum, val, _allowed_IpsecPolicy_pfsGroup)
    end
end
