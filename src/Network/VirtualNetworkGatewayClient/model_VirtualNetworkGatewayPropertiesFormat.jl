# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

mutable struct VirtualNetworkGatewayPropertiesFormat <: SwaggerModel
    ipConfigurations::Union{ Nothing, Vector{VirtualNetworkGatewayIPConfiguration} } # ipConfigurations
    gatewayType::Union{ Nothing, String } # gatewayType
    vpnType::Union{ Nothing, String } # vpnType
    enableBgp::Union{ Nothing, Bool } # enableBgp
    activeActive::Union{ Nothing, Bool } # activeActive
    gatewayDefaultSite::Union{ Nothing, SubResource } # gatewayDefaultSite
    sku::Union{ Nothing, VirtualNetworkGatewaySku } # sku
    vpnClientConfiguration::Union{ Nothing, VpnClientConfiguration } # vpnClientConfiguration
    bgpSettings::Union{ Nothing, BgpSettings } # bgpSettings
    resourceGuid::Union{ Nothing, String } # resourceGuid
    provisioningState::Union{ Nothing, String } # provisioningState

    function VirtualNetworkGatewayPropertiesFormat(;ipConfigurations=nothing, gatewayType=nothing, vpnType=nothing, enableBgp=nothing, activeActive=nothing, gatewayDefaultSite=nothing, sku=nothing, vpnClientConfiguration=nothing, bgpSettings=nothing, resourceGuid=nothing, provisioningState=nothing)
        o = new()
        set_field!(o, :ipConfigurations, ipConfigurations)
        set_field!(o, :gatewayType, gatewayType)
        set_field!(o, :vpnType, vpnType)
        set_field!(o, :enableBgp, enableBgp)
        set_field!(o, :activeActive, activeActive)
        set_field!(o, :gatewayDefaultSite, gatewayDefaultSite)
        set_field!(o, :sku, sku)
        set_field!(o, :vpnClientConfiguration, vpnClientConfiguration)
        set_field!(o, :bgpSettings, bgpSettings)
        set_field!(o, :resourceGuid, resourceGuid)
        set_field!(o, :provisioningState, provisioningState)
        o
    end
end # type VirtualNetworkGatewayPropertiesFormat

const _name_map_VirtualNetworkGatewayPropertiesFormat = Dict{String,Symbol}(["ipConfigurations"=>:ipConfigurations, "gatewayType"=>:gatewayType, "vpnType"=>:vpnType, "enableBgp"=>:enableBgp, "activeActive"=>:activeActive, "gatewayDefaultSite"=>:gatewayDefaultSite, "sku"=>:sku, "vpnClientConfiguration"=>:vpnClientConfiguration, "bgpSettings"=>:bgpSettings, "resourceGuid"=>:resourceGuid, "provisioningState"=>:provisioningState])
const _field_map_VirtualNetworkGatewayPropertiesFormat = Dict{Symbol,String}([:ipConfigurations=>"ipConfigurations", :gatewayType=>"gatewayType", :vpnType=>"vpnType", :enableBgp=>"enableBgp", :activeActive=>"activeActive", :gatewayDefaultSite=>"gatewayDefaultSite", :sku=>"sku", :vpnClientConfiguration=>"vpnClientConfiguration", :bgpSettings=>"bgpSettings", :resourceGuid=>"resourceGuid", :provisioningState=>"provisioningState"])
Swagger.name_map(::Type{ VirtualNetworkGatewayPropertiesFormat }) = _name_map_VirtualNetworkGatewayPropertiesFormat
Swagger.field_map(::Type{ VirtualNetworkGatewayPropertiesFormat }) = _field_map_VirtualNetworkGatewayPropertiesFormat

const _allowed_VirtualNetworkGatewayPropertiesFormat_gatewayType = ["Vpn", "ExpressRoute"]

const _allowed_VirtualNetworkGatewayPropertiesFormat_vpnType = ["PolicyBased", "RouteBased"]

function check_required(o::VirtualNetworkGatewayPropertiesFormat)
    true
end

function validate_field(o::VirtualNetworkGatewayPropertiesFormat, name::Symbol, val)
    if name === :gatewayType
        Swagger.validate_param(name, "VirtualNetworkGatewayPropertiesFormat", :enum, val, _allowed_VirtualNetworkGatewayPropertiesFormat_gatewayType)
    end
    if name === :vpnType
        Swagger.validate_param(name, "VirtualNetworkGatewayPropertiesFormat", :enum, val, _allowed_VirtualNetworkGatewayPropertiesFormat_vpnType)
    end
end
