# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct VirtualNetworkGatewayConnectionListEntityPropertiesFormat <: SwaggerModel
    authorizationKey::Any # spec type: Union{ Nothing, String } # spec name: authorizationKey
    virtualNetworkGateway1::Any # spec type: Union{ Nothing, VirtualNetworkConnectionGatewayReference } # spec name: virtualNetworkGateway1
    virtualNetworkGateway2::Any # spec type: Union{ Nothing, VirtualNetworkConnectionGatewayReference } # spec name: virtualNetworkGateway2
    localNetworkGateway2::Any # spec type: Union{ Nothing, VirtualNetworkConnectionGatewayReference } # spec name: localNetworkGateway2
    connectionType::Any # spec type: Union{ Nothing, VirtualNetworkGatewayConnectionType } # spec name: connectionType
    connectionProtocol::Any # spec type: Union{ Nothing, ConnectionProtocol } # spec name: connectionProtocol
    routingWeight::Any # spec type: Union{ Nothing, Int32 } # spec name: routingWeight
    sharedKey::Any # spec type: Union{ Nothing, String } # spec name: sharedKey
    connectionStatus::Any # spec type: Union{ Nothing, VirtualNetworkGatewayConnectionStatus } # spec name: connectionStatus
    tunnelConnectionStatus::Any # spec type: Union{ Nothing, Vector{TunnelConnectionHealth} } # spec name: tunnelConnectionStatus
    egressBytesTransferred::Any # spec type: Union{ Nothing, Int64 } # spec name: egressBytesTransferred
    ingressBytesTransferred::Any # spec type: Union{ Nothing, Int64 } # spec name: ingressBytesTransferred
    peer::Any # spec type: Union{ Nothing, SubResource } # spec name: peer
    enableBgp::Any # spec type: Union{ Nothing, Bool } # spec name: enableBgp
    usePolicyBasedTrafficSelectors::Any # spec type: Union{ Nothing, Bool } # spec name: usePolicyBasedTrafficSelectors
    ipsecPolicies::Any # spec type: Union{ Nothing, Vector{IpsecPolicy} } # spec name: ipsecPolicies
    trafficSelectorPolicies::Any # spec type: Union{ Nothing, Vector{TrafficSelectorPolicy} } # spec name: trafficSelectorPolicies
    resourceGuid::Any # spec type: Union{ Nothing, String } # spec name: resourceGuid
    provisioningState::Any # spec type: Union{ Nothing, ProvisioningState } # spec name: provisioningState
    expressRouteGatewayBypass::Any # spec type: Union{ Nothing, Bool } # spec name: expressRouteGatewayBypass

    function VirtualNetworkGatewayConnectionListEntityPropertiesFormat(;authorizationKey=nothing, virtualNetworkGateway1=nothing, virtualNetworkGateway2=nothing, localNetworkGateway2=nothing, connectionType=nothing, connectionProtocol=nothing, routingWeight=nothing, sharedKey=nothing, connectionStatus=nothing, tunnelConnectionStatus=nothing, egressBytesTransferred=nothing, ingressBytesTransferred=nothing, peer=nothing, enableBgp=nothing, usePolicyBasedTrafficSelectors=nothing, ipsecPolicies=nothing, trafficSelectorPolicies=nothing, resourceGuid=nothing, provisioningState=nothing, expressRouteGatewayBypass=nothing)
        o = new()
        validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("authorizationKey"), authorizationKey)
        setfield!(o, Symbol("authorizationKey"), authorizationKey)
        validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("virtualNetworkGateway1"), virtualNetworkGateway1)
        setfield!(o, Symbol("virtualNetworkGateway1"), virtualNetworkGateway1)
        validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("virtualNetworkGateway2"), virtualNetworkGateway2)
        setfield!(o, Symbol("virtualNetworkGateway2"), virtualNetworkGateway2)
        validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("localNetworkGateway2"), localNetworkGateway2)
        setfield!(o, Symbol("localNetworkGateway2"), localNetworkGateway2)
        validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("connectionType"), connectionType)
        setfield!(o, Symbol("connectionType"), connectionType)
        validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("connectionProtocol"), connectionProtocol)
        setfield!(o, Symbol("connectionProtocol"), connectionProtocol)
        validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("routingWeight"), routingWeight)
        setfield!(o, Symbol("routingWeight"), routingWeight)
        validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("sharedKey"), sharedKey)
        setfield!(o, Symbol("sharedKey"), sharedKey)
        validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("connectionStatus"), connectionStatus)
        setfield!(o, Symbol("connectionStatus"), connectionStatus)
        validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("tunnelConnectionStatus"), tunnelConnectionStatus)
        setfield!(o, Symbol("tunnelConnectionStatus"), tunnelConnectionStatus)
        validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("egressBytesTransferred"), egressBytesTransferred)
        setfield!(o, Symbol("egressBytesTransferred"), egressBytesTransferred)
        validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("ingressBytesTransferred"), ingressBytesTransferred)
        setfield!(o, Symbol("ingressBytesTransferred"), ingressBytesTransferred)
        validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("peer"), peer)
        setfield!(o, Symbol("peer"), peer)
        validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("enableBgp"), enableBgp)
        setfield!(o, Symbol("enableBgp"), enableBgp)
        validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("usePolicyBasedTrafficSelectors"), usePolicyBasedTrafficSelectors)
        setfield!(o, Symbol("usePolicyBasedTrafficSelectors"), usePolicyBasedTrafficSelectors)
        validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("ipsecPolicies"), ipsecPolicies)
        setfield!(o, Symbol("ipsecPolicies"), ipsecPolicies)
        validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("trafficSelectorPolicies"), trafficSelectorPolicies)
        setfield!(o, Symbol("trafficSelectorPolicies"), trafficSelectorPolicies)
        validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("resourceGuid"), resourceGuid)
        setfield!(o, Symbol("resourceGuid"), resourceGuid)
        validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("provisioningState"), provisioningState)
        setfield!(o, Symbol("provisioningState"), provisioningState)
        validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("expressRouteGatewayBypass"), expressRouteGatewayBypass)
        setfield!(o, Symbol("expressRouteGatewayBypass"), expressRouteGatewayBypass)
        o
    end
end # type VirtualNetworkGatewayConnectionListEntityPropertiesFormat

const _property_map_VirtualNetworkGatewayConnectionListEntityPropertiesFormat = Dict{Symbol,Symbol}(Symbol("authorizationKey")=>Symbol("authorizationKey"), Symbol("virtualNetworkGateway1")=>Symbol("virtualNetworkGateway1"), Symbol("virtualNetworkGateway2")=>Symbol("virtualNetworkGateway2"), Symbol("localNetworkGateway2")=>Symbol("localNetworkGateway2"), Symbol("connectionType")=>Symbol("connectionType"), Symbol("connectionProtocol")=>Symbol("connectionProtocol"), Symbol("routingWeight")=>Symbol("routingWeight"), Symbol("sharedKey")=>Symbol("sharedKey"), Symbol("connectionStatus")=>Symbol("connectionStatus"), Symbol("tunnelConnectionStatus")=>Symbol("tunnelConnectionStatus"), Symbol("egressBytesTransferred")=>Symbol("egressBytesTransferred"), Symbol("ingressBytesTransferred")=>Symbol("ingressBytesTransferred"), Symbol("peer")=>Symbol("peer"), Symbol("enableBgp")=>Symbol("enableBgp"), Symbol("usePolicyBasedTrafficSelectors")=>Symbol("usePolicyBasedTrafficSelectors"), Symbol("ipsecPolicies")=>Symbol("ipsecPolicies"), Symbol("trafficSelectorPolicies")=>Symbol("trafficSelectorPolicies"), Symbol("resourceGuid")=>Symbol("resourceGuid"), Symbol("provisioningState")=>Symbol("provisioningState"), Symbol("expressRouteGatewayBypass")=>Symbol("expressRouteGatewayBypass"))
const _property_types_VirtualNetworkGatewayConnectionListEntityPropertiesFormat = Dict{Symbol,String}(Symbol("authorizationKey")=>"String", Symbol("virtualNetworkGateway1")=>"VirtualNetworkConnectionGatewayReference", Symbol("virtualNetworkGateway2")=>"VirtualNetworkConnectionGatewayReference", Symbol("localNetworkGateway2")=>"VirtualNetworkConnectionGatewayReference", Symbol("connectionType")=>"VirtualNetworkGatewayConnectionType", Symbol("connectionProtocol")=>"ConnectionProtocol", Symbol("routingWeight")=>"Int32", Symbol("sharedKey")=>"String", Symbol("connectionStatus")=>"VirtualNetworkGatewayConnectionStatus", Symbol("tunnelConnectionStatus")=>"Vector{TunnelConnectionHealth}", Symbol("egressBytesTransferred")=>"Int64", Symbol("ingressBytesTransferred")=>"Int64", Symbol("peer")=>"SubResource", Symbol("enableBgp")=>"Bool", Symbol("usePolicyBasedTrafficSelectors")=>"Bool", Symbol("ipsecPolicies")=>"Vector{IpsecPolicy}", Symbol("trafficSelectorPolicies")=>"Vector{TrafficSelectorPolicy}", Symbol("resourceGuid")=>"String", Symbol("provisioningState")=>"ProvisioningState", Symbol("expressRouteGatewayBypass")=>"Bool")
Base.propertynames(::Type{ VirtualNetworkGatewayConnectionListEntityPropertiesFormat }) = collect(keys(_property_map_VirtualNetworkGatewayConnectionListEntityPropertiesFormat))
Swagger.property_type(::Type{ VirtualNetworkGatewayConnectionListEntityPropertiesFormat }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_VirtualNetworkGatewayConnectionListEntityPropertiesFormat[name]))}
Swagger.field_name(::Type{ VirtualNetworkGatewayConnectionListEntityPropertiesFormat }, property_name::Symbol) =  _property_map_VirtualNetworkGatewayConnectionListEntityPropertiesFormat[property_name]

function check_required(o::VirtualNetworkGatewayConnectionListEntityPropertiesFormat)
    (getproperty(o, Symbol("virtualNetworkGateway1")) === nothing) && (return false)
    (getproperty(o, Symbol("connectionType")) === nothing) && (return false)
    true
end

function validate_property(::Type{ VirtualNetworkGatewayConnectionListEntityPropertiesFormat }, name::Symbol, val)
end
