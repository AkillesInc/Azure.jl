# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

mutable struct BgpPeerStatus <: SwaggerModel
    localAddress::Union{ Nothing, String } # localAddress
    neighbor::Union{ Nothing, String } # neighbor
    asn::Union{ Nothing, Int32 } # asn
    state::Union{ Nothing, String } # state
    connectedDuration::Union{ Nothing, String } # connectedDuration
    routesReceived::Union{ Nothing, Int64 } # routesReceived
    messagesSent::Union{ Nothing, Int64 } # messagesSent
    messagesReceived::Union{ Nothing, Int64 } # messagesReceived

    function BgpPeerStatus(;localAddress=nothing, neighbor=nothing, asn=nothing, state=nothing, connectedDuration=nothing, routesReceived=nothing, messagesSent=nothing, messagesReceived=nothing)
        o = new()
        set_field!(o, :localAddress, localAddress)
        set_field!(o, :neighbor, neighbor)
        set_field!(o, :asn, asn)
        set_field!(o, :state, state)
        set_field!(o, :connectedDuration, connectedDuration)
        set_field!(o, :routesReceived, routesReceived)
        set_field!(o, :messagesSent, messagesSent)
        set_field!(o, :messagesReceived, messagesReceived)
        o
    end
end # type BgpPeerStatus

const _name_map_BgpPeerStatus = Dict{String,Symbol}(["localAddress"=>:localAddress, "neighbor"=>:neighbor, "asn"=>:asn, "state"=>:state, "connectedDuration"=>:connectedDuration, "routesReceived"=>:routesReceived, "messagesSent"=>:messagesSent, "messagesReceived"=>:messagesReceived])
const _field_map_BgpPeerStatus = Dict{Symbol,String}([:localAddress=>"localAddress", :neighbor=>"neighbor", :asn=>"asn", :state=>"state", :connectedDuration=>"connectedDuration", :routesReceived=>"routesReceived", :messagesSent=>"messagesSent", :messagesReceived=>"messagesReceived"])
Swagger.name_map(::Type{ BgpPeerStatus }) = _name_map_BgpPeerStatus
Swagger.field_map(::Type{ BgpPeerStatus }) = _field_map_BgpPeerStatus

const _allowed_BgpPeerStatus_state = ["Unknown", "Stopped", "Idle", "Connecting", "Connected"]

function check_required(o::BgpPeerStatus)
    true
end

function validate_field(o::BgpPeerStatus, name::Symbol, val)
    if name === :state
        Swagger.validate_param(name, "BgpPeerStatus", :enum, val, _allowed_BgpPeerStatus_state)
    end
end
