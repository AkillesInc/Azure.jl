# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct RadiusServer <: SwaggerModel
    radiusServerAddress::Any # spec type: Union{ Nothing, String } # spec name: radiusServerAddress
    radiusServerScore::Any # spec type: Union{ Nothing, Int64 } # spec name: radiusServerScore
    radiusServerSecret::Any # spec type: Union{ Nothing, String } # spec name: radiusServerSecret

    function RadiusServer(;radiusServerAddress=nothing, radiusServerScore=nothing, radiusServerSecret=nothing)
        o = new()
        validate_property(RadiusServer, Symbol("radiusServerAddress"), radiusServerAddress)
        setfield!(o, Symbol("radiusServerAddress"), radiusServerAddress)
        validate_property(RadiusServer, Symbol("radiusServerScore"), radiusServerScore)
        setfield!(o, Symbol("radiusServerScore"), radiusServerScore)
        validate_property(RadiusServer, Symbol("radiusServerSecret"), radiusServerSecret)
        setfield!(o, Symbol("radiusServerSecret"), radiusServerSecret)
        o
    end
end # type RadiusServer

const _property_map_RadiusServer = Dict{Symbol,Symbol}(Symbol("radiusServerAddress")=>Symbol("radiusServerAddress"), Symbol("radiusServerScore")=>Symbol("radiusServerScore"), Symbol("radiusServerSecret")=>Symbol("radiusServerSecret"))
const _property_types_RadiusServer = Dict{Symbol,String}(Symbol("radiusServerAddress")=>"String", Symbol("radiusServerScore")=>"Int64", Symbol("radiusServerSecret")=>"String")
Base.propertynames(::Type{ RadiusServer }) = collect(keys(_property_map_RadiusServer))
Swagger.property_type(::Type{ RadiusServer }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_RadiusServer[name]))}
Swagger.field_name(::Type{ RadiusServer }, property_name::Symbol) =  _property_map_RadiusServer[property_name]

function check_required(o::RadiusServer)
    (getproperty(o, Symbol("radiusServerAddress")) === nothing) && (return false)
    true
end

function validate_property(::Type{ RadiusServer }, name::Symbol, val)
end
