# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

type RoutePropertiesFormat <: SwaggerModel
    addressPrefix::Nullable{ String } # addressPrefix
    nextHopType::Nullable{ String } # nextHopType
    nextHopIpAddress::Nullable{ String } # nextHopIpAddress
    provisioningState::Nullable{ String } # provisioningState

    function RoutePropertiesFormat(;addressPrefix=nothing, nextHopType=nothing, nextHopIpAddress=nothing, provisioningState=nothing)
        o = new()
        set_field!(o, :addressPrefix, addressPrefix)
        set_field!(o, :nextHopType, nextHopType)
        set_field!(o, :nextHopIpAddress, nextHopIpAddress)
        set_field!(o, :provisioningState, provisioningState)
        o
    end
end # type RoutePropertiesFormat

const _name_map_RoutePropertiesFormat = Dict{String,Symbol}(["addressPrefix"=>:addressPrefix, "nextHopType"=>:nextHopType, "nextHopIpAddress"=>:nextHopIpAddress, "provisioningState"=>:provisioningState])
const _field_map_RoutePropertiesFormat = Dict{Symbol,String}([:addressPrefix=>"addressPrefix", :nextHopType=>"nextHopType", :nextHopIpAddress=>"nextHopIpAddress", :provisioningState=>"provisioningState"])
Swagger.name_map(::Type{ RoutePropertiesFormat }) = _name_map_RoutePropertiesFormat
Swagger.field_map(::Type{ RoutePropertiesFormat }) = _field_map_RoutePropertiesFormat

const _allowed_RoutePropertiesFormat_nextHopType = ["VirtualNetworkGateway", "VnetLocal", "Internet", "VirtualAppliance", "None"]

function check_required(o::RoutePropertiesFormat)
    true
end

function validate_field(o::RoutePropertiesFormat, name::Symbol, val)
    if name === :nextHopType
        Swagger.validate_param(name, "RoutePropertiesFormat", :enum, val, _allowed_RoutePropertiesFormat_nextHopType)
    end
end
