# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

type LoadBalancingRulePropertiesFormat <: SwaggerModel
    frontendIPConfiguration::Nullable{ SubResource } # frontendIPConfiguration
    backendAddressPool::Nullable{ SubResource } # backendAddressPool
    probe::Nullable{ SubResource } # probe
    protocol::Nullable{ String } # protocol
    loadDistribution::Nullable{ String } # loadDistribution
    frontendPort::Nullable{ Int32 } # frontendPort
    backendPort::Nullable{ Int32 } # backendPort
    idleTimeoutInMinutes::Nullable{ Int32 } # idleTimeoutInMinutes
    enableFloatingIP::Nullable{ Bool } # enableFloatingIP
    provisioningState::Nullable{ String } # provisioningState

    function LoadBalancingRulePropertiesFormat(;frontendIPConfiguration=nothing, backendAddressPool=nothing, probe=nothing, protocol=nothing, loadDistribution=nothing, frontendPort=nothing, backendPort=nothing, idleTimeoutInMinutes=nothing, enableFloatingIP=nothing, provisioningState=nothing)
        o = new()
        set_field!(o, :frontendIPConfiguration, frontendIPConfiguration)
        set_field!(o, :backendAddressPool, backendAddressPool)
        set_field!(o, :probe, probe)
        set_field!(o, :protocol, protocol)
        set_field!(o, :loadDistribution, loadDistribution)
        set_field!(o, :frontendPort, frontendPort)
        set_field!(o, :backendPort, backendPort)
        set_field!(o, :idleTimeoutInMinutes, idleTimeoutInMinutes)
        set_field!(o, :enableFloatingIP, enableFloatingIP)
        set_field!(o, :provisioningState, provisioningState)
        o
    end
end # type LoadBalancingRulePropertiesFormat

const _name_map_LoadBalancingRulePropertiesFormat = Dict{String,Symbol}(["frontendIPConfiguration"=>:frontendIPConfiguration, "backendAddressPool"=>:backendAddressPool, "probe"=>:probe, "protocol"=>:protocol, "loadDistribution"=>:loadDistribution, "frontendPort"=>:frontendPort, "backendPort"=>:backendPort, "idleTimeoutInMinutes"=>:idleTimeoutInMinutes, "enableFloatingIP"=>:enableFloatingIP, "provisioningState"=>:provisioningState])
const _field_map_LoadBalancingRulePropertiesFormat = Dict{Symbol,String}([:frontendIPConfiguration=>"frontendIPConfiguration", :backendAddressPool=>"backendAddressPool", :probe=>"probe", :protocol=>"protocol", :loadDistribution=>"loadDistribution", :frontendPort=>"frontendPort", :backendPort=>"backendPort", :idleTimeoutInMinutes=>"idleTimeoutInMinutes", :enableFloatingIP=>"enableFloatingIP", :provisioningState=>"provisioningState"])
Swagger.name_map(::Type{ LoadBalancingRulePropertiesFormat }) = _name_map_LoadBalancingRulePropertiesFormat
Swagger.field_map(::Type{ LoadBalancingRulePropertiesFormat }) = _field_map_LoadBalancingRulePropertiesFormat

const _allowed_LoadBalancingRulePropertiesFormat_protocol = ["Udp", "Tcp"]

const _allowed_LoadBalancingRulePropertiesFormat_loadDistribution = ["Default", "SourceIP", "SourceIPProtocol"]

function check_required(o::LoadBalancingRulePropertiesFormat)
    isnull(o.frontendPort) && (return false)
    true
end

function validate_field(o::LoadBalancingRulePropertiesFormat, name::Symbol, val)
    if name === :protocol
        Swagger.validate_param(name, "LoadBalancingRulePropertiesFormat", :enum, val, _allowed_LoadBalancingRulePropertiesFormat_protocol)
    end
    if name === :loadDistribution
        Swagger.validate_param(name, "LoadBalancingRulePropertiesFormat", :enum, val, _allowed_LoadBalancingRulePropertiesFormat_loadDistribution)
    end
end
