# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

mutable struct FrontendIPConfigurationPropertiesFormat <: SwaggerModel
    inboundNatRules::Union{ Nothing, Vector{SubResource} } # inboundNatRules
    inboundNatPools::Union{ Nothing, Vector{SubResource} } # inboundNatPools
    outboundNatRules::Union{ Nothing, Vector{SubResource} } # outboundNatRules
    loadBalancingRules::Union{ Nothing, Vector{SubResource} } # loadBalancingRules
    privateIPAddress::Union{ Nothing, String } # privateIPAddress
    privateIPAllocationMethod::Union{ Nothing, String } # privateIPAllocationMethod
    subnet::Union{ Nothing, Subnet } # subnet
    publicIPAddress::Union{ Nothing, PublicIPAddress } # publicIPAddress
    provisioningState::Union{ Nothing, String } # provisioningState

    function FrontendIPConfigurationPropertiesFormat(;inboundNatRules=nothing, inboundNatPools=nothing, outboundNatRules=nothing, loadBalancingRules=nothing, privateIPAddress=nothing, privateIPAllocationMethod=nothing, subnet=nothing, publicIPAddress=nothing, provisioningState=nothing)
        o = new()
        set_field!(o, :inboundNatRules, inboundNatRules)
        set_field!(o, :inboundNatPools, inboundNatPools)
        set_field!(o, :outboundNatRules, outboundNatRules)
        set_field!(o, :loadBalancingRules, loadBalancingRules)
        set_field!(o, :privateIPAddress, privateIPAddress)
        set_field!(o, :privateIPAllocationMethod, privateIPAllocationMethod)
        set_field!(o, :subnet, subnet)
        set_field!(o, :publicIPAddress, publicIPAddress)
        set_field!(o, :provisioningState, provisioningState)
        o
    end
end # type FrontendIPConfigurationPropertiesFormat

const _name_map_FrontendIPConfigurationPropertiesFormat = Dict{String,Symbol}(["inboundNatRules"=>:inboundNatRules, "inboundNatPools"=>:inboundNatPools, "outboundNatRules"=>:outboundNatRules, "loadBalancingRules"=>:loadBalancingRules, "privateIPAddress"=>:privateIPAddress, "privateIPAllocationMethod"=>:privateIPAllocationMethod, "subnet"=>:subnet, "publicIPAddress"=>:publicIPAddress, "provisioningState"=>:provisioningState])
const _field_map_FrontendIPConfigurationPropertiesFormat = Dict{Symbol,String}([:inboundNatRules=>"inboundNatRules", :inboundNatPools=>"inboundNatPools", :outboundNatRules=>"outboundNatRules", :loadBalancingRules=>"loadBalancingRules", :privateIPAddress=>"privateIPAddress", :privateIPAllocationMethod=>"privateIPAllocationMethod", :subnet=>"subnet", :publicIPAddress=>"publicIPAddress", :provisioningState=>"provisioningState"])
Swagger.name_map(::Type{ FrontendIPConfigurationPropertiesFormat }) = _name_map_FrontendIPConfigurationPropertiesFormat
Swagger.field_map(::Type{ FrontendIPConfigurationPropertiesFormat }) = _field_map_FrontendIPConfigurationPropertiesFormat

const _allowed_FrontendIPConfigurationPropertiesFormat_privateIPAllocationMethod = ["Static", "Dynamic"]

function check_required(o::FrontendIPConfigurationPropertiesFormat)
    true
end

function validate_field(o::FrontendIPConfigurationPropertiesFormat, name::Symbol, val)
    if name === :privateIPAllocationMethod
        Swagger.validate_param(name, "FrontendIPConfigurationPropertiesFormat", :enum, val, _allowed_FrontendIPConfigurationPropertiesFormat_privateIPAllocationMethod)
    end
end
