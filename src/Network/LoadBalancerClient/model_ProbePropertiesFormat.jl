# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

mutable struct ProbePropertiesFormat <: SwaggerModel
    loadBalancingRules::Union{ Nothing, Vector{SubResource} } # loadBalancingRules
    protocol::Union{ Nothing, String } # protocol
    port::Union{ Nothing, Int32 } # port
    intervalInSeconds::Union{ Nothing, Int32 } # intervalInSeconds
    numberOfProbes::Union{ Nothing, Int32 } # numberOfProbes
    requestPath::Union{ Nothing, String } # requestPath
    provisioningState::Union{ Nothing, String } # provisioningState

    function ProbePropertiesFormat(;loadBalancingRules=nothing, protocol=nothing, port=nothing, intervalInSeconds=nothing, numberOfProbes=nothing, requestPath=nothing, provisioningState=nothing)
        o = new()
        set_field!(o, :loadBalancingRules, loadBalancingRules)
        set_field!(o, :protocol, protocol)
        set_field!(o, :port, port)
        set_field!(o, :intervalInSeconds, intervalInSeconds)
        set_field!(o, :numberOfProbes, numberOfProbes)
        set_field!(o, :requestPath, requestPath)
        set_field!(o, :provisioningState, provisioningState)
        o
    end
end # type ProbePropertiesFormat

const _name_map_ProbePropertiesFormat = Dict{String,Symbol}(["loadBalancingRules"=>:loadBalancingRules, "protocol"=>:protocol, "port"=>:port, "intervalInSeconds"=>:intervalInSeconds, "numberOfProbes"=>:numberOfProbes, "requestPath"=>:requestPath, "provisioningState"=>:provisioningState])
const _field_map_ProbePropertiesFormat = Dict{Symbol,String}([:loadBalancingRules=>"loadBalancingRules", :protocol=>"protocol", :port=>"port", :intervalInSeconds=>"intervalInSeconds", :numberOfProbes=>"numberOfProbes", :requestPath=>"requestPath", :provisioningState=>"provisioningState"])
Swagger.name_map(::Type{ ProbePropertiesFormat }) = _name_map_ProbePropertiesFormat
Swagger.field_map(::Type{ ProbePropertiesFormat }) = _field_map_ProbePropertiesFormat

const _allowed_ProbePropertiesFormat_protocol = ["Http", "Tcp"]

function check_required(o::ProbePropertiesFormat)
    (o.port === nothing) && (return false)
    true
end

function validate_field(o::ProbePropertiesFormat, name::Symbol, val)
    if name === :protocol
        Swagger.validate_param(name, "ProbePropertiesFormat", :enum, val, _allowed_ProbePropertiesFormat_protocol)
    end
end
