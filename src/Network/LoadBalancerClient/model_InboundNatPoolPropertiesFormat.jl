# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

type InboundNatPoolPropertiesFormat <: SwaggerModel
    frontendIPConfiguration::Nullable{ SubResource } # frontendIPConfiguration
    protocol::Nullable{ String } # protocol
    frontendPortRangeStart::Nullable{ Int32 } # frontendPortRangeStart
    frontendPortRangeEnd::Nullable{ Int32 } # frontendPortRangeEnd
    backendPort::Nullable{ Int32 } # backendPort
    provisioningState::Nullable{ String } # provisioningState

    function InboundNatPoolPropertiesFormat(;frontendIPConfiguration=nothing, protocol=nothing, frontendPortRangeStart=nothing, frontendPortRangeEnd=nothing, backendPort=nothing, provisioningState=nothing)
        o = new()
        set_field!(o, :frontendIPConfiguration, frontendIPConfiguration)
        set_field!(o, :protocol, protocol)
        set_field!(o, :frontendPortRangeStart, frontendPortRangeStart)
        set_field!(o, :frontendPortRangeEnd, frontendPortRangeEnd)
        set_field!(o, :backendPort, backendPort)
        set_field!(o, :provisioningState, provisioningState)
        o
    end
end # type InboundNatPoolPropertiesFormat

const _name_map_InboundNatPoolPropertiesFormat = Dict{String,Symbol}(["frontendIPConfiguration"=>:frontendIPConfiguration, "protocol"=>:protocol, "frontendPortRangeStart"=>:frontendPortRangeStart, "frontendPortRangeEnd"=>:frontendPortRangeEnd, "backendPort"=>:backendPort, "provisioningState"=>:provisioningState])
const _field_map_InboundNatPoolPropertiesFormat = Dict{Symbol,String}([:frontendIPConfiguration=>"frontendIPConfiguration", :protocol=>"protocol", :frontendPortRangeStart=>"frontendPortRangeStart", :frontendPortRangeEnd=>"frontendPortRangeEnd", :backendPort=>"backendPort", :provisioningState=>"provisioningState"])
Swagger.name_map(::Type{ InboundNatPoolPropertiesFormat }) = _name_map_InboundNatPoolPropertiesFormat
Swagger.field_map(::Type{ InboundNatPoolPropertiesFormat }) = _field_map_InboundNatPoolPropertiesFormat

const _allowed_InboundNatPoolPropertiesFormat_protocol = ["Udp", "Tcp"]

function check_required(o::InboundNatPoolPropertiesFormat)
    isnull(o.frontendPortRangeStart) && (return false)
    isnull(o.frontendPortRangeEnd) && (return false)
    isnull(o.backendPort) && (return false)
    true
end

function validate_field(o::InboundNatPoolPropertiesFormat, name::Symbol, val)
    if name === :protocol
        Swagger.validate_param(name, "InboundNatPoolPropertiesFormat", :enum, val, _allowed_InboundNatPoolPropertiesFormat_protocol)
    end
end
