# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

type ConnectivityInformation <: SwaggerModel
    hops::Nullable{ Vector{ConnectivityHop} } # hops
    connectionStatus::Nullable{ String } # connectionStatus
    avgLatencyInMs::Nullable{ Int32 } # avgLatencyInMs
    minLatencyInMs::Nullable{ Int32 } # minLatencyInMs
    maxLatencyInMs::Nullable{ Int32 } # maxLatencyInMs
    probesSent::Nullable{ Int32 } # probesSent
    probesFailed::Nullable{ Int32 } # probesFailed

    function ConnectivityInformation(;hops=nothing, connectionStatus=nothing, avgLatencyInMs=nothing, minLatencyInMs=nothing, maxLatencyInMs=nothing, probesSent=nothing, probesFailed=nothing)
        o = new()
        set_field!(o, :hops, hops)
        set_field!(o, :connectionStatus, connectionStatus)
        set_field!(o, :avgLatencyInMs, avgLatencyInMs)
        set_field!(o, :minLatencyInMs, minLatencyInMs)
        set_field!(o, :maxLatencyInMs, maxLatencyInMs)
        set_field!(o, :probesSent, probesSent)
        set_field!(o, :probesFailed, probesFailed)
        o
    end
end # type ConnectivityInformation

const _name_map_ConnectivityInformation = Dict{String,Symbol}(["hops"=>:hops, "connectionStatus"=>:connectionStatus, "avgLatencyInMs"=>:avgLatencyInMs, "minLatencyInMs"=>:minLatencyInMs, "maxLatencyInMs"=>:maxLatencyInMs, "probesSent"=>:probesSent, "probesFailed"=>:probesFailed])
const _field_map_ConnectivityInformation = Dict{Symbol,String}([:hops=>"hops", :connectionStatus=>"connectionStatus", :avgLatencyInMs=>"avgLatencyInMs", :minLatencyInMs=>"minLatencyInMs", :maxLatencyInMs=>"maxLatencyInMs", :probesSent=>"probesSent", :probesFailed=>"probesFailed"])
Swagger.name_map(::Type{ ConnectivityInformation }) = _name_map_ConnectivityInformation
Swagger.field_map(::Type{ ConnectivityInformation }) = _field_map_ConnectivityInformation

const _allowed_ConnectivityInformation_connectionStatus = ["Unknown", "Connected", "Disconnected", "Degraded"]

function check_required(o::ConnectivityInformation)
    true
end

function validate_field(o::ConnectivityInformation, name::Symbol, val)
    if name === :connectionStatus
        Swagger.validate_param(name, "ConnectivityInformation", :enum, val, _allowed_ConnectivityInformation_connectionStatus)
    end
end
