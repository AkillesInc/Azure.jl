# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct ConnectionMonitorEndpointFilter <: SwaggerModel
    type::Any # spec type: Union{ Nothing, String } # spec name: type
    items::Any # spec type: Union{ Nothing, Vector{ConnectionMonitorEndpointFilterItem} } # spec name: items

    function ConnectionMonitorEndpointFilter(;type=nothing, items=nothing)
        o = new()
        validate_property(ConnectionMonitorEndpointFilter, Symbol("type"), type)
        setfield!(o, Symbol("type"), type)
        validate_property(ConnectionMonitorEndpointFilter, Symbol("items"), items)
        setfield!(o, Symbol("items"), items)
        o
    end
end # type ConnectionMonitorEndpointFilter

const _property_map_ConnectionMonitorEndpointFilter = Dict{Symbol,Symbol}(Symbol("type")=>Symbol("type"), Symbol("items")=>Symbol("items"))
const _property_types_ConnectionMonitorEndpointFilter = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("items")=>"Vector{ConnectionMonitorEndpointFilterItem}")
Base.propertynames(::Type{ ConnectionMonitorEndpointFilter }) = collect(keys(_property_map_ConnectionMonitorEndpointFilter))
Swagger.property_type(::Type{ ConnectionMonitorEndpointFilter }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ConnectionMonitorEndpointFilter[name]))}
Swagger.field_name(::Type{ ConnectionMonitorEndpointFilter }, property_name::Symbol) =  _property_map_ConnectionMonitorEndpointFilter[property_name]

const _allowed_ConnectionMonitorEndpointFilter_type = ["Include"]

function check_required(o::ConnectionMonitorEndpointFilter)
    true
end

function validate_property(::Type{ ConnectionMonitorEndpointFilter }, name::Symbol, val)
    if name === Symbol("type")
        Swagger.validate_param(name, "ConnectionMonitorEndpointFilter", :enum, val, _allowed_ConnectionMonitorEndpointFilter_type)
    end
end
