# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct ConnectionMonitorEndpoint <: SwaggerModel
    name::Any # spec type: Union{ Nothing, String } # spec name: name
    resourceId::Any # spec type: Union{ Nothing, String } # spec name: resourceId
    address::Any # spec type: Union{ Nothing, String } # spec name: address
    filter::Any # spec type: Union{ Nothing, ConnectionMonitorEndpointFilter } # spec name: filter

    function ConnectionMonitorEndpoint(;name=nothing, resourceId=nothing, address=nothing, filter=nothing)
        o = new()
        validate_property(ConnectionMonitorEndpoint, Symbol("name"), name)
        setfield!(o, Symbol("name"), name)
        validate_property(ConnectionMonitorEndpoint, Symbol("resourceId"), resourceId)
        setfield!(o, Symbol("resourceId"), resourceId)
        validate_property(ConnectionMonitorEndpoint, Symbol("address"), address)
        setfield!(o, Symbol("address"), address)
        validate_property(ConnectionMonitorEndpoint, Symbol("filter"), filter)
        setfield!(o, Symbol("filter"), filter)
        o
    end
end # type ConnectionMonitorEndpoint

const _property_map_ConnectionMonitorEndpoint = Dict{Symbol,Symbol}(Symbol("name")=>Symbol("name"), Symbol("resourceId")=>Symbol("resourceId"), Symbol("address")=>Symbol("address"), Symbol("filter")=>Symbol("filter"))
const _property_types_ConnectionMonitorEndpoint = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("resourceId")=>"String", Symbol("address")=>"String", Symbol("filter")=>"ConnectionMonitorEndpointFilter")
Base.propertynames(::Type{ ConnectionMonitorEndpoint }) = collect(keys(_property_map_ConnectionMonitorEndpoint))
Swagger.property_type(::Type{ ConnectionMonitorEndpoint }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ConnectionMonitorEndpoint[name]))}
Swagger.field_name(::Type{ ConnectionMonitorEndpoint }, property_name::Symbol) =  _property_map_ConnectionMonitorEndpoint[property_name]

function check_required(o::ConnectionMonitorEndpoint)
    (getproperty(o, Symbol("name")) === nothing) && (return false)
    true
end

function validate_property(::Type{ ConnectionMonitorEndpoint }, name::Symbol, val)
end
