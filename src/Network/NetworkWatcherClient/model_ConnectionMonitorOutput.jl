# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct ConnectionMonitorOutput <: SwaggerModel
    type::Any # spec type: Union{ Nothing, String } # spec name: type
    workspaceSettings::Any # spec type: Union{ Nothing, ConnectionMonitorWorkspaceSettings } # spec name: workspaceSettings

    function ConnectionMonitorOutput(;type=nothing, workspaceSettings=nothing)
        o = new()
        validate_property(ConnectionMonitorOutput, Symbol("type"), type)
        setfield!(o, Symbol("type"), type)
        validate_property(ConnectionMonitorOutput, Symbol("workspaceSettings"), workspaceSettings)
        setfield!(o, Symbol("workspaceSettings"), workspaceSettings)
        o
    end
end # type ConnectionMonitorOutput

const _property_map_ConnectionMonitorOutput = Dict{Symbol,Symbol}(Symbol("type")=>Symbol("type"), Symbol("workspaceSettings")=>Symbol("workspaceSettings"))
const _property_types_ConnectionMonitorOutput = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("workspaceSettings")=>"ConnectionMonitorWorkspaceSettings")
Base.propertynames(::Type{ ConnectionMonitorOutput }) = collect(keys(_property_map_ConnectionMonitorOutput))
Swagger.property_type(::Type{ ConnectionMonitorOutput }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ConnectionMonitorOutput[name]))}
Swagger.field_name(::Type{ ConnectionMonitorOutput }, property_name::Symbol) =  _property_map_ConnectionMonitorOutput[property_name]

const _allowed_ConnectionMonitorOutput_type = ["Workspace"]

function check_required(o::ConnectionMonitorOutput)
    true
end

function validate_property(::Type{ ConnectionMonitorOutput }, name::Symbol, val)
    if name === Symbol("type")
        Swagger.validate_param(name, "ConnectionMonitorOutput", :enum, val, _allowed_ConnectionMonitorOutput_type)
    end
end
