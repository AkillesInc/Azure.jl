# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct AvailableProvidersList <: SwaggerModel
    countries::Any # spec type: Union{ Nothing, Vector{AvailableProvidersListCountry} } # spec name: countries

    function AvailableProvidersList(;countries=nothing)
        o = new()
        validate_property(AvailableProvidersList, Symbol("countries"), countries)
        setfield!(o, Symbol("countries"), countries)
        o
    end
end # type AvailableProvidersList

const _property_map_AvailableProvidersList = Dict{Symbol,Symbol}(Symbol("countries")=>Symbol("countries"))
const _property_types_AvailableProvidersList = Dict{Symbol,String}(Symbol("countries")=>"Vector{AvailableProvidersListCountry}")
Base.propertynames(::Type{ AvailableProvidersList }) = collect(keys(_property_map_AvailableProvidersList))
Swagger.property_type(::Type{ AvailableProvidersList }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AvailableProvidersList[name]))}
Swagger.field_name(::Type{ AvailableProvidersList }, property_name::Symbol) =  _property_map_AvailableProvidersList[property_name]

function check_required(o::AvailableProvidersList)
    (getproperty(o, Symbol("countries")) === nothing) && (return false)
    true
end

function validate_property(::Type{ AvailableProvidersList }, name::Symbol, val)
end
