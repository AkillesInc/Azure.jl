# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct NetworkConfigurationDiagnosticResult <: SwaggerModel
    profile::Any # spec type: Union{ Nothing, NetworkConfigurationDiagnosticProfile } # spec name: profile
    networkSecurityGroupResult::Any # spec type: Union{ Nothing, NetworkSecurityGroupResult } # spec name: networkSecurityGroupResult

    function NetworkConfigurationDiagnosticResult(;profile=nothing, networkSecurityGroupResult=nothing)
        o = new()
        validate_property(NetworkConfigurationDiagnosticResult, Symbol("profile"), profile)
        setfield!(o, Symbol("profile"), profile)
        validate_property(NetworkConfigurationDiagnosticResult, Symbol("networkSecurityGroupResult"), networkSecurityGroupResult)
        setfield!(o, Symbol("networkSecurityGroupResult"), networkSecurityGroupResult)
        o
    end
end # type NetworkConfigurationDiagnosticResult

const _property_map_NetworkConfigurationDiagnosticResult = Dict{Symbol,Symbol}(Symbol("profile")=>Symbol("profile"), Symbol("networkSecurityGroupResult")=>Symbol("networkSecurityGroupResult"))
const _property_types_NetworkConfigurationDiagnosticResult = Dict{Symbol,String}(Symbol("profile")=>"NetworkConfigurationDiagnosticProfile", Symbol("networkSecurityGroupResult")=>"NetworkSecurityGroupResult")
Base.propertynames(::Type{ NetworkConfigurationDiagnosticResult }) = collect(keys(_property_map_NetworkConfigurationDiagnosticResult))
Swagger.property_type(::Type{ NetworkConfigurationDiagnosticResult }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_NetworkConfigurationDiagnosticResult[name]))}
Swagger.field_name(::Type{ NetworkConfigurationDiagnosticResult }, property_name::Symbol) =  _property_map_NetworkConfigurationDiagnosticResult[property_name]

function check_required(o::NetworkConfigurationDiagnosticResult)
    true
end

function validate_property(::Type{ NetworkConfigurationDiagnosticResult }, name::Symbol, val)
end
