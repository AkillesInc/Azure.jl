# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct ConnectionMonitorResultProperties <: SwaggerModel
    source::Any # spec type: Union{ Nothing, ConnectionMonitorSource } # spec name: source
    destination::Any # spec type: Union{ Nothing, ConnectionMonitorDestination } # spec name: destination
    autoStart::Any # spec type: Union{ Nothing, Bool } # spec name: autoStart
    monitoringIntervalInSeconds::Any # spec type: Union{ Nothing, Int32 } # spec name: monitoringIntervalInSeconds
    endpoints::Any # spec type: Union{ Nothing, Vector{ConnectionMonitorEndpoint} } # spec name: endpoints
    testConfigurations::Any # spec type: Union{ Nothing, Vector{ConnectionMonitorTestConfiguration} } # spec name: testConfigurations
    testGroups::Any # spec type: Union{ Nothing, Vector{ConnectionMonitorTestGroup} } # spec name: testGroups
    outputs::Any # spec type: Union{ Nothing, Vector{ConnectionMonitorOutput} } # spec name: outputs
    notes::Any # spec type: Union{ Nothing, String } # spec name: notes

    function ConnectionMonitorResultProperties(;source=nothing, destination=nothing, autoStart=true, monitoringIntervalInSeconds=nothing, endpoints=nothing, testConfigurations=nothing, testGroups=nothing, outputs=nothing, notes=nothing)
        o = new()
        validate_property(ConnectionMonitorResultProperties, Symbol("source"), source)
        setfield!(o, Symbol("source"), source)
        validate_property(ConnectionMonitorResultProperties, Symbol("destination"), destination)
        setfield!(o, Symbol("destination"), destination)
        validate_property(ConnectionMonitorResultProperties, Symbol("autoStart"), autoStart)
        setfield!(o, Symbol("autoStart"), autoStart)
        validate_property(ConnectionMonitorResultProperties, Symbol("monitoringIntervalInSeconds"), monitoringIntervalInSeconds)
        setfield!(o, Symbol("monitoringIntervalInSeconds"), monitoringIntervalInSeconds)
        validate_property(ConnectionMonitorResultProperties, Symbol("endpoints"), endpoints)
        setfield!(o, Symbol("endpoints"), endpoints)
        validate_property(ConnectionMonitorResultProperties, Symbol("testConfigurations"), testConfigurations)
        setfield!(o, Symbol("testConfigurations"), testConfigurations)
        validate_property(ConnectionMonitorResultProperties, Symbol("testGroups"), testGroups)
        setfield!(o, Symbol("testGroups"), testGroups)
        validate_property(ConnectionMonitorResultProperties, Symbol("outputs"), outputs)
        setfield!(o, Symbol("outputs"), outputs)
        validate_property(ConnectionMonitorResultProperties, Symbol("notes"), notes)
        setfield!(o, Symbol("notes"), notes)
        o
    end
end # type ConnectionMonitorResultProperties

const _property_map_ConnectionMonitorResultProperties = Dict{Symbol,Symbol}(Symbol("source")=>Symbol("source"), Symbol("destination")=>Symbol("destination"), Symbol("autoStart")=>Symbol("autoStart"), Symbol("monitoringIntervalInSeconds")=>Symbol("monitoringIntervalInSeconds"), Symbol("endpoints")=>Symbol("endpoints"), Symbol("testConfigurations")=>Symbol("testConfigurations"), Symbol("testGroups")=>Symbol("testGroups"), Symbol("outputs")=>Symbol("outputs"), Symbol("notes")=>Symbol("notes"))
const _property_types_ConnectionMonitorResultProperties = Dict{Symbol,String}(Symbol("source")=>"ConnectionMonitorSource", Symbol("destination")=>"ConnectionMonitorDestination", Symbol("autoStart")=>"Bool", Symbol("monitoringIntervalInSeconds")=>"Int32", Symbol("endpoints")=>"Vector{ConnectionMonitorEndpoint}", Symbol("testConfigurations")=>"Vector{ConnectionMonitorTestConfiguration}", Symbol("testGroups")=>"Vector{ConnectionMonitorTestGroup}", Symbol("outputs")=>"Vector{ConnectionMonitorOutput}", Symbol("notes")=>"String")
Base.propertynames(::Type{ ConnectionMonitorResultProperties }) = collect(keys(_property_map_ConnectionMonitorResultProperties))
Swagger.property_type(::Type{ ConnectionMonitorResultProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ConnectionMonitorResultProperties[name]))}
Swagger.field_name(::Type{ ConnectionMonitorResultProperties }, property_name::Symbol) =  _property_map_ConnectionMonitorResultProperties[property_name]

function check_required(o::ConnectionMonitorResultProperties)
    true
end

function validate_property(::Type{ ConnectionMonitorResultProperties }, name::Symbol, val)
end
