# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct NetworkSecurityRulesEvaluationResult <: SwaggerModel
    name::Any # spec type: Union{ Nothing, String } # spec name: name
    protocolMatched::Any # spec type: Union{ Nothing, Bool } # spec name: protocolMatched
    sourceMatched::Any # spec type: Union{ Nothing, Bool } # spec name: sourceMatched
    sourcePortMatched::Any # spec type: Union{ Nothing, Bool } # spec name: sourcePortMatched
    destinationMatched::Any # spec type: Union{ Nothing, Bool } # spec name: destinationMatched
    destinationPortMatched::Any # spec type: Union{ Nothing, Bool } # spec name: destinationPortMatched

    function NetworkSecurityRulesEvaluationResult(;name=nothing, protocolMatched=nothing, sourceMatched=nothing, sourcePortMatched=nothing, destinationMatched=nothing, destinationPortMatched=nothing)
        o = new()
        validate_property(NetworkSecurityRulesEvaluationResult, Symbol("name"), name)
        setfield!(o, Symbol("name"), name)
        validate_property(NetworkSecurityRulesEvaluationResult, Symbol("protocolMatched"), protocolMatched)
        setfield!(o, Symbol("protocolMatched"), protocolMatched)
        validate_property(NetworkSecurityRulesEvaluationResult, Symbol("sourceMatched"), sourceMatched)
        setfield!(o, Symbol("sourceMatched"), sourceMatched)
        validate_property(NetworkSecurityRulesEvaluationResult, Symbol("sourcePortMatched"), sourcePortMatched)
        setfield!(o, Symbol("sourcePortMatched"), sourcePortMatched)
        validate_property(NetworkSecurityRulesEvaluationResult, Symbol("destinationMatched"), destinationMatched)
        setfield!(o, Symbol("destinationMatched"), destinationMatched)
        validate_property(NetworkSecurityRulesEvaluationResult, Symbol("destinationPortMatched"), destinationPortMatched)
        setfield!(o, Symbol("destinationPortMatched"), destinationPortMatched)
        o
    end
end # type NetworkSecurityRulesEvaluationResult

const _property_map_NetworkSecurityRulesEvaluationResult = Dict{Symbol,Symbol}(Symbol("name")=>Symbol("name"), Symbol("protocolMatched")=>Symbol("protocolMatched"), Symbol("sourceMatched")=>Symbol("sourceMatched"), Symbol("sourcePortMatched")=>Symbol("sourcePortMatched"), Symbol("destinationMatched")=>Symbol("destinationMatched"), Symbol("destinationPortMatched")=>Symbol("destinationPortMatched"))
const _property_types_NetworkSecurityRulesEvaluationResult = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("protocolMatched")=>"Bool", Symbol("sourceMatched")=>"Bool", Symbol("sourcePortMatched")=>"Bool", Symbol("destinationMatched")=>"Bool", Symbol("destinationPortMatched")=>"Bool")
Base.propertynames(::Type{ NetworkSecurityRulesEvaluationResult }) = collect(keys(_property_map_NetworkSecurityRulesEvaluationResult))
Swagger.property_type(::Type{ NetworkSecurityRulesEvaluationResult }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_NetworkSecurityRulesEvaluationResult[name]))}
Swagger.field_name(::Type{ NetworkSecurityRulesEvaluationResult }, property_name::Symbol) =  _property_map_NetworkSecurityRulesEvaluationResult[property_name]

function check_required(o::NetworkSecurityRulesEvaluationResult)
    true
end

function validate_property(::Type{ NetworkSecurityRulesEvaluationResult }, name::Symbol, val)
end
