# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct ConnectivityIssue2 <: SwaggerModel
    origin::Any # spec type: Union{ Nothing, String } # spec name: origin
    severity::Any # spec type: Union{ Nothing, String } # spec name: severity
    type::Any # spec type: Union{ Nothing, String } # spec name: type
    context::Any # spec type: Union{ Nothing, Vector{IssueContext2} } # spec name: context

    function ConnectivityIssue2(;origin=nothing, severity=nothing, type=nothing, context=nothing)
        o = new()
        validate_property(ConnectivityIssue2, Symbol("origin"), origin)
        setfield!(o, Symbol("origin"), origin)
        validate_property(ConnectivityIssue2, Symbol("severity"), severity)
        setfield!(o, Symbol("severity"), severity)
        validate_property(ConnectivityIssue2, Symbol("type"), type)
        setfield!(o, Symbol("type"), type)
        validate_property(ConnectivityIssue2, Symbol("context"), context)
        setfield!(o, Symbol("context"), context)
        o
    end
end # type ConnectivityIssue2

const _property_map_ConnectivityIssue2 = Dict{Symbol,Symbol}(Symbol("origin")=>Symbol("origin"), Symbol("severity")=>Symbol("severity"), Symbol("type")=>Symbol("type"), Symbol("context")=>Symbol("context"))
const _property_types_ConnectivityIssue2 = Dict{Symbol,String}(Symbol("origin")=>"String", Symbol("severity")=>"String", Symbol("type")=>"String", Symbol("context")=>"Vector{IssueContext2}")
Base.propertynames(::Type{ ConnectivityIssue2 }) = collect(keys(_property_map_ConnectivityIssue2))
Swagger.property_type(::Type{ ConnectivityIssue2 }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ConnectivityIssue2[name]))}
Swagger.field_name(::Type{ ConnectivityIssue2 }, property_name::Symbol) =  _property_map_ConnectivityIssue2[property_name]

const _allowed_ConnectivityIssue2_origin = ["Local", "Inbound", "Outbound"]

const _allowed_ConnectivityIssue2_severity = ["Error", "Warning"]

const _allowed_ConnectivityIssue2_type = ["Unknown", "AgentStopped", "GuestFirewall", "DnsResolution", "SocketBind", "NetworkSecurityRule", "UserDefinedRoute", "PortThrottled", "Platform"]

function check_required(o::ConnectivityIssue2)
    true
end

function validate_property(::Type{ ConnectivityIssue2 }, name::Symbol, val)
    if name === Symbol("origin")
        Swagger.validate_param(name, "ConnectivityIssue2", :enum, val, _allowed_ConnectivityIssue2_origin)
    end
    if name === Symbol("severity")
        Swagger.validate_param(name, "ConnectivityIssue2", :enum, val, _allowed_ConnectivityIssue2_severity)
    end
    if name === Symbol("type")
        Swagger.validate_param(name, "ConnectivityIssue2", :enum, val, _allowed_ConnectivityIssue2_type)
    end
end
