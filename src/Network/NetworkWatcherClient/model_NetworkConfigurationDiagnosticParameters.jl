# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct NetworkConfigurationDiagnosticParameters <: SwaggerModel
    targetResourceId::Any # spec type: Union{ Nothing, String } # spec name: targetResourceId
    verbosityLevel::Any # spec type: Union{ Nothing, String } # spec name: verbosityLevel
    profiles::Any # spec type: Union{ Nothing, Vector{NetworkConfigurationDiagnosticProfile} } # spec name: profiles

    function NetworkConfigurationDiagnosticParameters(;targetResourceId=nothing, verbosityLevel=nothing, profiles=nothing)
        o = new()
        validate_property(NetworkConfigurationDiagnosticParameters, Symbol("targetResourceId"), targetResourceId)
        setfield!(o, Symbol("targetResourceId"), targetResourceId)
        validate_property(NetworkConfigurationDiagnosticParameters, Symbol("verbosityLevel"), verbosityLevel)
        setfield!(o, Symbol("verbosityLevel"), verbosityLevel)
        validate_property(NetworkConfigurationDiagnosticParameters, Symbol("profiles"), profiles)
        setfield!(o, Symbol("profiles"), profiles)
        o
    end
end # type NetworkConfigurationDiagnosticParameters

const _property_map_NetworkConfigurationDiagnosticParameters = Dict{Symbol,Symbol}(Symbol("targetResourceId")=>Symbol("targetResourceId"), Symbol("verbosityLevel")=>Symbol("verbosityLevel"), Symbol("profiles")=>Symbol("profiles"))
const _property_types_NetworkConfigurationDiagnosticParameters = Dict{Symbol,String}(Symbol("targetResourceId")=>"String", Symbol("verbosityLevel")=>"String", Symbol("profiles")=>"Vector{NetworkConfigurationDiagnosticProfile}")
Base.propertynames(::Type{ NetworkConfigurationDiagnosticParameters }) = collect(keys(_property_map_NetworkConfigurationDiagnosticParameters))
Swagger.property_type(::Type{ NetworkConfigurationDiagnosticParameters }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_NetworkConfigurationDiagnosticParameters[name]))}
Swagger.field_name(::Type{ NetworkConfigurationDiagnosticParameters }, property_name::Symbol) =  _property_map_NetworkConfigurationDiagnosticParameters[property_name]

const _allowed_NetworkConfigurationDiagnosticParameters_verbosityLevel = ["Normal", "Minimum", "Full"]

function check_required(o::NetworkConfigurationDiagnosticParameters)
    (getproperty(o, Symbol("targetResourceId")) === nothing) && (return false)
    (getproperty(o, Symbol("profiles")) === nothing) && (return false)
    true
end

function validate_property(::Type{ NetworkConfigurationDiagnosticParameters }, name::Symbol, val)
    if name === Symbol("verbosityLevel")
        Swagger.validate_param(name, "NetworkConfigurationDiagnosticParameters", :enum, val, _allowed_NetworkConfigurationDiagnosticParameters_verbosityLevel)
    end
end
