# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct MatchedRule <: SwaggerModel
    ruleName::Any # spec type: Union{ Nothing, String } # spec name: ruleName
    action::Any # spec type: Union{ Nothing, String } # spec name: action

    function MatchedRule(;ruleName=nothing, action=nothing)
        o = new()
        validate_property(MatchedRule, Symbol("ruleName"), ruleName)
        setfield!(o, Symbol("ruleName"), ruleName)
        validate_property(MatchedRule, Symbol("action"), action)
        setfield!(o, Symbol("action"), action)
        o
    end
end # type MatchedRule

const _property_map_MatchedRule = Dict{Symbol,Symbol}(Symbol("ruleName")=>Symbol("ruleName"), Symbol("action")=>Symbol("action"))
const _property_types_MatchedRule = Dict{Symbol,String}(Symbol("ruleName")=>"String", Symbol("action")=>"String")
Base.propertynames(::Type{ MatchedRule }) = collect(keys(_property_map_MatchedRule))
Swagger.property_type(::Type{ MatchedRule }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_MatchedRule[name]))}
Swagger.field_name(::Type{ MatchedRule }, property_name::Symbol) =  _property_map_MatchedRule[property_name]

function check_required(o::MatchedRule)
    true
end

function validate_property(::Type{ MatchedRule }, name::Symbol, val)
end
