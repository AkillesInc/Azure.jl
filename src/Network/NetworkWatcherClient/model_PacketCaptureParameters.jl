# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

mutable struct PacketCaptureParameters <: SwaggerModel
    target::Union{ Nothing, String } # target
    bytesToCapturePerPacket::Union{ Nothing, Int32 } # bytesToCapturePerPacket
    totalBytesPerSession::Union{ Nothing, Int32 } # totalBytesPerSession
    timeLimitInSeconds::Union{ Nothing, Int32 } # timeLimitInSeconds
    storageLocation::Union{ Nothing, PacketCaptureStorageLocation } # storageLocation
    filters::Union{ Nothing, Vector{PacketCaptureFilter} } # filters

    function PacketCaptureParameters(;target=nothing, bytesToCapturePerPacket=nothing, totalBytesPerSession=nothing, timeLimitInSeconds=nothing, storageLocation=nothing, filters=nothing)
        o = new()
        set_field!(o, :target, target)
        set_field!(o, :bytesToCapturePerPacket, bytesToCapturePerPacket)
        set_field!(o, :totalBytesPerSession, totalBytesPerSession)
        set_field!(o, :timeLimitInSeconds, timeLimitInSeconds)
        set_field!(o, :storageLocation, storageLocation)
        set_field!(o, :filters, filters)
        o
    end
end # type PacketCaptureParameters

const _name_map_PacketCaptureParameters = Dict{String,Symbol}(["target"=>:target, "bytesToCapturePerPacket"=>:bytesToCapturePerPacket, "totalBytesPerSession"=>:totalBytesPerSession, "timeLimitInSeconds"=>:timeLimitInSeconds, "storageLocation"=>:storageLocation, "filters"=>:filters])
const _field_map_PacketCaptureParameters = Dict{Symbol,String}([:target=>"target", :bytesToCapturePerPacket=>"bytesToCapturePerPacket", :totalBytesPerSession=>"totalBytesPerSession", :timeLimitInSeconds=>"timeLimitInSeconds", :storageLocation=>"storageLocation", :filters=>"filters"])
Swagger.name_map(::Type{ PacketCaptureParameters }) = _name_map_PacketCaptureParameters
Swagger.field_map(::Type{ PacketCaptureParameters }) = _field_map_PacketCaptureParameters

function check_required(o::PacketCaptureParameters)
    (o.target === nothing) && (return false)
    (o.storageLocation === nothing) && (return false)
    true
end

function validate_field(o::PacketCaptureParameters, name::Symbol, val)
end
