# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct ConnectionMonitorTestConfiguration <: SwaggerModel
    name::Any # spec type: Union{ Nothing, String } # spec name: name
    testFrequencySec::Any # spec type: Union{ Nothing, Int32 } # spec name: testFrequencySec
    protocol::Any # spec type: Union{ Nothing, String } # spec name: protocol
    preferredIPVersion::Any # spec type: Union{ Nothing, String } # spec name: preferredIPVersion
    httpConfiguration::Any # spec type: Union{ Nothing, ConnectionMonitorHttpConfiguration } # spec name: httpConfiguration
    tcpConfiguration::Any # spec type: Union{ Nothing, ConnectionMonitorTcpConfiguration } # spec name: tcpConfiguration
    icmpConfiguration::Any # spec type: Union{ Nothing, ConnectionMonitorIcmpConfiguration } # spec name: icmpConfiguration
    successThreshold::Any # spec type: Union{ Nothing, ConnectionMonitorSuccessThreshold } # spec name: successThreshold

    function ConnectionMonitorTestConfiguration(;name=nothing, testFrequencySec=nothing, protocol=nothing, preferredIPVersion=nothing, httpConfiguration=nothing, tcpConfiguration=nothing, icmpConfiguration=nothing, successThreshold=nothing)
        o = new()
        validate_property(ConnectionMonitorTestConfiguration, Symbol("name"), name)
        setfield!(o, Symbol("name"), name)
        validate_property(ConnectionMonitorTestConfiguration, Symbol("testFrequencySec"), testFrequencySec)
        setfield!(o, Symbol("testFrequencySec"), testFrequencySec)
        validate_property(ConnectionMonitorTestConfiguration, Symbol("protocol"), protocol)
        setfield!(o, Symbol("protocol"), protocol)
        validate_property(ConnectionMonitorTestConfiguration, Symbol("preferredIPVersion"), preferredIPVersion)
        setfield!(o, Symbol("preferredIPVersion"), preferredIPVersion)
        validate_property(ConnectionMonitorTestConfiguration, Symbol("httpConfiguration"), httpConfiguration)
        setfield!(o, Symbol("httpConfiguration"), httpConfiguration)
        validate_property(ConnectionMonitorTestConfiguration, Symbol("tcpConfiguration"), tcpConfiguration)
        setfield!(o, Symbol("tcpConfiguration"), tcpConfiguration)
        validate_property(ConnectionMonitorTestConfiguration, Symbol("icmpConfiguration"), icmpConfiguration)
        setfield!(o, Symbol("icmpConfiguration"), icmpConfiguration)
        validate_property(ConnectionMonitorTestConfiguration, Symbol("successThreshold"), successThreshold)
        setfield!(o, Symbol("successThreshold"), successThreshold)
        o
    end
end # type ConnectionMonitorTestConfiguration

const _property_map_ConnectionMonitorTestConfiguration = Dict{Symbol,Symbol}(Symbol("name")=>Symbol("name"), Symbol("testFrequencySec")=>Symbol("testFrequencySec"), Symbol("protocol")=>Symbol("protocol"), Symbol("preferredIPVersion")=>Symbol("preferredIPVersion"), Symbol("httpConfiguration")=>Symbol("httpConfiguration"), Symbol("tcpConfiguration")=>Symbol("tcpConfiguration"), Symbol("icmpConfiguration")=>Symbol("icmpConfiguration"), Symbol("successThreshold")=>Symbol("successThreshold"))
const _property_types_ConnectionMonitorTestConfiguration = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("testFrequencySec")=>"Int32", Symbol("protocol")=>"String", Symbol("preferredIPVersion")=>"String", Symbol("httpConfiguration")=>"ConnectionMonitorHttpConfiguration", Symbol("tcpConfiguration")=>"ConnectionMonitorTcpConfiguration", Symbol("icmpConfiguration")=>"ConnectionMonitorIcmpConfiguration", Symbol("successThreshold")=>"ConnectionMonitorSuccessThreshold")
Base.propertynames(::Type{ ConnectionMonitorTestConfiguration }) = collect(keys(_property_map_ConnectionMonitorTestConfiguration))
Swagger.property_type(::Type{ ConnectionMonitorTestConfiguration }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ConnectionMonitorTestConfiguration[name]))}
Swagger.field_name(::Type{ ConnectionMonitorTestConfiguration }, property_name::Symbol) =  _property_map_ConnectionMonitorTestConfiguration[property_name]

const _allowed_ConnectionMonitorTestConfiguration_protocol = ["Tcp", "Http", "Icmp"]

const _allowed_ConnectionMonitorTestConfiguration_preferredIPVersion = ["IPv4", "IPv6"]

function check_required(o::ConnectionMonitorTestConfiguration)
    (getproperty(o, Symbol("name")) === nothing) && (return false)
    true
end

function validate_property(::Type{ ConnectionMonitorTestConfiguration }, name::Symbol, val)
    if name === Symbol("protocol")
        Swagger.validate_param(name, "ConnectionMonitorTestConfiguration", :enum, val, _allowed_ConnectionMonitorTestConfiguration_protocol)
    end
    if name === Symbol("preferredIPVersion")
        Swagger.validate_param(name, "ConnectionMonitorTestConfiguration", :enum, val, _allowed_ConnectionMonitorTestConfiguration_preferredIPVersion)
    end
end
