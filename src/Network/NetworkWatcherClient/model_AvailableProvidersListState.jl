# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct AvailableProvidersListState <: SwaggerModel
    stateName::Any # spec type: Union{ Nothing, String } # spec name: stateName
    providers::Any # spec type: Union{ Nothing, Vector{String} } # spec name: providers
    cities::Any # spec type: Union{ Nothing, Vector{AvailableProvidersListCity} } # spec name: cities

    function AvailableProvidersListState(;stateName=nothing, providers=nothing, cities=nothing)
        o = new()
        validate_property(AvailableProvidersListState, Symbol("stateName"), stateName)
        setfield!(o, Symbol("stateName"), stateName)
        validate_property(AvailableProvidersListState, Symbol("providers"), providers)
        setfield!(o, Symbol("providers"), providers)
        validate_property(AvailableProvidersListState, Symbol("cities"), cities)
        setfield!(o, Symbol("cities"), cities)
        o
    end
end # type AvailableProvidersListState

const _property_map_AvailableProvidersListState = Dict{Symbol,Symbol}(Symbol("stateName")=>Symbol("stateName"), Symbol("providers")=>Symbol("providers"), Symbol("cities")=>Symbol("cities"))
const _property_types_AvailableProvidersListState = Dict{Symbol,String}(Symbol("stateName")=>"String", Symbol("providers")=>"Vector{String}", Symbol("cities")=>"Vector{AvailableProvidersListCity}")
Base.propertynames(::Type{ AvailableProvidersListState }) = collect(keys(_property_map_AvailableProvidersListState))
Swagger.property_type(::Type{ AvailableProvidersListState }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AvailableProvidersListState[name]))}
Swagger.field_name(::Type{ AvailableProvidersListState }, property_name::Symbol) =  _property_map_AvailableProvidersListState[property_name]

function check_required(o::AvailableProvidersListState)
    true
end

function validate_property(::Type{ AvailableProvidersListState }, name::Symbol, val)
end
