# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

mutable struct ConnectivityIssue <: SwaggerModel
    origin::Union{ Nothing, String } # origin
    severity::Union{ Nothing, String } # severity
    _type::Union{ Nothing, String } # type
    context::Union{ Nothing, Vector{IssueContext} } # context

    function ConnectivityIssue(;origin=nothing, severity=nothing, _type=nothing, context=nothing)
        o = new()
        set_field!(o, :origin, origin)
        set_field!(o, :severity, severity)
        set_field!(o, :_type, _type)
        set_field!(o, :context, context)
        o
    end
end # type ConnectivityIssue

const _name_map_ConnectivityIssue = Dict{String,Symbol}(["origin"=>:origin, "severity"=>:severity, "type"=>:_type, "context"=>:context])
const _field_map_ConnectivityIssue = Dict{Symbol,String}([:origin=>"origin", :severity=>"severity", :_type=>"type", :context=>"context"])
Swagger.name_map(::Type{ ConnectivityIssue }) = _name_map_ConnectivityIssue
Swagger.field_map(::Type{ ConnectivityIssue }) = _field_map_ConnectivityIssue

const _allowed_ConnectivityIssue_origin = ["Local", "Inbound", "Outbound"]

const _allowed_ConnectivityIssue_severity = ["Error", "Warning"]

const _allowed_ConnectivityIssue__type = ["Unknown", "AgentStopped", "GuestFirewall", "DnsResolution", "SocketBind", "NetworkSecurityRule", "UserDefinedRoute", "PortThrottled", "Platform"]

function check_required(o::ConnectivityIssue)
    true
end

function validate_field(o::ConnectivityIssue, name::Symbol, val)
    if name === :origin
        Swagger.validate_param(name, "ConnectivityIssue", :enum, val, _allowed_ConnectivityIssue_origin)
    end
    if name === :severity
        Swagger.validate_param(name, "ConnectivityIssue", :enum, val, _allowed_ConnectivityIssue_severity)
    end
    if name === :_type
        Swagger.validate_param(name, "ConnectivityIssue", :enum, val, _allowed_ConnectivityIssue__type)
    end
end
