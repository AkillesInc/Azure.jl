# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct AzureReachabilityReportItem <: SwaggerModel
    provider::Any # spec type: Union{ Nothing, String } # spec name: provider
    azureLocation::Any # spec type: Union{ Nothing, String } # spec name: azureLocation
    latencies::Any # spec type: Union{ Nothing, Vector{AzureReachabilityReportLatencyInfo} } # spec name: latencies

    function AzureReachabilityReportItem(;provider=nothing, azureLocation=nothing, latencies=nothing)
        o = new()
        validate_property(AzureReachabilityReportItem, Symbol("provider"), provider)
        setfield!(o, Symbol("provider"), provider)
        validate_property(AzureReachabilityReportItem, Symbol("azureLocation"), azureLocation)
        setfield!(o, Symbol("azureLocation"), azureLocation)
        validate_property(AzureReachabilityReportItem, Symbol("latencies"), latencies)
        setfield!(o, Symbol("latencies"), latencies)
        o
    end
end # type AzureReachabilityReportItem

const _property_map_AzureReachabilityReportItem = Dict{Symbol,Symbol}(Symbol("provider")=>Symbol("provider"), Symbol("azureLocation")=>Symbol("azureLocation"), Symbol("latencies")=>Symbol("latencies"))
const _property_types_AzureReachabilityReportItem = Dict{Symbol,String}(Symbol("provider")=>"String", Symbol("azureLocation")=>"String", Symbol("latencies")=>"Vector{AzureReachabilityReportLatencyInfo}")
Base.propertynames(::Type{ AzureReachabilityReportItem }) = collect(keys(_property_map_AzureReachabilityReportItem))
Swagger.property_type(::Type{ AzureReachabilityReportItem }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AzureReachabilityReportItem[name]))}
Swagger.field_name(::Type{ AzureReachabilityReportItem }, property_name::Symbol) =  _property_map_AzureReachabilityReportItem[property_name]

function check_required(o::AzureReachabilityReportItem)
    true
end

function validate_property(::Type{ AzureReachabilityReportItem }, name::Symbol, val)
end
