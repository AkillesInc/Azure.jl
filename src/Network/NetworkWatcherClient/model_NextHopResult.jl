# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

mutable struct NextHopResult <: SwaggerModel
    nextHopType::Union{ Nothing, String } # nextHopType
    nextHopIpAddress::Union{ Nothing, String } # nextHopIpAddress
    routeTableId::Union{ Nothing, String } # routeTableId

    function NextHopResult(;nextHopType=nothing, nextHopIpAddress=nothing, routeTableId=nothing)
        o = new()
        set_field!(o, :nextHopType, nextHopType)
        set_field!(o, :nextHopIpAddress, nextHopIpAddress)
        set_field!(o, :routeTableId, routeTableId)
        o
    end
end # type NextHopResult

const _name_map_NextHopResult = Dict{String,Symbol}(["nextHopType"=>:nextHopType, "nextHopIpAddress"=>:nextHopIpAddress, "routeTableId"=>:routeTableId])
const _field_map_NextHopResult = Dict{Symbol,String}([:nextHopType=>"nextHopType", :nextHopIpAddress=>"nextHopIpAddress", :routeTableId=>"routeTableId"])
Swagger.name_map(::Type{ NextHopResult }) = _name_map_NextHopResult
Swagger.field_map(::Type{ NextHopResult }) = _field_map_NextHopResult

const _allowed_NextHopResult_nextHopType = ["Internet", "VirtualAppliance", "VirtualNetworkGateway", "VnetLocal", "HyperNetGateway", "None"]

function check_required(o::NextHopResult)
    true
end

function validate_field(o::NextHopResult, name::Symbol, val)
    if name === :nextHopType
        Swagger.validate_param(name, "NextHopResult", :enum, val, _allowed_NextHopResult_nextHopType)
    end
end
