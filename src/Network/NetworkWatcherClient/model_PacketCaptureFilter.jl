# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

mutable struct PacketCaptureFilter <: SwaggerModel
    protocol::Union{ Nothing, String } # protocol
    localIPAddress::Union{ Nothing, String } # localIPAddress
    remoteIPAddress::Union{ Nothing, String } # remoteIPAddress
    localPort::Union{ Nothing, String } # localPort
    remotePort::Union{ Nothing, String } # remotePort

    function PacketCaptureFilter(;protocol="Any", localIPAddress=nothing, remoteIPAddress=nothing, localPort=nothing, remotePort=nothing)
        o = new()
        set_field!(o, :protocol, protocol)
        set_field!(o, :localIPAddress, localIPAddress)
        set_field!(o, :remoteIPAddress, remoteIPAddress)
        set_field!(o, :localPort, localPort)
        set_field!(o, :remotePort, remotePort)
        o
    end
end # type PacketCaptureFilter

const _name_map_PacketCaptureFilter = Dict{String,Symbol}(["protocol"=>:protocol, "localIPAddress"=>:localIPAddress, "remoteIPAddress"=>:remoteIPAddress, "localPort"=>:localPort, "remotePort"=>:remotePort])
const _field_map_PacketCaptureFilter = Dict{Symbol,String}([:protocol=>"protocol", :localIPAddress=>"localIPAddress", :remoteIPAddress=>"remoteIPAddress", :localPort=>"localPort", :remotePort=>"remotePort"])
Swagger.name_map(::Type{ PacketCaptureFilter }) = _name_map_PacketCaptureFilter
Swagger.field_map(::Type{ PacketCaptureFilter }) = _field_map_PacketCaptureFilter

const _allowed_PacketCaptureFilter_protocol = ["TCP", "UDP", "Any"]

function check_required(o::PacketCaptureFilter)
    true
end

function validate_field(o::PacketCaptureFilter, name::Symbol, val)
    if name === :protocol
        Swagger.validate_param(name, "PacketCaptureFilter", :enum, val, _allowed_PacketCaptureFilter_protocol)
    end
end
