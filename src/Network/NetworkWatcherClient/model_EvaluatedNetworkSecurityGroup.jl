# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct EvaluatedNetworkSecurityGroup <: SwaggerModel
    networkSecurityGroupId::Any # spec type: Union{ Nothing, String } # spec name: networkSecurityGroupId
    appliedTo::Any # spec type: Union{ Nothing, String } # spec name: appliedTo
    matchedRule::Any # spec type: Union{ Nothing, MatchedRule } # spec name: matchedRule
    rulesEvaluationResult::Any # spec type: Union{ Nothing, Vector{NetworkSecurityRulesEvaluationResult} } # spec name: rulesEvaluationResult

    function EvaluatedNetworkSecurityGroup(;networkSecurityGroupId=nothing, appliedTo=nothing, matchedRule=nothing, rulesEvaluationResult=nothing)
        o = new()
        validate_property(EvaluatedNetworkSecurityGroup, Symbol("networkSecurityGroupId"), networkSecurityGroupId)
        setfield!(o, Symbol("networkSecurityGroupId"), networkSecurityGroupId)
        validate_property(EvaluatedNetworkSecurityGroup, Symbol("appliedTo"), appliedTo)
        setfield!(o, Symbol("appliedTo"), appliedTo)
        validate_property(EvaluatedNetworkSecurityGroup, Symbol("matchedRule"), matchedRule)
        setfield!(o, Symbol("matchedRule"), matchedRule)
        validate_property(EvaluatedNetworkSecurityGroup, Symbol("rulesEvaluationResult"), rulesEvaluationResult)
        setfield!(o, Symbol("rulesEvaluationResult"), rulesEvaluationResult)
        o
    end
end # type EvaluatedNetworkSecurityGroup

const _property_map_EvaluatedNetworkSecurityGroup = Dict{Symbol,Symbol}(Symbol("networkSecurityGroupId")=>Symbol("networkSecurityGroupId"), Symbol("appliedTo")=>Symbol("appliedTo"), Symbol("matchedRule")=>Symbol("matchedRule"), Symbol("rulesEvaluationResult")=>Symbol("rulesEvaluationResult"))
const _property_types_EvaluatedNetworkSecurityGroup = Dict{Symbol,String}(Symbol("networkSecurityGroupId")=>"String", Symbol("appliedTo")=>"String", Symbol("matchedRule")=>"MatchedRule", Symbol("rulesEvaluationResult")=>"Vector{NetworkSecurityRulesEvaluationResult}")
Base.propertynames(::Type{ EvaluatedNetworkSecurityGroup }) = collect(keys(_property_map_EvaluatedNetworkSecurityGroup))
Swagger.property_type(::Type{ EvaluatedNetworkSecurityGroup }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_EvaluatedNetworkSecurityGroup[name]))}
Swagger.field_name(::Type{ EvaluatedNetworkSecurityGroup }, property_name::Symbol) =  _property_map_EvaluatedNetworkSecurityGroup[property_name]

function check_required(o::EvaluatedNetworkSecurityGroup)
    true
end

function validate_property(::Type{ EvaluatedNetworkSecurityGroup }, name::Symbol, val)
end
