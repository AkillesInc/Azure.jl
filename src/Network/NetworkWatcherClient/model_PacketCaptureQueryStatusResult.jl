# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

mutable struct PacketCaptureQueryStatusResult <: SwaggerModel
    name::Union{ Nothing, String } # name
    id::Union{ Nothing, String } # id
    captureStartTime::Union{ Nothing, DateTime } # captureStartTime
    packetCaptureStatus::Union{ Nothing, String } # packetCaptureStatus
    stopReason::Union{ Nothing, String } # stopReason
    packetCaptureError::Union{ Nothing, Vector{String} } # packetCaptureError

    function PacketCaptureQueryStatusResult(;name=nothing, id=nothing, captureStartTime=nothing, packetCaptureStatus=nothing, stopReason=nothing, packetCaptureError=nothing)
        o = new()
        set_field!(o, :name, name)
        set_field!(o, :id, id)
        set_field!(o, :captureStartTime, captureStartTime)
        set_field!(o, :packetCaptureStatus, packetCaptureStatus)
        set_field!(o, :stopReason, stopReason)
        set_field!(o, :packetCaptureError, packetCaptureError)
        o
    end
end # type PacketCaptureQueryStatusResult

const _name_map_PacketCaptureQueryStatusResult = Dict{String,Symbol}(["name"=>:name, "id"=>:id, "captureStartTime"=>:captureStartTime, "packetCaptureStatus"=>:packetCaptureStatus, "stopReason"=>:stopReason, "packetCaptureError"=>:packetCaptureError])
const _field_map_PacketCaptureQueryStatusResult = Dict{Symbol,String}([:name=>"name", :id=>"id", :captureStartTime=>"captureStartTime", :packetCaptureStatus=>"packetCaptureStatus", :stopReason=>"stopReason", :packetCaptureError=>"packetCaptureError"])
Swagger.name_map(::Type{ PacketCaptureQueryStatusResult }) = _name_map_PacketCaptureQueryStatusResult
Swagger.field_map(::Type{ PacketCaptureQueryStatusResult }) = _field_map_PacketCaptureQueryStatusResult

const _allowed_PacketCaptureQueryStatusResult_packetCaptureStatus = ["NotStarted", "Running", "Stopped", "Error", "Unknown"]

const _allowed_PacketCaptureQueryStatusResult_packetCaptureError = ["InternalError", "AgentStopped", "CaptureFailed", "LocalFileFailed", "StorageFailed"]

function check_required(o::PacketCaptureQueryStatusResult)
    true
end

function validate_field(o::PacketCaptureQueryStatusResult, name::Symbol, val)
    if name === :packetCaptureStatus
        Swagger.validate_param(name, "PacketCaptureQueryStatusResult", :enum, val, _allowed_PacketCaptureQueryStatusResult_packetCaptureStatus)
    end
    if name === :packetCaptureError
        Swagger.validate_param(name, "PacketCaptureQueryStatusResult", :enum, val, _allowed_PacketCaptureQueryStatusResult_packetCaptureError)
    end
end
