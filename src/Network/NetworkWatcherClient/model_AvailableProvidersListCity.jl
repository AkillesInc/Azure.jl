# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct AvailableProvidersListCity <: SwaggerModel
    cityName::Any # spec type: Union{ Nothing, String } # spec name: cityName
    providers::Any # spec type: Union{ Nothing, Vector{String} } # spec name: providers

    function AvailableProvidersListCity(;cityName=nothing, providers=nothing)
        o = new()
        validate_property(AvailableProvidersListCity, Symbol("cityName"), cityName)
        setfield!(o, Symbol("cityName"), cityName)
        validate_property(AvailableProvidersListCity, Symbol("providers"), providers)
        setfield!(o, Symbol("providers"), providers)
        o
    end
end # type AvailableProvidersListCity

const _property_map_AvailableProvidersListCity = Dict{Symbol,Symbol}(Symbol("cityName")=>Symbol("cityName"), Symbol("providers")=>Symbol("providers"))
const _property_types_AvailableProvidersListCity = Dict{Symbol,String}(Symbol("cityName")=>"String", Symbol("providers")=>"Vector{String}")
Base.propertynames(::Type{ AvailableProvidersListCity }) = collect(keys(_property_map_AvailableProvidersListCity))
Swagger.property_type(::Type{ AvailableProvidersListCity }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AvailableProvidersListCity[name]))}
Swagger.field_name(::Type{ AvailableProvidersListCity }, property_name::Symbol) =  _property_map_AvailableProvidersListCity[property_name]

function check_required(o::AvailableProvidersListCity)
    true
end

function validate_property(::Type{ AvailableProvidersListCity }, name::Symbol, val)
end
