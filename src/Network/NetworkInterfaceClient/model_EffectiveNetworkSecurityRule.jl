# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

mutable struct EffectiveNetworkSecurityRule <: SwaggerModel
    name::Union{ Nothing, String } # name
    protocol::Union{ Nothing, String } # protocol
    sourcePortRange::Union{ Nothing, String } # sourcePortRange
    destinationPortRange::Union{ Nothing, String } # destinationPortRange
    sourceAddressPrefix::Union{ Nothing, String } # sourceAddressPrefix
    destinationAddressPrefix::Union{ Nothing, String } # destinationAddressPrefix
    expandedSourceAddressPrefix::Union{ Nothing, Vector{String} } # expandedSourceAddressPrefix
    expandedDestinationAddressPrefix::Union{ Nothing, Vector{String} } # expandedDestinationAddressPrefix
    access::Union{ Nothing, String } # access
    priority::Union{ Nothing, Int32 } # priority
    direction::Union{ Nothing, String } # direction

    function EffectiveNetworkSecurityRule(;name=nothing, protocol=nothing, sourcePortRange=nothing, destinationPortRange=nothing, sourceAddressPrefix=nothing, destinationAddressPrefix=nothing, expandedSourceAddressPrefix=nothing, expandedDestinationAddressPrefix=nothing, access=nothing, priority=nothing, direction=nothing)
        o = new()
        set_field!(o, :name, name)
        set_field!(o, :protocol, protocol)
        set_field!(o, :sourcePortRange, sourcePortRange)
        set_field!(o, :destinationPortRange, destinationPortRange)
        set_field!(o, :sourceAddressPrefix, sourceAddressPrefix)
        set_field!(o, :destinationAddressPrefix, destinationAddressPrefix)
        set_field!(o, :expandedSourceAddressPrefix, expandedSourceAddressPrefix)
        set_field!(o, :expandedDestinationAddressPrefix, expandedDestinationAddressPrefix)
        set_field!(o, :access, access)
        set_field!(o, :priority, priority)
        set_field!(o, :direction, direction)
        o
    end
end # type EffectiveNetworkSecurityRule

const _name_map_EffectiveNetworkSecurityRule = Dict{String,Symbol}(["name"=>:name, "protocol"=>:protocol, "sourcePortRange"=>:sourcePortRange, "destinationPortRange"=>:destinationPortRange, "sourceAddressPrefix"=>:sourceAddressPrefix, "destinationAddressPrefix"=>:destinationAddressPrefix, "expandedSourceAddressPrefix"=>:expandedSourceAddressPrefix, "expandedDestinationAddressPrefix"=>:expandedDestinationAddressPrefix, "access"=>:access, "priority"=>:priority, "direction"=>:direction])
const _field_map_EffectiveNetworkSecurityRule = Dict{Symbol,String}([:name=>"name", :protocol=>"protocol", :sourcePortRange=>"sourcePortRange", :destinationPortRange=>"destinationPortRange", :sourceAddressPrefix=>"sourceAddressPrefix", :destinationAddressPrefix=>"destinationAddressPrefix", :expandedSourceAddressPrefix=>"expandedSourceAddressPrefix", :expandedDestinationAddressPrefix=>"expandedDestinationAddressPrefix", :access=>"access", :priority=>"priority", :direction=>"direction"])
Swagger.name_map(::Type{ EffectiveNetworkSecurityRule }) = _name_map_EffectiveNetworkSecurityRule
Swagger.field_map(::Type{ EffectiveNetworkSecurityRule }) = _field_map_EffectiveNetworkSecurityRule

const _allowed_EffectiveNetworkSecurityRule_protocol = ["Tcp", "Udp", "*"]

const _allowed_EffectiveNetworkSecurityRule_access = ["Allow", "Deny"]

const _allowed_EffectiveNetworkSecurityRule_direction = ["Inbound", "Outbound"]

function check_required(o::EffectiveNetworkSecurityRule)
    true
end

function validate_field(o::EffectiveNetworkSecurityRule, name::Symbol, val)
    if name === :protocol
        Swagger.validate_param(name, "EffectiveNetworkSecurityRule", :enum, val, _allowed_EffectiveNetworkSecurityRule_protocol)
    end
    if name === :access
        Swagger.validate_param(name, "EffectiveNetworkSecurityRule", :enum, val, _allowed_EffectiveNetworkSecurityRule_access)
    end
    if name === :direction
        Swagger.validate_param(name, "EffectiveNetworkSecurityRule", :enum, val, _allowed_EffectiveNetworkSecurityRule_direction)
    end
end
