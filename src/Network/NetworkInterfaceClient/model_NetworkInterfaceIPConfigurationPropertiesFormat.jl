# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

type NetworkInterfaceIPConfigurationPropertiesFormat <: SwaggerModel
    applicationGatewayBackendAddressPools::Nullable{ Vector{ApplicationGatewayBackendAddressPool} } # applicationGatewayBackendAddressPools
    loadBalancerBackendAddressPools::Nullable{ Vector{BackendAddressPool} } # loadBalancerBackendAddressPools
    loadBalancerInboundNatRules::Nullable{ Vector{InboundNatRule} } # loadBalancerInboundNatRules
    privateIPAddress::Nullable{ String } # privateIPAddress
    privateIPAllocationMethod::Nullable{ String } # privateIPAllocationMethod
    privateIPAddressVersion::Nullable{ String } # privateIPAddressVersion
    subnet::Nullable{ Subnet } # subnet
    primary::Nullable{ Bool } # primary
    publicIPAddress::Nullable{ PublicIPAddress } # publicIPAddress
    provisioningState::Nullable{ String } # provisioningState

    function NetworkInterfaceIPConfigurationPropertiesFormat(;applicationGatewayBackendAddressPools=nothing, loadBalancerBackendAddressPools=nothing, loadBalancerInboundNatRules=nothing, privateIPAddress=nothing, privateIPAllocationMethod=nothing, privateIPAddressVersion=nothing, subnet=nothing, primary=nothing, publicIPAddress=nothing, provisioningState=nothing)
        o = new()
        set_field!(o, :applicationGatewayBackendAddressPools, applicationGatewayBackendAddressPools)
        set_field!(o, :loadBalancerBackendAddressPools, loadBalancerBackendAddressPools)
        set_field!(o, :loadBalancerInboundNatRules, loadBalancerInboundNatRules)
        set_field!(o, :privateIPAddress, privateIPAddress)
        set_field!(o, :privateIPAllocationMethod, privateIPAllocationMethod)
        set_field!(o, :privateIPAddressVersion, privateIPAddressVersion)
        set_field!(o, :subnet, subnet)
        set_field!(o, :primary, primary)
        set_field!(o, :publicIPAddress, publicIPAddress)
        set_field!(o, :provisioningState, provisioningState)
        o
    end
end # type NetworkInterfaceIPConfigurationPropertiesFormat

const _name_map_NetworkInterfaceIPConfigurationPropertiesFormat = Dict{String,Symbol}(["applicationGatewayBackendAddressPools"=>:applicationGatewayBackendAddressPools, "loadBalancerBackendAddressPools"=>:loadBalancerBackendAddressPools, "loadBalancerInboundNatRules"=>:loadBalancerInboundNatRules, "privateIPAddress"=>:privateIPAddress, "privateIPAllocationMethod"=>:privateIPAllocationMethod, "privateIPAddressVersion"=>:privateIPAddressVersion, "subnet"=>:subnet, "primary"=>:primary, "publicIPAddress"=>:publicIPAddress, "provisioningState"=>:provisioningState])
const _field_map_NetworkInterfaceIPConfigurationPropertiesFormat = Dict{Symbol,String}([:applicationGatewayBackendAddressPools=>"applicationGatewayBackendAddressPools", :loadBalancerBackendAddressPools=>"loadBalancerBackendAddressPools", :loadBalancerInboundNatRules=>"loadBalancerInboundNatRules", :privateIPAddress=>"privateIPAddress", :privateIPAllocationMethod=>"privateIPAllocationMethod", :privateIPAddressVersion=>"privateIPAddressVersion", :subnet=>"subnet", :primary=>"primary", :publicIPAddress=>"publicIPAddress", :provisioningState=>"provisioningState"])
Swagger.name_map(::Type{ NetworkInterfaceIPConfigurationPropertiesFormat }) = _name_map_NetworkInterfaceIPConfigurationPropertiesFormat
Swagger.field_map(::Type{ NetworkInterfaceIPConfigurationPropertiesFormat }) = _field_map_NetworkInterfaceIPConfigurationPropertiesFormat

const _allowed_NetworkInterfaceIPConfigurationPropertiesFormat_privateIPAllocationMethod = ["Static", "Dynamic"]

const _allowed_NetworkInterfaceIPConfigurationPropertiesFormat_privateIPAddressVersion = ["IPv4", "IPv6"]

function check_required(o::NetworkInterfaceIPConfigurationPropertiesFormat)
    true
end

function validate_field(o::NetworkInterfaceIPConfigurationPropertiesFormat, name::Symbol, val)
    if name === :privateIPAllocationMethod
        Swagger.validate_param(name, "NetworkInterfaceIPConfigurationPropertiesFormat", :enum, val, _allowed_NetworkInterfaceIPConfigurationPropertiesFormat_privateIPAllocationMethod)
    end
    if name === :privateIPAddressVersion
        Swagger.validate_param(name, "NetworkInterfaceIPConfigurationPropertiesFormat", :enum, val, _allowed_NetworkInterfaceIPConfigurationPropertiesFormat_privateIPAddressVersion)
    end
end
