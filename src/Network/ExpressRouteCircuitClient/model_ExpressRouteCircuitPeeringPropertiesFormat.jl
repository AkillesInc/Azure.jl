# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

type ExpressRouteCircuitPeeringPropertiesFormat <: SwaggerModel
    peeringType::Nullable{ String } # peeringType
    state::Nullable{ String } # state
    azureASN::Nullable{ Int32 } # azureASN
    peerASN::Nullable{ Int32 } # peerASN
    primaryPeerAddressPrefix::Nullable{ String } # primaryPeerAddressPrefix
    secondaryPeerAddressPrefix::Nullable{ String } # secondaryPeerAddressPrefix
    primaryAzurePort::Nullable{ String } # primaryAzurePort
    secondaryAzurePort::Nullable{ String } # secondaryAzurePort
    sharedKey::Nullable{ String } # sharedKey
    vlanId::Nullable{ Int32 } # vlanId
    microsoftPeeringConfig::Nullable{ ExpressRouteCircuitPeeringConfig } # microsoftPeeringConfig
    stats::Nullable{ ExpressRouteCircuitStats } # stats
    provisioningState::Nullable{ String } # provisioningState
    gatewayManagerEtag::Nullable{ String } # gatewayManagerEtag
    lastModifiedBy::Nullable{ String } # lastModifiedBy
    routeFilter::Nullable{ RouteFilter } # routeFilter

    function ExpressRouteCircuitPeeringPropertiesFormat(;peeringType=nothing, state=nothing, azureASN=nothing, peerASN=nothing, primaryPeerAddressPrefix=nothing, secondaryPeerAddressPrefix=nothing, primaryAzurePort=nothing, secondaryAzurePort=nothing, sharedKey=nothing, vlanId=nothing, microsoftPeeringConfig=nothing, stats=nothing, provisioningState=nothing, gatewayManagerEtag=nothing, lastModifiedBy=nothing, routeFilter=nothing)
        o = new()
        set_field!(o, :peeringType, peeringType)
        set_field!(o, :state, state)
        set_field!(o, :azureASN, azureASN)
        set_field!(o, :peerASN, peerASN)
        set_field!(o, :primaryPeerAddressPrefix, primaryPeerAddressPrefix)
        set_field!(o, :secondaryPeerAddressPrefix, secondaryPeerAddressPrefix)
        set_field!(o, :primaryAzurePort, primaryAzurePort)
        set_field!(o, :secondaryAzurePort, secondaryAzurePort)
        set_field!(o, :sharedKey, sharedKey)
        set_field!(o, :vlanId, vlanId)
        set_field!(o, :microsoftPeeringConfig, microsoftPeeringConfig)
        set_field!(o, :stats, stats)
        set_field!(o, :provisioningState, provisioningState)
        set_field!(o, :gatewayManagerEtag, gatewayManagerEtag)
        set_field!(o, :lastModifiedBy, lastModifiedBy)
        set_field!(o, :routeFilter, routeFilter)
        o
    end
end # type ExpressRouteCircuitPeeringPropertiesFormat

const _name_map_ExpressRouteCircuitPeeringPropertiesFormat = Dict{String,Symbol}(["peeringType"=>:peeringType, "state"=>:state, "azureASN"=>:azureASN, "peerASN"=>:peerASN, "primaryPeerAddressPrefix"=>:primaryPeerAddressPrefix, "secondaryPeerAddressPrefix"=>:secondaryPeerAddressPrefix, "primaryAzurePort"=>:primaryAzurePort, "secondaryAzurePort"=>:secondaryAzurePort, "sharedKey"=>:sharedKey, "vlanId"=>:vlanId, "microsoftPeeringConfig"=>:microsoftPeeringConfig, "stats"=>:stats, "provisioningState"=>:provisioningState, "gatewayManagerEtag"=>:gatewayManagerEtag, "lastModifiedBy"=>:lastModifiedBy, "routeFilter"=>:routeFilter])
const _field_map_ExpressRouteCircuitPeeringPropertiesFormat = Dict{Symbol,String}([:peeringType=>"peeringType", :state=>"state", :azureASN=>"azureASN", :peerASN=>"peerASN", :primaryPeerAddressPrefix=>"primaryPeerAddressPrefix", :secondaryPeerAddressPrefix=>"secondaryPeerAddressPrefix", :primaryAzurePort=>"primaryAzurePort", :secondaryAzurePort=>"secondaryAzurePort", :sharedKey=>"sharedKey", :vlanId=>"vlanId", :microsoftPeeringConfig=>"microsoftPeeringConfig", :stats=>"stats", :provisioningState=>"provisioningState", :gatewayManagerEtag=>"gatewayManagerEtag", :lastModifiedBy=>"lastModifiedBy", :routeFilter=>"routeFilter"])
Swagger.name_map(::Type{ ExpressRouteCircuitPeeringPropertiesFormat }) = _name_map_ExpressRouteCircuitPeeringPropertiesFormat
Swagger.field_map(::Type{ ExpressRouteCircuitPeeringPropertiesFormat }) = _field_map_ExpressRouteCircuitPeeringPropertiesFormat

const _allowed_ExpressRouteCircuitPeeringPropertiesFormat_peeringType = ["AzurePublicPeering", "AzurePrivatePeering", "MicrosoftPeering"]

const _allowed_ExpressRouteCircuitPeeringPropertiesFormat_state = ["Disabled", "Enabled"]

function check_required(o::ExpressRouteCircuitPeeringPropertiesFormat)
    true
end

function validate_field(o::ExpressRouteCircuitPeeringPropertiesFormat, name::Symbol, val)
    if name === :peeringType
        Swagger.validate_param(name, "ExpressRouteCircuitPeeringPropertiesFormat", :enum, val, _allowed_ExpressRouteCircuitPeeringPropertiesFormat_peeringType)
    end
    if name === :state
        Swagger.validate_param(name, "ExpressRouteCircuitPeeringPropertiesFormat", :enum, val, _allowed_ExpressRouteCircuitPeeringPropertiesFormat_state)
    end
end
