# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

type ExpressRouteCircuitPropertiesFormat <: SwaggerModel
    allowClassicOperations::Nullable{ Bool } # allowClassicOperations
    circuitProvisioningState::Nullable{ String } # circuitProvisioningState
    serviceProviderProvisioningState::Nullable{ String } # serviceProviderProvisioningState
    authorizations::Nullable{ Vector{ExpressRouteCircuitAuthorization} } # authorizations
    peerings::Nullable{ Vector{ExpressRouteCircuitPeering} } # peerings
    serviceKey::Nullable{ String } # serviceKey
    serviceProviderNotes::Nullable{ String } # serviceProviderNotes
    serviceProviderProperties::Nullable{ ExpressRouteCircuitServiceProviderProperties } # serviceProviderProperties
    provisioningState::Nullable{ String } # provisioningState
    gatewayManagerEtag::Nullable{ String } # gatewayManagerEtag

    function ExpressRouteCircuitPropertiesFormat(;allowClassicOperations=nothing, circuitProvisioningState=nothing, serviceProviderProvisioningState=nothing, authorizations=nothing, peerings=nothing, serviceKey=nothing, serviceProviderNotes=nothing, serviceProviderProperties=nothing, provisioningState=nothing, gatewayManagerEtag=nothing)
        o = new()
        set_field!(o, :allowClassicOperations, allowClassicOperations)
        set_field!(o, :circuitProvisioningState, circuitProvisioningState)
        set_field!(o, :serviceProviderProvisioningState, serviceProviderProvisioningState)
        set_field!(o, :authorizations, authorizations)
        set_field!(o, :peerings, peerings)
        set_field!(o, :serviceKey, serviceKey)
        set_field!(o, :serviceProviderNotes, serviceProviderNotes)
        set_field!(o, :serviceProviderProperties, serviceProviderProperties)
        set_field!(o, :provisioningState, provisioningState)
        set_field!(o, :gatewayManagerEtag, gatewayManagerEtag)
        o
    end
end # type ExpressRouteCircuitPropertiesFormat

const _name_map_ExpressRouteCircuitPropertiesFormat = Dict{String,Symbol}(["allowClassicOperations"=>:allowClassicOperations, "circuitProvisioningState"=>:circuitProvisioningState, "serviceProviderProvisioningState"=>:serviceProviderProvisioningState, "authorizations"=>:authorizations, "peerings"=>:peerings, "serviceKey"=>:serviceKey, "serviceProviderNotes"=>:serviceProviderNotes, "serviceProviderProperties"=>:serviceProviderProperties, "provisioningState"=>:provisioningState, "gatewayManagerEtag"=>:gatewayManagerEtag])
const _field_map_ExpressRouteCircuitPropertiesFormat = Dict{Symbol,String}([:allowClassicOperations=>"allowClassicOperations", :circuitProvisioningState=>"circuitProvisioningState", :serviceProviderProvisioningState=>"serviceProviderProvisioningState", :authorizations=>"authorizations", :peerings=>"peerings", :serviceKey=>"serviceKey", :serviceProviderNotes=>"serviceProviderNotes", :serviceProviderProperties=>"serviceProviderProperties", :provisioningState=>"provisioningState", :gatewayManagerEtag=>"gatewayManagerEtag"])
Swagger.name_map(::Type{ ExpressRouteCircuitPropertiesFormat }) = _name_map_ExpressRouteCircuitPropertiesFormat
Swagger.field_map(::Type{ ExpressRouteCircuitPropertiesFormat }) = _field_map_ExpressRouteCircuitPropertiesFormat

const _allowed_ExpressRouteCircuitPropertiesFormat_serviceProviderProvisioningState = ["NotProvisioned", "Provisioning", "Provisioned", "Deprovisioning"]

function check_required(o::ExpressRouteCircuitPropertiesFormat)
    true
end

function validate_field(o::ExpressRouteCircuitPropertiesFormat, name::Symbol, val)
    if name === :serviceProviderProvisioningState
        Swagger.validate_param(name, "ExpressRouteCircuitPropertiesFormat", :enum, val, _allowed_ExpressRouteCircuitPropertiesFormat_serviceProviderProvisioningState)
    end
end
