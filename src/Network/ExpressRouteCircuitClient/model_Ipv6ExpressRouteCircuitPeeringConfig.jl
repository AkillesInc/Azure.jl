# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

type Ipv6ExpressRouteCircuitPeeringConfig <: SwaggerModel
    primaryPeerAddressPrefix::Nullable{ String } # primaryPeerAddressPrefix
    secondaryPeerAddressPrefix::Nullable{ String } # secondaryPeerAddressPrefix
    microsoftPeeringConfig::Nullable{ ExpressRouteCircuitPeeringConfig } # microsoftPeeringConfig
    routeFilter::Nullable{ RouteFilter } # routeFilter
    state::Nullable{ String } # state

    function Ipv6ExpressRouteCircuitPeeringConfig(;primaryPeerAddressPrefix=nothing, secondaryPeerAddressPrefix=nothing, microsoftPeeringConfig=nothing, routeFilter=nothing, state=nothing)
        o = new()
        set_field!(o, :primaryPeerAddressPrefix, primaryPeerAddressPrefix)
        set_field!(o, :secondaryPeerAddressPrefix, secondaryPeerAddressPrefix)
        set_field!(o, :microsoftPeeringConfig, microsoftPeeringConfig)
        set_field!(o, :routeFilter, routeFilter)
        set_field!(o, :state, state)
        o
    end
end # type Ipv6ExpressRouteCircuitPeeringConfig

const _name_map_Ipv6ExpressRouteCircuitPeeringConfig = Dict{String,Symbol}(["primaryPeerAddressPrefix"=>:primaryPeerAddressPrefix, "secondaryPeerAddressPrefix"=>:secondaryPeerAddressPrefix, "microsoftPeeringConfig"=>:microsoftPeeringConfig, "routeFilter"=>:routeFilter, "state"=>:state])
const _field_map_Ipv6ExpressRouteCircuitPeeringConfig = Dict{Symbol,String}([:primaryPeerAddressPrefix=>"primaryPeerAddressPrefix", :secondaryPeerAddressPrefix=>"secondaryPeerAddressPrefix", :microsoftPeeringConfig=>"microsoftPeeringConfig", :routeFilter=>"routeFilter", :state=>"state"])
Swagger.name_map(::Type{ Ipv6ExpressRouteCircuitPeeringConfig }) = _name_map_Ipv6ExpressRouteCircuitPeeringConfig
Swagger.field_map(::Type{ Ipv6ExpressRouteCircuitPeeringConfig }) = _field_map_Ipv6ExpressRouteCircuitPeeringConfig

const _allowed_Ipv6ExpressRouteCircuitPeeringConfig_state = ["Disabled", "Enabled"]

function check_required(o::Ipv6ExpressRouteCircuitPeeringConfig)
    true
end

function validate_field(o::Ipv6ExpressRouteCircuitPeeringConfig, name::Symbol, val)
    if name === :state
        Swagger.validate_param(name, "Ipv6ExpressRouteCircuitPeeringConfig", :enum, val, _allowed_Ipv6ExpressRouteCircuitPeeringConfig_state)
    end
end
