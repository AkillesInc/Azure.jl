# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

type ExpressRouteServiceProviderPropertiesFormat <: SwaggerModel
    peeringLocations::Nullable{ Vector{String} } # peeringLocations
    bandwidthsOffered::Nullable{ Vector{ExpressRouteServiceProviderBandwidthsOffered} } # bandwidthsOffered
    provisioningState::Nullable{ String } # provisioningState

    function ExpressRouteServiceProviderPropertiesFormat(;peeringLocations=nothing, bandwidthsOffered=nothing, provisioningState=nothing)
        o = new()
        set_field!(o, :peeringLocations, peeringLocations)
        set_field!(o, :bandwidthsOffered, bandwidthsOffered)
        set_field!(o, :provisioningState, provisioningState)
        o
    end
end # type ExpressRouteServiceProviderPropertiesFormat

const _name_map_ExpressRouteServiceProviderPropertiesFormat = Dict{String,Symbol}(["peeringLocations"=>:peeringLocations, "bandwidthsOffered"=>:bandwidthsOffered, "provisioningState"=>:provisioningState])
const _field_map_ExpressRouteServiceProviderPropertiesFormat = Dict{Symbol,String}([:peeringLocations=>"peeringLocations", :bandwidthsOffered=>"bandwidthsOffered", :provisioningState=>"provisioningState"])
Swagger.name_map(::Type{ ExpressRouteServiceProviderPropertiesFormat }) = _name_map_ExpressRouteServiceProviderPropertiesFormat
Swagger.field_map(::Type{ ExpressRouteServiceProviderPropertiesFormat }) = _field_map_ExpressRouteServiceProviderPropertiesFormat

function check_required(o::ExpressRouteServiceProviderPropertiesFormat)
    true
end

function validate_field(o::ExpressRouteServiceProviderPropertiesFormat, name::Symbol, val)
end
