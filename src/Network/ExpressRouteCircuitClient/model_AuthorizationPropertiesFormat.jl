# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

type AuthorizationPropertiesFormat <: SwaggerModel
    authorizationKey::Nullable{ String } # authorizationKey
    authorizationUseStatus::Nullable{ String } # authorizationUseStatus
    provisioningState::Nullable{ String } # provisioningState

    function AuthorizationPropertiesFormat(;authorizationKey=nothing, authorizationUseStatus=nothing, provisioningState=nothing)
        o = new()
        set_field!(o, :authorizationKey, authorizationKey)
        set_field!(o, :authorizationUseStatus, authorizationUseStatus)
        set_field!(o, :provisioningState, provisioningState)
        o
    end
end # type AuthorizationPropertiesFormat

const _name_map_AuthorizationPropertiesFormat = Dict{String,Symbol}(["authorizationKey"=>:authorizationKey, "authorizationUseStatus"=>:authorizationUseStatus, "provisioningState"=>:provisioningState])
const _field_map_AuthorizationPropertiesFormat = Dict{Symbol,String}([:authorizationKey=>"authorizationKey", :authorizationUseStatus=>"authorizationUseStatus", :provisioningState=>"provisioningState"])
Swagger.name_map(::Type{ AuthorizationPropertiesFormat }) = _name_map_AuthorizationPropertiesFormat
Swagger.field_map(::Type{ AuthorizationPropertiesFormat }) = _field_map_AuthorizationPropertiesFormat

const _allowed_AuthorizationPropertiesFormat_authorizationUseStatus = ["Available", "InUse"]

function check_required(o::AuthorizationPropertiesFormat)
    true
end

function validate_field(o::AuthorizationPropertiesFormat, name::Symbol, val)
    if name === :authorizationUseStatus
        Swagger.validate_param(name, "AuthorizationPropertiesFormat", :enum, val, _allowed_AuthorizationPropertiesFormat_authorizationUseStatus)
    end
end
