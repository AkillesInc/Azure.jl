# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

mutable struct SubnetPropertiesFormat <: SwaggerModel
    addressPrefix::Union{ Nothing, String } # addressPrefix
    networkSecurityGroup::Union{ Nothing, NetworkSecurityGroup } # networkSecurityGroup
    routeTable::Union{ Nothing, RouteTable } # routeTable
    ipConfigurations::Union{ Nothing, Vector{IPConfiguration} } # ipConfigurations
    resourceNavigationLinks::Union{ Nothing, Vector{ResourceNavigationLink} } # resourceNavigationLinks
    provisioningState::Union{ Nothing, String } # provisioningState

    function SubnetPropertiesFormat(;addressPrefix=nothing, networkSecurityGroup=nothing, routeTable=nothing, ipConfigurations=nothing, resourceNavigationLinks=nothing, provisioningState=nothing)
        o = new()
        set_field!(o, :addressPrefix, addressPrefix)
        set_field!(o, :networkSecurityGroup, networkSecurityGroup)
        set_field!(o, :routeTable, routeTable)
        set_field!(o, :ipConfigurations, ipConfigurations)
        set_field!(o, :resourceNavigationLinks, resourceNavigationLinks)
        set_field!(o, :provisioningState, provisioningState)
        o
    end
end # type SubnetPropertiesFormat

const _name_map_SubnetPropertiesFormat = Dict{String,Symbol}(["addressPrefix"=>:addressPrefix, "networkSecurityGroup"=>:networkSecurityGroup, "routeTable"=>:routeTable, "ipConfigurations"=>:ipConfigurations, "resourceNavigationLinks"=>:resourceNavigationLinks, "provisioningState"=>:provisioningState])
const _field_map_SubnetPropertiesFormat = Dict{Symbol,String}([:addressPrefix=>"addressPrefix", :networkSecurityGroup=>"networkSecurityGroup", :routeTable=>"routeTable", :ipConfigurations=>"ipConfigurations", :resourceNavigationLinks=>"resourceNavigationLinks", :provisioningState=>"provisioningState"])
Swagger.name_map(::Type{ SubnetPropertiesFormat }) = _name_map_SubnetPropertiesFormat
Swagger.field_map(::Type{ SubnetPropertiesFormat }) = _field_map_SubnetPropertiesFormat

function check_required(o::SubnetPropertiesFormat)
    true
end

function validate_field(o::SubnetPropertiesFormat, name::Symbol, val)
end
