# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

mutable struct VirtualNetworkPeeringPropertiesFormat <: SwaggerModel
    allowVirtualNetworkAccess::Union{ Nothing, Bool } # allowVirtualNetworkAccess
    allowForwardedTraffic::Union{ Nothing, Bool } # allowForwardedTraffic
    allowGatewayTransit::Union{ Nothing, Bool } # allowGatewayTransit
    useRemoteGateways::Union{ Nothing, Bool } # useRemoteGateways
    remoteVirtualNetwork::Union{ Nothing, SubResource } # remoteVirtualNetwork
    peeringState::Union{ Nothing, String } # peeringState
    provisioningState::Union{ Nothing, String } # provisioningState

    function VirtualNetworkPeeringPropertiesFormat(;allowVirtualNetworkAccess=nothing, allowForwardedTraffic=nothing, allowGatewayTransit=nothing, useRemoteGateways=nothing, remoteVirtualNetwork=nothing, peeringState=nothing, provisioningState=nothing)
        o = new()
        set_field!(o, :allowVirtualNetworkAccess, allowVirtualNetworkAccess)
        set_field!(o, :allowForwardedTraffic, allowForwardedTraffic)
        set_field!(o, :allowGatewayTransit, allowGatewayTransit)
        set_field!(o, :useRemoteGateways, useRemoteGateways)
        set_field!(o, :remoteVirtualNetwork, remoteVirtualNetwork)
        set_field!(o, :peeringState, peeringState)
        set_field!(o, :provisioningState, provisioningState)
        o
    end
end # type VirtualNetworkPeeringPropertiesFormat

const _name_map_VirtualNetworkPeeringPropertiesFormat = Dict{String,Symbol}(["allowVirtualNetworkAccess"=>:allowVirtualNetworkAccess, "allowForwardedTraffic"=>:allowForwardedTraffic, "allowGatewayTransit"=>:allowGatewayTransit, "useRemoteGateways"=>:useRemoteGateways, "remoteVirtualNetwork"=>:remoteVirtualNetwork, "peeringState"=>:peeringState, "provisioningState"=>:provisioningState])
const _field_map_VirtualNetworkPeeringPropertiesFormat = Dict{Symbol,String}([:allowVirtualNetworkAccess=>"allowVirtualNetworkAccess", :allowForwardedTraffic=>"allowForwardedTraffic", :allowGatewayTransit=>"allowGatewayTransit", :useRemoteGateways=>"useRemoteGateways", :remoteVirtualNetwork=>"remoteVirtualNetwork", :peeringState=>"peeringState", :provisioningState=>"provisioningState"])
Swagger.name_map(::Type{ VirtualNetworkPeeringPropertiesFormat }) = _name_map_VirtualNetworkPeeringPropertiesFormat
Swagger.field_map(::Type{ VirtualNetworkPeeringPropertiesFormat }) = _field_map_VirtualNetworkPeeringPropertiesFormat

const _allowed_VirtualNetworkPeeringPropertiesFormat_peeringState = ["Initiated", "Connected", "Disconnected"]

function check_required(o::VirtualNetworkPeeringPropertiesFormat)
    true
end

function validate_field(o::VirtualNetworkPeeringPropertiesFormat, name::Symbol, val)
    if name === :peeringState
        Swagger.validate_param(name, "VirtualNetworkPeeringPropertiesFormat", :enum, val, _allowed_VirtualNetworkPeeringPropertiesFormat_peeringState)
    end
end
